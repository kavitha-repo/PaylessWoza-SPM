// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.1 effective-5.10 (swiftlang-6.1.0.110.21 clang-1700.0.13.3)
// swift-module-flags: -target arm64-apple-ios14.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -module-name AmityUIKit4
// swift-module-flags-ignorable: -no-verify-emitted-module-interface -interface-compiler-version 6.1
import AVFoundation
import AVKit
import Accelerate
import AmityLiveVideoBroadcastKit
import AmitySDK
@_exported import AmityUIKit4
import AmityVideoPlayerKit
import CarPlay
import Combine
import CommonCrypto
import CoreData
import CoreGraphics
import CoreImage
import CoreLocation
import CoreMotion
import CryptoKit
import DeveloperToolsSupport
import Foundation
import ImageIO
import LinkPresentation
import MobileCoreServices
import Network
import OSLog
import Photos
import PhotosUI
import RealmSwift
import Swift
import SwiftUI
import UIKit
import UniformTypeIdentifiers
import _AVKit_SwiftUI
import _Concurrency
import _PhotosUI_SwiftUI
import _StringProcessing
import _SwiftConcurrencyShims
import os.log
import os
public enum AmityCommentButtonActionType {
  case react(AmityUIKit4.AmityCommentModel)
  case reply(AmityUIKit4.AmityCommentModel)
  case meatball(AmityUIKit4.AmityCommentModel)
  case userProfile(Swift.String)
}
public typealias AmityCommentButtonAction = (AmityUIKit4.AmityCommentButtonActionType) -> Swift.Void
@_Concurrency.MainActor @preconcurrency public struct AmityCommentView : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public init(comment: AmityUIKit4.AmityCommentModel, hideReplyButton: Swift.Bool = false, hideButtonView: Swift.Bool = false, commentButtonAction: @escaping AmityUIKit4.AmityCommentButtonAction)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s11AmityUIKit40A11CommentViewV4bodyQrvp", 0) __
}
open class AmityNotificationTrayPageBehavior {
  open class Context {
    final public let page: AmityUIKit4.AmityNotificationTrayPage
    final public let postId: Swift.String?
    final public let commentId: Swift.String?
    final public let parentCommentId: Swift.String?
    final public let communityId: Swift.String?
    public init(page: AmityUIKit4.AmityNotificationTrayPage, postId: Swift.String?, commentId: Swift.String?, parentCommentId: Swift.String?, communityId: Swift.String?)
    @objc deinit
  }
  public init()
  open func goToPostDetailPage(context: AmityUIKit4.AmityNotificationTrayPageBehavior.Context)
  open func goToCommunityProfilePage(context: AmityUIKit4.AmityNotificationTrayPageBehavior.Context)
  @objc deinit
}
public protocol ImageDownloaderDelegate : AnyObject {
  func imageDownloader(_ downloader: AmityUIKit4.ImageDownloader, willDownloadImageForURL url: Foundation.URL, with request: Foundation.URLRequest?)
  func imageDownloader(_ downloader: AmityUIKit4.ImageDownloader, didFinishDownloadingImageForURL url: Foundation.URL, with response: Foundation.URLResponse?, error: (any Swift.Error)?)
  func imageDownloader(_ downloader: AmityUIKit4.ImageDownloader, didDownload data: Foundation.Data, with dataTask: AmityUIKit4.SessionDataTask) -> Foundation.Data?
  func imageDownloader(_ downloader: AmityUIKit4.ImageDownloader, didDownload data: Foundation.Data, for url: Foundation.URL) -> Foundation.Data?
  func imageDownloader(_ downloader: AmityUIKit4.ImageDownloader, didDownload image: AmityUIKit4.KFCrossPlatformImage, for url: Foundation.URL, with response: Foundation.URLResponse?)
  func isValidStatusCode(_ code: Swift.Int, for downloader: AmityUIKit4.ImageDownloader) -> Swift.Bool
  func imageDownloader(_ downloader: AmityUIKit4.ImageDownloader, didReceive response: Foundation.URLResponse) async -> Foundation.URLSession.ResponseDisposition
}
extension AmityUIKit4.ImageDownloaderDelegate {
  public func imageDownloader(_ downloader: AmityUIKit4.ImageDownloader, willDownloadImageForURL url: Foundation.URL, with request: Foundation.URLRequest?)
  public func imageDownloader(_ downloader: AmityUIKit4.ImageDownloader, didFinishDownloadingImageForURL url: Foundation.URL, with response: Foundation.URLResponse?, error: (any Swift.Error)?)
  public func imageDownloader(_ downloader: AmityUIKit4.ImageDownloader, didDownload image: AmityUIKit4.KFCrossPlatformImage, for url: Foundation.URL, with response: Foundation.URLResponse?)
  public func isValidStatusCode(_ code: Swift.Int, for downloader: AmityUIKit4.ImageDownloader) -> Swift.Bool
  public func imageDownloader(_ downloader: AmityUIKit4.ImageDownloader, didDownload data: Foundation.Data, with task: AmityUIKit4.SessionDataTask) -> Foundation.Data?
  public func imageDownloader(_ downloader: AmityUIKit4.ImageDownloader, didDownload data: Foundation.Data, for url: Foundation.URL) -> Foundation.Data?
  public func imageDownloader(_ downloader: AmityUIKit4.ImageDownloader, didReceive response: Foundation.URLResponse) async -> Foundation.URLSession.ResponseDisposition
}
public enum VideoCacheManager {
  public static func cachedFilePath(for url: Foundation.URL) -> Swift.String
  public static func cachedConfiguration(for url: Foundation.URL) throws -> AmityUIKit4.VideoCacheConfiguration
  public static func calculateCachedSize() -> Swift.UInt
  public static func cleanAllCache() throws
}
@_hasMissingDesignatedInitializers final public class AmityUIKit4Manager {
  public static func setup(apiKey: Swift.String, region: AmitySDK.AmityRegion = .SG)
  public static func setup(apiKey: Swift.String, endpoint: AmitySDK.AmityEndpoint)
  public static func setup(client: AmitySDK.AmityClient)
  public static func registerDevice(withUserId userId: Swift.String, displayName: Swift.String?, authToken: Swift.String? = nil, sessionHandler: any AmitySDK.SessionHandler, completion: AmitySDK.AmityRequestCompletion? = nil)
  public static func unregisterDevice()
  public static func registerDeviceForPushNotification(_ deviceToken: Swift.String, completion: AmitySDK.AmityRequestCompletion? = nil)
  public static func unregisterDevicePushNotification(completion: AmitySDK.AmityRequestCompletion? = nil)
  public static func setEnvironment(_ env: [Swift.String : Any])
  public static func didUpdateClient()
  public static var client: AmitySDK.AmityClient {
    get
  }
  public static var behaviour: AmityUIKit4.AmityUIKitBehaviour {
    get
    set
  }
  public static func syncNetworkConfig() async throws
  @objc deinit
}
@_Concurrency.MainActor @preconcurrency public struct AmityCommunityMembershipPage : AmityUIKit4.AmityPageView {
  @SwiftUICore.EnvironmentObject @_projectedValueProperty($host) @_Concurrency.MainActor @preconcurrency public var host: AmityUIKit4.AmitySwiftUIHostWrapper {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var $host: SwiftUICore.EnvironmentObject<AmityUIKit4.AmitySwiftUIHostWrapper>.Wrapper {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var id: AmityUIKit4.PageId {
    get
  }
  @_Concurrency.MainActor @preconcurrency public init(community: AmitySDK.AmityCommunity)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s11AmityUIKit40A23CommunityMembershipPageV4bodyQrvp", 0) __
  public typealias ID = AmityUIKit4.PageId
}
public enum AmityPostComposerMode {
  case create
  case edit
  public static func == (a: AmityUIKit4.AmityPostComposerMode, b: AmityUIKit4.AmityPostComposerMode) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum AmityPostComposerOptions {
  case editOptions(mode: AmityUIKit4.AmityPostComposerMode = .edit, post: AmityUIKit4.AmityPostModel)
  case createOptions(mode: AmityUIKit4.AmityPostComposerMode = .create, targetId: Swift.String?, targetType: AmitySDK.AmityPostTargetType, community: AmityUIKit4.AmityCommunityModel?)
}
@_Concurrency.MainActor @preconcurrency public struct AmityPostComposerPage : AmityUIKit4.AmityPageView {
  @_Concurrency.MainActor @preconcurrency public var id: AmityUIKit4.PageId {
    get
  }
  @_Concurrency.MainActor @preconcurrency public init(options: AmityUIKit4.AmityPostComposerOptions)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s11AmityUIKit40A16PostComposerPageV4bodyQrvp", 0) __
  public typealias ID = AmityUIKit4.PageId
}
@_Concurrency.MainActor @preconcurrency public struct AmityUserProfilePage : AmityUIKit4.AmityPageView {
  @SwiftUICore.EnvironmentObject @_projectedValueProperty($host) @_Concurrency.MainActor @preconcurrency public var host: AmityUIKit4.AmitySwiftUIHostWrapper {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var $host: SwiftUICore.EnvironmentObject<AmityUIKit4.AmitySwiftUIHostWrapper>.Wrapper {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var id: AmityUIKit4.PageId {
    get
  }
  @_Concurrency.MainActor @preconcurrency public init(userId: Swift.String, isMain: Swift.Bool = false)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s11AmityUIKit40A15UserProfilePageV4bodyQrvp", 0) __
  public typealias ID = AmityUIKit4.PageId
}
public class AmityMediaAttachmentViewModel : Foundation.ObservableObject {
  public init(medias: [AmityUIKit4.AmityMedia] = [], isPostEditing: Swift.Bool)
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
@_Concurrency.MainActor @preconcurrency public struct AmityTrendingCommunitiesComponent {
  @SwiftUICore.EnvironmentObject @_projectedValueProperty($host) @_Concurrency.MainActor @preconcurrency public var host: AmityUIKit4.AmitySwiftUIHostWrapper {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var $host: SwiftUICore.EnvironmentObject<AmityUIKit4.AmitySwiftUIHostWrapper>.Wrapper {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var pageId: AmityUIKit4.PageId?
  @_Concurrency.MainActor @preconcurrency public var id: AmityUIKit4.ComponentId {
    get
  }
  @_Concurrency.MainActor @preconcurrency public init(pageId: AmityUIKit4.PageId? = .socialHomePage)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s11AmityUIKit40A28TrendingCommunitiesComponentV4bodyQrvp", 0) __
  public typealias ID = AmityUIKit4.ComponentId
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public enum HorizontalSwipeDirection {
  case startToEnd
  case endToStart
  public static func == (a: AmityUIKit4.HorizontalSwipeDirection, b: AmityUIKit4.HorizontalSwipeDirection) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public enum VerticalSwipeDirection {
  case topToBottom
  case bottomToTop
  public static func == (a: AmityUIKit4.VerticalSwipeDirection, b: AmityUIKit4.VerticalSwipeDirection) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
open class AmityLivestreamPostTargetSelectionPageBehavior {
  @_hasMissingDesignatedInitializers open class Context {
    final public let page: AmityUIKit4.AmityLivestreamPostTargetSelectionPage
    final public let community: AmityUIKit4.AmityCommunityModel?
    @objc deinit
  }
  public init()
  open func goToLiveStreamComposerPage(context: AmityUIKit4.AmityLivestreamPostTargetSelectionPageBehavior.Context)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class StoryPermissionChecker {
  public static func checkUserHasManagePermission(communityId: Swift.String) async -> Swift.Bool
  @objc deinit
}
open class AmityUserProfilePageBehavior {
  @_hasMissingDesignatedInitializers open class Context {
    final public let page: AmityUIKit4.AmityUserProfilePage
    @objc deinit
  }
  public init()
  open func goToEditUserPage(context: AmityUIKit4.AmityUserProfilePageBehavior.Context)
  open func goToBlockedUsersPage(context: AmityUIKit4.AmityUserProfilePageBehavior.Context)
  open func goToPostComposerPage(context: AmityUIKit4.AmityUserProfilePageBehavior.Context)
  open func goToPollPostComposerPage(context: AmityUIKit4.AmityUserProfilePageBehavior.Context)
  open func goToLivestreamPostComposerPage(context: AmityUIKit4.AmityUserProfilePageBehavior.Context)
  @objc deinit
}
public protocol URLImageFileStoreType : AmityUIKit4.URLImageStoreType {
  func getImage<T>(_ keys: [AmityUIKit4.URLImageKey], open: @escaping (_ location: Foundation.URL) throws -> T?, completion: @escaping (_ result: Swift.Result<T?, any Swift.Error>) -> Swift.Void)
  func storeImageData(_ data: Foundation.Data, info: AmityUIKit4.URLImageStoreInfo)
  func moveImageFile(from location: Foundation.URL, info: AmityUIKit4.URLImageStoreInfo)
}
public enum AmityViewStoryPageType {
  case communityFeed(Swift.String)
  case globalFeed(Swift.String)
}
@_Concurrency.MainActor @preconcurrency public struct AmityViewStoryPage : AmityUIKit4.AmityPageView {
  @SwiftUICore.EnvironmentObject @_projectedValueProperty($host) @_Concurrency.MainActor @preconcurrency public var host: AmityUIKit4.AmitySwiftUIHostWrapper {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var $host: SwiftUICore.EnvironmentObject<AmityUIKit4.AmitySwiftUIHostWrapper>.Wrapper {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var id: AmityUIKit4.PageId {
    get
  }
  @_Concurrency.MainActor @preconcurrency public init(type: AmityUIKit4.AmityViewStoryPageType)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s11AmityUIKit40A13ViewStoryPageV4bodyQrvp", 0) __
  public typealias ID = AmityUIKit4.PageId
}
open class AmityCommunityProfilePageBehavior {
  @_hasMissingDesignatedInitializers open class Context {
    final public let page: AmityUIKit4.AmityCommunityProfilePage
    public var community: AmitySDK.AmityCommunity?
    final public let showPollResult: Swift.Bool
    @objc deinit
  }
  public init()
  open func goToPendingPostPage(context: AmityUIKit4.AmityCommunityProfilePageBehavior.Context)
  open func goToCommunitySettingPage(context: AmityUIKit4.AmityCommunityProfilePageBehavior.Context)
  open func goToPostComposerPage(context: AmityUIKit4.AmityCommunityProfilePageBehavior.Context, community: AmityUIKit4.AmityCommunityModel? = nil)
  open func goToPollPostComposerPage(context: AmityUIKit4.AmityCommunityProfilePageBehavior.Context, community: AmityUIKit4.AmityCommunityModel?)
  open func goToLivestreamPostComposerPage(context: AmityUIKit4.AmityCommunityProfilePageBehavior.Context, community: AmityUIKit4.AmityCommunityModel?)
  open func goToCreateStoryPage(context: AmityUIKit4.AmityCommunityProfilePageBehavior.Context, community: AmityUIKit4.AmityCommunityModel?)
  open func goToMemberListPage(context: AmityUIKit4.AmityCommunityProfilePageBehavior.Context, community: AmityUIKit4.AmityCommunityModel?)
  open func goToPostDetailPage(context: AmityUIKit4.AmityCommunityProfilePageBehavior.Context, post: AmityUIKit4.AmityPostModel?, category: AmityUIKit4.AmityPostCategory = .general)
  @objc deinit
}
@_Concurrency.MainActor @preconcurrency public struct Shimmer : SwiftUICore.ViewModifier {
  @_Concurrency.MainActor @preconcurrency public init(animation: SwiftUICore.Animation = Self.defaultAnimation, gradient: SwiftUICore.Gradient = Self.defaultGradient, bandSize: CoreFoundation.CGFloat = 0.3)
  @_Concurrency.MainActor @preconcurrency public static let defaultAnimation: SwiftUICore.Animation
  @_Concurrency.MainActor @preconcurrency public static let defaultGradient: SwiftUICore.Gradient
  @_Concurrency.MainActor @preconcurrency public func body(content: AmityUIKit4.Shimmer.Content) -> some SwiftUICore.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s11AmityUIKit47ShimmerV4body7contentQr7SwiftUI21_ViewModifier_ContentVyACG_tF", 0) __
}
extension SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public func shimmering(active: Swift.Bool = true, animation: SwiftUICore.Animation = Shimmer.defaultAnimation, gradient: SwiftUICore.Gradient = Shimmer.defaultGradient, bandSize: CoreFoundation.CGFloat = 0.3) -> some SwiftUICore.View
  
  @available(*, deprecated, message: "Use shimmering(active:animation:gradient:bandSize:) instead.")
  @_Concurrency.MainActor @preconcurrency public func shimmering(active: Swift.Bool = true, duration: Swift.Double, bounce: Swift.Bool = false, delay: Swift.Double = 0.25) -> some SwiftUICore.View
  
}
public protocol KingfisherImageSettable : AmityUIKit4.KingfisherCompatible {
  @_Concurrency.MainActor func setImage(_ image: AmityUIKit4.KFCrossPlatformImage?, options: AmityUIKit4.KingfisherParsedOptionsInfo)
  @_Concurrency.MainActor func getImage() -> AmityUIKit4.KFCrossPlatformImage?
}
public protocol KingfisherHasImageComponent : AmityUIKit4.KingfisherImageSettable {
  @_Concurrency.MainActor var image: AmityUIKit4.KFCrossPlatformImage? { get set }
}
extension AmityUIKit4.KingfisherHasImageComponent {
  @_Concurrency.MainActor public func setImage(_ image: AmityUIKit4.KFCrossPlatformImage?, options: AmityUIKit4.KingfisherParsedOptionsInfo)
  @_Concurrency.MainActor public func getImage() -> AmityUIKit4.KFCrossPlatformImage?
}
@available(iOS 13.0, tvOS 13.0, *)
extension UIKit.UIAction : AmityUIKit4.KingfisherHasImageComponent {
}
@available(iOS 13.0, tvOS 13.0, *)
extension UIKit.UICommand : AmityUIKit4.KingfisherHasImageComponent {
}
extension UIKit.UIBarItem : AmityUIKit4.KingfisherHasImageComponent {
}
@_Concurrency.MainActor extension AmityUIKit4.KingfisherWrapper where Base : AmityUIKit4.KingfisherImageSettable {
  @discardableResult
  @_Concurrency.MainActor public func setImage(with source: AmityUIKit4.Source?, placeholder: AmityUIKit4.KFCrossPlatformImage? = nil, options: AmityUIKit4.KingfisherOptionsInfo? = nil, progressBlock: AmityUIKit4.DownloadProgressBlock? = nil, completionHandler: (@_Concurrency.MainActor @Sendable (Swift.Result<AmityUIKit4.RetrieveImageResult, AmityUIKit4.KingfisherError>) -> Swift.Void)? = nil) -> AmityUIKit4.DownloadTask?
  @discardableResult
  @_Concurrency.MainActor public func setImage(with source: AmityUIKit4.Source?, placeholder: AmityUIKit4.KFCrossPlatformImage? = nil, options: AmityUIKit4.KingfisherOptionsInfo? = nil, completionHandler: (@_Concurrency.MainActor @Sendable (Swift.Result<AmityUIKit4.RetrieveImageResult, AmityUIKit4.KingfisherError>) -> Swift.Void)? = nil) -> AmityUIKit4.DownloadTask?
  @discardableResult
  @_Concurrency.MainActor public func setImage(with resource: (any AmityUIKit4.Resource)?, placeholder: AmityUIKit4.KFCrossPlatformImage? = nil, options: AmityUIKit4.KingfisherOptionsInfo? = nil, progressBlock: AmityUIKit4.DownloadProgressBlock? = nil, completionHandler: (@_Concurrency.MainActor @Sendable (Swift.Result<AmityUIKit4.RetrieveImageResult, AmityUIKit4.KingfisherError>) -> Swift.Void)? = nil) -> AmityUIKit4.DownloadTask?
  @discardableResult
  @_Concurrency.MainActor public func setImage(with resource: (any AmityUIKit4.Resource)?, placeholder: AmityUIKit4.KFCrossPlatformImage? = nil, options: AmityUIKit4.KingfisherOptionsInfo? = nil, completionHandler: (@_Concurrency.MainActor @Sendable (Swift.Result<AmityUIKit4.RetrieveImageResult, AmityUIKit4.KingfisherError>) -> Swift.Void)? = nil) -> AmityUIKit4.DownloadTask?
  @discardableResult
  @_Concurrency.MainActor public func setImage(with provider: (any AmityUIKit4.ImageDataProvider)?, placeholder: AmityUIKit4.KFCrossPlatformImage? = nil, options: AmityUIKit4.KingfisherOptionsInfo? = nil, progressBlock: AmityUIKit4.DownloadProgressBlock? = nil, completionHandler: (@_Concurrency.MainActor @Sendable (Swift.Result<AmityUIKit4.RetrieveImageResult, AmityUIKit4.KingfisherError>) -> Swift.Void)? = nil) -> AmityUIKit4.DownloadTask?
  @discardableResult
  @_Concurrency.MainActor public func setImage(with provider: (any AmityUIKit4.ImageDataProvider)?, placeholder: AmityUIKit4.KFCrossPlatformImage? = nil, options: AmityUIKit4.KingfisherOptionsInfo? = nil, completionHandler: (@_Concurrency.MainActor @Sendable (Swift.Result<AmityUIKit4.RetrieveImageResult, AmityUIKit4.KingfisherError>) -> Swift.Void)? = nil) -> AmityUIKit4.DownloadTask?
}
@_Concurrency.MainActor extension AmityUIKit4.KingfisherWrapper where Base : AmityUIKit4.KingfisherImageSettable {
  @_Concurrency.MainActor public var taskIdentifier: AmityUIKit4.Source.Identifier.Value? {
    get
  }
  @_Concurrency.MainActor public func cancelDownloadTask()
}
@_Concurrency.MainActor @preconcurrency public struct AmityPostTargetSelectionPage : AmityUIKit4.AmityPageView {
  @SwiftUICore.EnvironmentObject @_projectedValueProperty($host) @_Concurrency.MainActor @preconcurrency public var host: AmityUIKit4.AmitySwiftUIHostWrapper {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var $host: SwiftUICore.EnvironmentObject<AmityUIKit4.AmitySwiftUIHostWrapper>.Wrapper {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var id: AmityUIKit4.PageId {
    get
  }
  @_Concurrency.MainActor @preconcurrency public init()
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s11AmityUIKit40A23PostTargetSelectionPageV4bodyQrvp", 0) __
  public typealias ID = AmityUIKit4.PageId
}
public class VideoCacheHandler {
  public init(url: Foundation.URL) throws
  @objc deinit
}
@_Concurrency.MainActor @preconcurrency public struct AmityCommunitySettingPage : AmityUIKit4.AmityPageView {
  @SwiftUICore.EnvironmentObject @_projectedValueProperty($host) @_Concurrency.MainActor @preconcurrency public var host: AmityUIKit4.AmitySwiftUIHostWrapper {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var $host: SwiftUICore.EnvironmentObject<AmityUIKit4.AmitySwiftUIHostWrapper>.Wrapper {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var id: AmityUIKit4.PageId {
    get
  }
  @_Concurrency.MainActor @preconcurrency public init(community: AmitySDK.AmityCommunity)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s11AmityUIKit40A20CommunitySettingPageV4bodyQrvp", 0) __
  public typealias ID = AmityUIKit4.PageId
}
@_Concurrency.MainActor @preconcurrency public struct AmityCommunityHeaderComponent {
  @_Concurrency.MainActor @preconcurrency public var pageId: AmityUIKit4.PageId?
  @_Concurrency.MainActor @preconcurrency public var id: AmityUIKit4.ComponentId {
    get
  }
  @_Concurrency.MainActor @preconcurrency public init(community: AmityUIKit4.AmityCommunityModel, pageId: AmityUIKit4.PageId? = nil, viewModel: AmityUIKit4.CommunityProfileViewModel? = nil, onPendingPostsTapAction: (() -> Swift.Void)? = nil, onMemberListTapAction: (() -> Swift.Void)? = nil)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s11AmityUIKit40A24CommunityHeaderComponentV4bodyQrvp", 0) __
  public typealias ID = AmityUIKit4.ComponentId
}
@available(iOS 14.0, macOS 13.0, *)
extension PhotosUI.PHPickerResult : @unchecked Swift.Sendable {
}
@available(iOS 14.0, macOS 13.0, *)
public struct PHPickerResultImageDataProvider : AmityUIKit4.ImageDataProvider {
  public enum PHPickerResultImageDataProviderError : Swift.Error {
    case pickerProviderError(any Swift.Error)
    case invalidImage
  }
  public let pickerResult: PhotosUI.PHPickerResult
  public let contentType: UniformTypeIdentifiers.UTType
  public var cacheKey: Swift.String {
    get
  }
  public init(pickerResult: PhotosUI.PHPickerResult, contentType: UniformTypeIdentifiers.UTType = UTType.image)
  public func data(handler: @escaping @Sendable (Swift.Result<Foundation.Data, any Swift.Error>) -> Swift.Void)
}
public protocol ImageModifier : Swift.Sendable {
  func modify(_ image: AmityUIKit4.KFCrossPlatformImage) -> AmityUIKit4.KFCrossPlatformImage
}
public struct AnyImageModifier : AmityUIKit4.ImageModifier {
  public init(modify: @escaping @Sendable (AmityUIKit4.KFCrossPlatformImage) throws -> AmityUIKit4.KFCrossPlatformImage)
  public func modify(_ image: AmityUIKit4.KFCrossPlatformImage) -> AmityUIKit4.KFCrossPlatformImage
}
public struct RenderingModeImageModifier : AmityUIKit4.ImageModifier {
  public let renderingMode: UIKit.UIImage.RenderingMode
  public init(renderingMode: UIKit.UIImage.RenderingMode = .automatic)
  public func modify(_ image: AmityUIKit4.KFCrossPlatformImage) -> AmityUIKit4.KFCrossPlatformImage
}
public struct FlipsForRightToLeftLayoutDirectionImageModifier : AmityUIKit4.ImageModifier {
  public init()
  public func modify(_ image: AmityUIKit4.KFCrossPlatformImage) -> AmityUIKit4.KFCrossPlatformImage
}
public struct AlignmentRectInsetsImageModifier : AmityUIKit4.ImageModifier {
  public let alignmentInsets: UIKit.UIEdgeInsets
  public init(alignmentInsets: UIKit.UIEdgeInsets)
  public func modify(_ image: AmityUIKit4.KFCrossPlatformImage) -> AmityUIKit4.KFCrossPlatformImage
}
@_Concurrency.MainActor @preconcurrency public struct AmityLiveChatMessageComposeBar {
  @_Concurrency.MainActor @preconcurrency public var pageId: AmityUIKit4.PageId?
  @_Concurrency.MainActor @preconcurrency public var id: AmityUIKit4.ComponentId {
    get
  }
  @_Concurrency.MainActor @preconcurrency public init(viewModel: AmityUIKit4.AmityLiveChatPageViewModel, pageId: AmityUIKit4.PageId? = .liveChatPage)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s11AmityUIKit40A25LiveChatMessageComposeBarV4bodyQrvp", 0) __
  public typealias ID = AmityUIKit4.ComponentId
}
public enum URLImageKey {
  case identifier(_: Swift.String)
  case url(_: Foundation.URL)
}
extension AmityUIKit4.URLImageKey : Swift.Hashable {
  public static func == (a: AmityUIKit4.URLImageKey, b: AmityUIKit4.URLImageKey) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol Resource : Swift.Sendable {
  var cacheKey: Swift.String { get }
  var downloadURL: Foundation.URL { get }
}
extension AmityUIKit4.Resource {
  public func convertToSource(overrideCacheKey: Swift.String? = nil) -> AmityUIKit4.Source
}
@available(*, deprecated, renamed: "KF.ImageResource", message: "This type conflicts with `GeneratedAssetSymbols.ImageResource` in Swift 5.9. Renamed to avoid issues in the future.")
extension AmityUIKit4.KF {
  public struct ImageResource : AmityUIKit4.Resource {
    public init(downloadURL: Foundation.URL, cacheKey: Swift.String? = nil)
    public let cacheKey: Swift.String
    public let downloadURL: Foundation.URL
  }
}
extension Foundation.URL : AmityUIKit4.Resource {
  public var cacheKey: Swift.String {
    get
  }
  public var downloadURL: Foundation.URL {
    get
  }
}
@_Concurrency.MainActor @preconcurrency public struct AmityCommunitySearchResultComponent {
  @SwiftUICore.EnvironmentObject @_projectedValueProperty($host) @_Concurrency.MainActor @preconcurrency public var host: AmityUIKit4.AmitySwiftUIHostWrapper {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var $host: SwiftUICore.EnvironmentObject<AmityUIKit4.AmitySwiftUIHostWrapper>.Wrapper {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var pageId: AmityUIKit4.PageId?
  @_Concurrency.MainActor @preconcurrency public var id: AmityUIKit4.ComponentId {
    get
  }
  @_Concurrency.MainActor @preconcurrency public init(viewModel: AmityUIKit4.AmityGlobalSearchViewModel, pageId: AmityUIKit4.PageId? = nil)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s11AmityUIKit40A30CommunitySearchResultComponentV4bodyQrvp", 0) __
  public typealias ID = AmityUIKit4.ComponentId
}
open class AmityGlobalFeedComponentBehavior {
  @_hasMissingDesignatedInitializers open class Context {
    final public let component: AmityUIKit4.AmityGlobalFeedComponent
    final public let post: AmityUIKit4.AmityPostModel
    final public let showPollResult: Swift.Bool
    @objc deinit
  }
  public init()
  open func goToPostDetailPage(context: AmityUIKit4.AmityGlobalFeedComponentBehavior.Context)
  @objc deinit
}
@_Concurrency.MainActor @preconcurrency public struct AmityCreateStoryPage : AmityUIKit4.AmityPageView {
  @SwiftUICore.EnvironmentObject @_projectedValueProperty($host) @_Concurrency.MainActor @preconcurrency public var host: AmityUIKit4.AmitySwiftUIHostWrapper {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var $host: SwiftUICore.EnvironmentObject<AmityUIKit4.AmitySwiftUIHostWrapper>.Wrapper {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var id: AmityUIKit4.PageId {
    get
  }
  @_Concurrency.MainActor @preconcurrency public init(targetId: Swift.String, targetType: AmitySDK.AmityStoryTargetType)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s11AmityUIKit40A15CreateStoryPageV4bodyQrvp", 0) __
  public typealias ID = AmityUIKit4.PageId
}
extension AmityUIKit4.AmityMessageTextEditorView {
  @_Concurrency.MainActor @preconcurrency public func placeholder(_ value: Swift.String) -> AmityUIKit4.AmityMessageTextEditorView
  @_Concurrency.MainActor @preconcurrency public func maxExpandableHeight(_ value: CoreFoundation.CGFloat) -> AmityUIKit4.AmityMessageTextEditorView
  @_Concurrency.MainActor @preconcurrency public func autoFocus(_ value: Swift.Bool) -> AmityUIKit4.AmityMessageTextEditorView
  @_Concurrency.MainActor @preconcurrency public func characterLimit(_ value: Swift.Int) -> AmityUIKit4.AmityMessageTextEditorView
}
@_Concurrency.MainActor @preconcurrency public struct AmityMessageTextEditorView : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public init(_ viewModel: AmityUIKit4.AmityTextEditorViewModel, text: SwiftUICore.Binding<Swift.String>, mentionData: SwiftUICore.Binding<AmityUIKit4.MentionData>, mentionedUsers: SwiftUICore.Binding<[AmityUIKit4.AmityMentionUserModel]>, textViewHeight: CoreFoundation.CGFloat, textEditorMaxHeight: CoreFoundation.CGFloat = 106)
  @_Concurrency.MainActor @preconcurrency public init(_ viewModel: AmityUIKit4.AmityTextEditorViewModel, text: SwiftUICore.Binding<Swift.String>, mentionData: SwiftUICore.Binding<AmityUIKit4.MentionData>, mentionedUsers: SwiftUICore.Binding<[AmityUIKit4.AmityMentionUserModel]>, initialEditorHeight: CoreFoundation.CGFloat = 34, maxNumberOfLines: Swift.Int = 5, placeholderPadding: CoreFoundation.CGFloat = 5)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s11AmityUIKit40A21MessageTextEditorViewV4bodyQrvp", 0) __
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public enum GesturePriority {
  case high
  case simultaneous
  case normal
  public static func == (a: AmityUIKit4.GesturePriority, b: AmityUIKit4.GesturePriority) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_Concurrency.MainActor @preconcurrency public struct AmityMyCommunitiesSearchPage : AmityUIKit4.AmityPageView {
  @SwiftUICore.EnvironmentObject @_projectedValueProperty($host) @_Concurrency.MainActor @preconcurrency public var host: AmityUIKit4.AmitySwiftUIHostWrapper {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var $host: SwiftUICore.EnvironmentObject<AmityUIKit4.AmitySwiftUIHostWrapper>.Wrapper {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var id: AmityUIKit4.PageId {
    get
  }
  @_Concurrency.MainActor @preconcurrency public init()
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s11AmityUIKit40A23MyCommunitiesSearchPageV4bodyQrvp", 0) __
  public typealias ID = AmityUIKit4.PageId
}
@available(iOS 14.0, tvOS 14.0, macOS 11.0, watchOS 7.0, *)
public typealias PlainDatabaseObject = AmityUIKit4.ManagedObjectCodable
public enum PredicateOperator {
  case lessThan
  case lessThanOrEqualTo
  case greaterThan
  case greaterThanOrEqualTo
  case equalTo
  case notEqualTo
  case like
  public static func == (a: AmityUIKit4.PredicateOperator, b: AmityUIKit4.PredicateOperator) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 14.0, tvOS 14.0, macOS 11.0, watchOS 7.0, *)
final public class PlainDatabase<Object> where Object : AmityUIKit4.ManagedObjectDecodable, Object : AmityUIKit4.ManagedObjectEncodable {
  public init<T>(configuration: AmityUIKit4.Database.Configuration, modelDescription: AmityUIKit4.CoreDataModelDescription<T>) where T : CoreData.NSManagedObject
  final public func create(_ encodable: Object)
  final public func read<T>(where key: Swift.String, is operator: AmityUIKit4.PredicateOperator, value: T, stringOptions: Foundation.NSComparisonPredicate.Options = []) -> [Object]
  final public func read<T>(where key: Swift.String, is operator: AmityUIKit4.PredicateOperator, value: T, stringOptions: Foundation.NSComparisonPredicate.Options = [], completion: @escaping (_ objects: [Object]) -> Swift.Void)
  final public func update<T>(_ encodable: Object, where key: Swift.String, is operator: AmityUIKit4.PredicateOperator, value: T, stringOptions: Foundation.NSComparisonPredicate.Options = [])
  final public func delete<T>(where key: Swift.String, is operator: AmityUIKit4.PredicateOperator, value: T, stringOptions: Foundation.NSComparisonPredicate.Options = [])
  final public func sync(_ closure: (_ context: CoreData.NSManagedObjectContext) throws -> [CoreData.NSManagedObject]) -> [Object]
  final public func sync(_ closure: @escaping (_ context: CoreData.NSManagedObjectContext) throws -> Swift.Void)
  final public func async(_ closure: @escaping (_ context: CoreData.NSManagedObjectContext) throws -> Swift.Void)
  final public func predicate<T>(key: Swift.String, operator: AmityUIKit4.PredicateOperator, value: T, stringOptions: Foundation.NSComparisonPredicate.Options) -> Foundation.NSPredicate
  final public func request(with predicate: Foundation.NSPredicate? = nil) -> CoreData.NSFetchRequest<CoreData.NSManagedObject>
  @objc deinit
}
@_Concurrency.MainActor @preconcurrency public struct AmityCommunitiesByCategoryPage : AmityUIKit4.AmityPageView {
  @_Concurrency.MainActor @preconcurrency public var id: AmityUIKit4.PageId {
    get
  }
  @SwiftUICore.EnvironmentObject @_projectedValueProperty($host) @_Concurrency.MainActor @preconcurrency public var host: AmityUIKit4.AmitySwiftUIHostWrapper {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var $host: SwiftUICore.EnvironmentObject<AmityUIKit4.AmitySwiftUIHostWrapper>.Wrapper {
    get
  }
  @_Concurrency.MainActor @preconcurrency public init(categoryId: Swift.String)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s11AmityUIKit40A25CommunitiesByCategoryPageV4bodyQrvp", 0) __
  public typealias ID = AmityUIKit4.PageId
}
open class AmityUserSearchResultComponentBehavior {
  @_hasMissingDesignatedInitializers open class Context {
    final public let component: AmityUIKit4.AmityUserSearchResultComponent
    final public let user: AmitySDK.AmityUser
    @objc deinit
  }
  public init()
  open func goToUserProfilePage(context: AmityUIKit4.AmityUserSearchResultComponentBehavior.Context)
  @objc deinit
}
public struct ImageProgressive : Swift.Sendable {
  public enum UpdatingStrategy {
    case `default`
    case keepCurrent
    case replace(AmityUIKit4.KFCrossPlatformImage?)
  }
  @available(*, deprecated, renamed: "init()", message: "Getting a default `ImageProgressive` is deprecated due to its syntax semantic is not clear. Use `ImageProgressive.init` instead.")
  public static let `default`: AmityUIKit4.ImageProgressive
  public var isBlur: Swift.Bool
  public var isFastestScan: Swift.Bool
  public var scanInterval: Foundation.TimeInterval
  public let onImageUpdated: AmityUIKit4.Delegate<AmityUIKit4.KFCrossPlatformImage, AmityUIKit4.ImageProgressive.UpdatingStrategy>
  public init()
  public init(isBlur: Swift.Bool, isFastestScan: Swift.Bool, scanInterval: Foundation.TimeInterval)
}
@available(macOS 11.0, iOS 14.0, tvOS 14.0, watchOS 7.0, *)
public struct File : Swift.Identifiable {
  public var id: Swift.String
  public var dateCreated: Foundation.Date
  public var expiryInterval: Foundation.TimeInterval?
  public var originalURL: Foundation.URL
  public var fileName: Swift.String
  public var fileExtension: Swift.String?
  public init(id: Swift.String, dateCreated: Foundation.Date, expiryInterval: Foundation.TimeInterval?, originalURL: Foundation.URL, fileName: Swift.String, fileExtension: Swift.String?)
  @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
  public typealias ID = Swift.String
}
@available(macOS 11.0, iOS 14.0, tvOS 14.0, watchOS 7.0, *)
extension AmityUIKit4.File : Swift.Equatable {
  public static func == (lhs: AmityUIKit4.File, rhs: AmityUIKit4.File) -> Swift.Bool
}
@available(macOS 11.0, iOS 14.0, tvOS 14.0, watchOS 7.0, *)
extension AmityUIKit4.File : AmityUIKit4.ManagedObjectCodable {
  public init?(managedObject: CoreData.NSManagedObject)
  public func encode(to object: CoreData.NSManagedObject)
}
public struct Download {
  public var url: Foundation.URL
  public var id: Foundation.UUID
  public enum Destination : Swift.Codable, Swift.Hashable {
    case inMemory
    case onDisk(_: Swift.String)
    public init(from decoder: any Swift.Decoder) throws
    public func encode(to encoder: any Swift.Encoder) throws
    public static func == (a: AmityUIKit4.Download.Destination, b: AmityUIKit4.Download.Destination) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public var destination: AmityUIKit4.Download.Destination
  public struct DownloadPolicy : Swift.OptionSet, Swift.Codable, Swift.Hashable {
    public let rawValue: Swift.Int
    public init(rawValue: Swift.Int)
    public static let keepAlive: AmityUIKit4.Download.DownloadPolicy
    public typealias ArrayLiteralElement = AmityUIKit4.Download.DownloadPolicy
    public typealias Element = AmityUIKit4.Download.DownloadPolicy
    public typealias RawValue = Swift.Int
  }
  public var downloadPolicy: AmityUIKit4.Download.DownloadPolicy
  public struct URLRequestConfiguration : Swift.Hashable, Swift.Codable {
    public var allHTTPHeaderFields: [Swift.String : Swift.String]?
    public var cachePolicy: Foundation.URLRequest.CachePolicy
    public init(allHTTPHeaderFields: [Swift.String : Swift.String]? = nil, cachePolicy: Foundation.URLRequest.CachePolicy = .useProtocolCachePolicy)
    public static func == (a: AmityUIKit4.Download.URLRequestConfiguration, b: AmityUIKit4.Download.URLRequestConfiguration) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
  public var urlRequestConfiguration: AmityUIKit4.Download.URLRequestConfiguration
  public init(url: Foundation.URL, id: Foundation.UUID = UUID(), destination: AmityUIKit4.Download.Destination = .inMemory, downloadPolicy: AmityUIKit4.Download.DownloadPolicy = [], urlRequestConfiguration: AmityUIKit4.Download.URLRequestConfiguration = URLRequestConfiguration())
}
extension AmityUIKit4.Download : Swift.CustomStringConvertible {
}
extension AmityUIKit4.Download : Swift.Identifiable {
  public typealias ID = Foundation.UUID
}
extension AmityUIKit4.Download : Swift.Hashable {
  public static func == (a: AmityUIKit4.Download, b: AmityUIKit4.Download) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension AmityUIKit4.Download : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension Foundation.NSURLRequest.CachePolicy : Swift.Codable {
}
open class AmityLivestreamBehavior {
  public init()
  open func createRecordedPlayer(stream: AmitySDK.AmityStream, client: AmitySDK.AmityClient) -> any SwiftUICore.View
  open func createLivestreamPlayer(stream: AmitySDK.AmityStream, client: AmitySDK.AmityClient, isPlaying: Swift.Bool) -> any SwiftUICore.View
  @objc deinit
}
@available(macOS 11.0, iOS 14.0, tvOS 14.0, watchOS 7.0, *)
public struct DownloadPublisher : Combine.Publisher {
  public typealias Output = AmityUIKit4.DownloadInfo
  public typealias Failure = AmityUIKit4.DownloadError
  public let download: AmityUIKit4.Download
  public func receive<S>(subscriber: S) where S : Combine.Subscriber, S.Failure == any Swift.Error, S.Input == AmityUIKit4.DownloadInfo
}
open class AmityCommunitySettingPageBehavior {
  open class Context {
    final public let page: AmityUIKit4.AmityCommunitySettingPage
    final public let community: AmitySDK.AmityCommunity
    public init(page: AmityUIKit4.AmityCommunitySettingPage, community: AmitySDK.AmityCommunity)
    @objc deinit
  }
  public init()
  open func goToEditCommunityPage(_ context: AmityUIKit4.AmityCommunitySettingPageBehavior.Context)
  open func goToMembershipPage(_ context: AmityUIKit4.AmityCommunitySettingPageBehavior.Context)
  open func goToNotificationPage(_ context: AmityUIKit4.AmityCommunitySettingPageBehavior.Context)
  open func goToPostPermissionPage(_ context: AmityUIKit4.AmityCommunitySettingPageBehavior.Context)
  open func goToStorySettingPage(_ context: AmityUIKit4.AmityCommunitySettingPageBehavior.Context)
  @objc deinit
}
final public class URLImageInMemoryStore {
  public init()
  @objc deinit
}
extension AmityUIKit4.URLImageInMemoryStore : AmityUIKit4.URLImageInMemoryStoreType {
  final public func removeAllImages()
  final public func removeImageWithURL(_ url: Foundation.URL)
  final public func removeImageWithIdentifier(_ identifier: Swift.String)
  final public func getImage<T>(_ keys: [AmityUIKit4.URLImageKey]) -> T?
  final public func store<T>(_ image: T, info: AmityUIKit4.URLImageStoreInfo)
}
public struct MessageModel : Swift.Identifiable, Swift.CustomDebugStringConvertible {
  public let id: Swift.String
  public let displayName: Swift.String
  public let text: Swift.String
  public let isEdited: Swift.Bool
  public let type: AmitySDK.AmityMessageType
  public let parentId: Swift.String?
  public let hasReaction: Swift.Bool
  public let avatarURL: Foundation.URL?
  public let createdAt: Foundation.Date
  public let userId: Swift.String
  public let isDeleted: Swift.Bool
  public let metadata: [Swift.String : Any]?
  public let mentionees: [AmitySDK.AmityMentionees]
  public let reactions: [Swift.String : Swift.Int]?
  public let myReactions: [Swift.String]
  public let syncState: AmitySDK.AmitySyncState
  public let hasModeratorPermissionInChannel: Swift.Bool
  public let flagCount: Swift.Int
  public var isFlaggedByMe: Swift.Bool?
  public var reactionCount: Swift.Int
  public init(message: AmitySDK.AmityMessage, hasModeratorPermission: Swift.Bool = false)
  public var isOwner: Swift.Bool {
    get
  }
  public var debugDescription: Swift.String {
    get
  }
  public typealias ID = Swift.String
}
@available(iOS 14.0, tvOS 14.0, macOS 11.0, watchOS 7.0, *)
public struct CoreDataAttributeDescription {
  public static func attribute(name: Swift.String, type: CoreData.NSAttributeType, isOptional: Swift.Bool = false) -> AmityUIKit4.CoreDataAttributeDescription
  public var name: Swift.String
  public var attributeType: CoreData.NSAttributeType
  public var isOptional: Swift.Bool
}
public enum AmityStoryMediaType {
  case image(Foundation.URL)
  case video(Foundation.URL)
}
@_Concurrency.MainActor @preconcurrency public struct AmityDraftStoryPage : AmityUIKit4.AmityPageView {
  @SwiftUICore.EnvironmentObject @_projectedValueProperty($host) @_Concurrency.MainActor @preconcurrency public var host: AmityUIKit4.AmitySwiftUIHostWrapper {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var $host: SwiftUICore.EnvironmentObject<AmityUIKit4.AmitySwiftUIHostWrapper>.Wrapper {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var id: AmityUIKit4.PageId {
    get
  }
  @_Concurrency.MainActor @preconcurrency public init(targetId: Swift.String, targetType: AmitySDK.AmityStoryTargetType, mediaType: AmityUIKit4.AmityStoryMediaType)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s11AmityUIKit40A14DraftStoryPageV4bodyQrvp", 0) __
  public typealias ID = AmityUIKit4.PageId
}
public typealias IndicatorView = UIKit.UIView
public enum IndicatorType {
  case none
  case activity
  case image(imageData: Foundation.Data)
  case custom(indicator: any AmityUIKit4.Indicator)
}
@_Concurrency.MainActor public protocol Indicator : Swift.Sendable {
  @_Concurrency.MainActor func startAnimatingView()
  @_Concurrency.MainActor func stopAnimatingView()
  @_Concurrency.MainActor var centerOffset: CoreFoundation.CGPoint { get }
  @_Concurrency.MainActor var view: AmityUIKit4.IndicatorView { get }
  @_Concurrency.MainActor func sizeStrategy(in imageView: AmityUIKit4.KFCrossPlatformImageView) -> AmityUIKit4.IndicatorSizeStrategy
}
public enum IndicatorSizeStrategy {
  case intrinsicSize
  case full
  case size(CoreFoundation.CGSize)
}
extension AmityUIKit4.Indicator {
  @_Concurrency.MainActor public var centerOffset: CoreFoundation.CGPoint {
    get
  }
  @_Concurrency.MainActor public func sizeStrategy(in imageView: AmityUIKit4.KFCrossPlatformImageView) -> AmityUIKit4.IndicatorSizeStrategy
}
@available(macOS 11.0, iOS 14.0, tvOS 14.0, watchOS 7.0, *)
extension AmityUIKit4.TransientImage {
  public var image: SwiftUICore.Image {
    get
  }
}
open class AmityCommunityMembershipPageBehavior {
  open class Context {
    final public let page: AmityUIKit4.AmityCommunityMembershipPage
    public var addUserPageCompletion: (([AmityUIKit4.AmityUserModel]) -> Swift.Void)?
    public init(page: AmityUIKit4.AmityCommunityMembershipPage, addUserPageCompletion: (([AmityUIKit4.AmityUserModel]) -> Swift.Void)? = nil)
    @objc deinit
  }
  public init()
  open func goToAddMemberPage(_ context: AmityUIKit4.AmityCommunityMembershipPageBehavior.Context)
  open func goToUserProfilePage(_ context: AmityUIKit4.AmityCommunityMembershipPageBehavior.Context)
  @objc deinit
}
open class AmityStoryTabComponentBehaviour {
  @_hasMissingDesignatedInitializers open class Context {
    final public let component: AmityUIKit4.AmityStoryTabComponent
    final public let storyFeedType: AmityUIKit4.AmityStoryTabComponentType
    final public let targetId: Swift.String
    final public let targetType: AmitySDK.AmityStoryTargetType
    @objc deinit
  }
  public init()
  open func goToCreateStoryPage(context: AmityUIKit4.AmityStoryTabComponentBehaviour.Context)
  open func goToViewStoryPage(context: AmityUIKit4.AmityStoryTabComponentBehaviour.Context)
  @objc deinit
}
open class AmityCommunitySearchResultComponentBehavior {
  @_hasMissingDesignatedInitializers open class Context {
    final public let component: AmityUIKit4.AmityCommunitySearchResultComponent
    @objc deinit
  }
  public init()
  open func goToCommunityProfilePage(context: AmityUIKit4.AmityCommunitySearchResultComponentBehavior.Context)
  @objc deinit
}
public enum ImageTransition : Swift.Sendable {
  case none
  case fade(Foundation.TimeInterval)
  case flipFromLeft(Foundation.TimeInterval)
  case flipFromRight(Foundation.TimeInterval)
  case flipFromTop(Foundation.TimeInterval)
  case flipFromBottom(Foundation.TimeInterval)
  case custom(duration: Foundation.TimeInterval, options: UIKit.UIView.AnimationOptions, animations: (@Sendable (UIKit.UIImageView, UIKit.UIImage) -> Swift.Void)?, completion: (@Sendable (Swift.Bool) -> Swift.Void)?)
}
@propertyWrapper final public class Synchronized<Value> {
  final public var wrappedValue: Value {
    get
    set
  }
  public init(wrappedValue: Value)
  @objc deinit
}
public enum AmityCommunitySetupPageMode : Swift.Equatable {
  public static func == (lhs: AmityUIKit4.AmityCommunitySetupPageMode, rhs: AmityUIKit4.AmityCommunitySetupPageMode) -> Swift.Bool
  case create
  case edit(AmitySDK.AmityCommunity)
}
@_Concurrency.MainActor @preconcurrency public struct AmityCommunitySetupPage : AmityUIKit4.AmityPageView {
  @SwiftUICore.EnvironmentObject @_projectedValueProperty($host) @_Concurrency.MainActor @preconcurrency public var host: AmityUIKit4.AmitySwiftUIHostWrapper {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var $host: SwiftUICore.EnvironmentObject<AmityUIKit4.AmitySwiftUIHostWrapper>.Wrapper {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var id: AmityUIKit4.PageId {
    get
  }
  @_Concurrency.MainActor @preconcurrency public init(mode: AmityUIKit4.AmityCommunitySetupPageMode)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s11AmityUIKit40A18CommunitySetupPageV4bodyQrvp", 0) __
  public typealias ID = AmityUIKit4.PageId
}
@available(*, deprecated, renamed: "AuthenticationChallengeResponsible", message: "Typo. Use `AuthenticationChallengeResponsible` instead")
public typealias AuthenticationChallengeResponsable = AmityUIKit4.AuthenticationChallengeResponsible
public protocol AuthenticationChallengeResponsible : AnyObject {
  func downloader(_ downloader: AmityUIKit4.ImageDownloader, didReceive challenge: Foundation.URLAuthenticationChallenge) async -> (Foundation.URLSession.AuthChallengeDisposition, Foundation.URLCredential?)
  func downloader(_ downloader: AmityUIKit4.ImageDownloader, task: Foundation.URLSessionTask, didReceive challenge: Foundation.URLAuthenticationChallenge) async -> (Foundation.URLSession.AuthChallengeDisposition, Foundation.URLCredential?)
}
extension AmityUIKit4.AuthenticationChallengeResponsible {
  public func downloader(_ downloader: AmityUIKit4.ImageDownloader, didReceive challenge: Foundation.URLAuthenticationChallenge) async -> (Foundation.URLSession.AuthChallengeDisposition, Foundation.URLCredential?)
  public func downloader(_ downloader: AmityUIKit4.ImageDownloader, task: Foundation.URLSessionTask, didReceive challenge: Foundation.URLAuthenticationChallenge) async -> (Foundation.URLSession.AuthChallengeDisposition, Foundation.URLCredential?)
}
@available(macOS 11.0, iOS 14.0, tvOS 14.0, watchOS 7.0, *)
public enum RemoteImageLoadingState {
  case initial
  case inProgress(_: Swift.Float?)
  case success(_: AmityUIKit4.TransientImage)
  case failure(_: any Swift.Error)
}
@available(macOS 11.0, iOS 14.0, tvOS 14.0, watchOS 7.0, *)
extension AmityUIKit4.RemoteImageLoadingState {
  public var isInProgress: Swift.Bool {
    get
  }
  public var isSuccess: Swift.Bool {
    get
  }
  public var isComplete: Swift.Bool {
    get
  }
}
@_Concurrency.MainActor @preconcurrency public struct AmityLiveChatPage : AmityUIKit4.AmityPageView {
  @_Concurrency.MainActor @preconcurrency public var id: AmityUIKit4.PageId {
    get
  }
  @_Concurrency.MainActor @preconcurrency public init(channelId: Swift.String)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s11AmityUIKit40A12LiveChatPageV4bodyQrvp", 0) __
  public typealias ID = AmityUIKit4.PageId
}
public enum PageId : Swift.String {
  case storyCreationPage
  case storyPage
  case cameraPage
  case storyTargetSelectionPage
  case liveChatPage
  case socialHomePage
  case postDetailPage
  case socialGlobalSearchPage
  case postComposerPage
  case postTargetSelectionPage
  case myCommunitiesSearchPage
  case pollTargetSelectionPage
  case liveStreamTargetSelectionPage
  case liveStreamTerminatedPage
  case communityProfilePage
  case communitySetupPage
  case communityAddCategoryPage
  case communityAddUserPage
  case communitySettingPage
  case communityMembershipPage
  case communityNotificationSettingPage
  case communityPostPermissionPage
  case communityStorySettingPage
  case communityPostsNotificationSettingPage
  case communityCommentsNotificationSettingPage
  case communityStoriesNotificationSettingPage
  case communityPendingPostPage
  case livestreamPlayerPage
  case createLivestreamPage
  case userProfilePage
  case editUserProfilePage
  case userRelationshipPage
  case blockedUsersPage
  case pendingFollowRequestPage
  case communitiesByCategoryPage
  case allCategories
  case pollPostPage
  case notificationTrayPage
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum ComponentId : Swift.String {
  case storyTabComponent
  case hyperLinkConfigComponent
  case commentTrayComponent
  case messageComposer
  case messageList
  case liveChatHeader
  case reactionList
  case socialHomePageTopNavigationComponent
  case emptyNewsFeedComponent
  case newsFeedComponent
  case postContentComponent
  case globalFeedComponent
  case myCommunitiesComponent
  case topSearchBarComponent
  case communitySearchResultComponent
  case userSearchResultComponent
  case createPostMenu
  case communityHeader
  case communityProfileTab
  case communityFeed
  case communityPin
  case mediaAttachment
  case detailedMediaAttachment
  case communityImageFeed
  case pendingPostContentComponent
  case recommendedCommunities
  case trendingCommunities
  case communityCategories
  case userProfileHeader
  case userFeed
  case userImageFeed
  case userVideoFeed
  case altTextConfig
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum ElementId : Swift.String {
  case storyRingElement
  case createNewStoryButtonElement
  case progressBarElement
  case closeButtonElement
  case overflowMenuElement
  case impressionIconElement
  case storyCommentButtonElement
  case storyReactionButtonElement
  case muteUnmuteButtonElement
  case backButtonElement
  case aspectRatioButtonElement
  case shareStoryButtonElement
  case hyperLinkButtonElement
  case hyperLinkElement
  case doneButtonElement
  case cancelButtonElement
  case sendButton
  case textField
  case theme
  case senderMessageBubble
  case receiverMessageBubble
  case memberCount
  case connectivity
  case avatar
  case messageReactionPicker
  case messageQuickReaction
  case headerLabel
  case globalSearchButton
  case notificationTrayButton
  case postCreationButton
  case newsFeedButton
  case exploreButton
  case myCommunitiesButton
  case illustration
  case title
  case description
  case exploreCommunittiesButton
  case createCommunityButton
  case communityAvatar
  case communityDisplayName
  case communityPrivateBadge
  case communityOfficialBadge
  case communityCategoryName
  case communityMembersCount
  case menuButton
  case moderatorBadge
  case timestamp
  case postContent
  case reactionButton
  case commentButton
  case donateButton
  case shareButton
  case nonMemberSection
  case announcementBadge
  case pinBadge
  case searchIcon
  case clearButton
  case communityName
  case communityCover
  case communityVerifyBadge
  case communityCategory
  case communityDescription
  case communityInfo
  case communityJoinButton
  case communityPendingPost
  case communityFeedTabButton
  case communityPinTabButton
  case createPostButton
  case createStoryButton
  case createPollButton
  case createLivestreamButton
  case myTimelineAvatar
  case myTimelineText
  case createNewPostButton
  case editPostButton
  case editPostTitle
  case cameraButton
  case imageButton
  case videoButton
  case fileButton
  case communityEditTitle
  case communityNameTitle
  case communityAboutTitle
  case communityCategoryTitle
  case communityPrivacyTitle
  case communityPrivacyPrivateIcon
  case communityPrivacyPrivateTitle
  case communityPrivacyPrivateDescription
  case communityPrivacyPublicIcon
  case communityPrivacyPublicTitle
  case communityPrivacyPublicDescription
  case communityAddMemberTitle
  case communityAddMemberButton
  case communityCreateButton
  case communityEditButton
  case postAcceptButton
  case postDeclineButton
  case editProfile
  case members
  case notifications
  case postPermission
  case storySetting
  case leaveCommunity
  case closeCommunity
  case closeCommunityDescription
  case userFeedTabButton
  case userImageFeedTabButton
  case userVideoFeedTabButton
  case followUserButton
  case followingUserButton
  case pendingUserButton
  case unblockUserButton
  case userAvatar
  case userName
  case userDescription
  case userFollowing
  case userFollower
  case emptyUserFeed
  case privateUserFeed
  case privateUserFeedInfo
  case blockedUserFeed
  case blockedUserFeedInfo
  case emptyUserImageFeed
  case privateUserImageFeed
  case privateUserImageFeedInfo
  case blockedUserImageFeed
  case blockedUserImageFeedInfo
  case emptyUserVideoFeed
  case privateUserVideoFeed
  case privateUserVideoFeedInfo
  case blockedUserVideoFeed
  case blockedUserVideoFeedInfo
  case userDisplayNameTitle
  case userAboutTitle
  case updateUserProfileButton
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@available(macOS 11.0, iOS 14.0, tvOS 14.0, watchOS 7.0, *)
extension AmityUIKit4.TransientImage {
  public init?(data: Foundation.Data, maxPixelSize: CoreFoundation.CGSize?)
  public init?(location: Foundation.URL, maxPixelSize: CoreFoundation.CGSize?)
  public init?(decoder: AmityUIKit4.ImageDecoder, maxPixelSize: CoreFoundation.CGSize?)
}
@_Concurrency.MainActor @preconcurrency public struct AmityLivestreamPostTargetSelectionPage : AmityUIKit4.AmityPageView {
  @SwiftUICore.EnvironmentObject @_projectedValueProperty($host) @_Concurrency.MainActor @preconcurrency public var host: AmityUIKit4.AmitySwiftUIHostWrapper {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var $host: SwiftUICore.EnvironmentObject<AmityUIKit4.AmitySwiftUIHostWrapper>.Wrapper {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var id: AmityUIKit4.PageId {
    get
  }
  @_Concurrency.MainActor @preconcurrency public init()
  @_Concurrency.MainActor @preconcurrency public init(context: AmityUIKit4.AmityLivestreamPostTargetSelectionPage.Context)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s11AmityUIKit40A33LivestreamPostTargetSelectionPageV4bodyQrvp", 0) __
  public typealias ID = AmityUIKit4.PageId
}

extension AmityUIKit4.AmityLivestreamPostTargetSelectionPage {
  public class Context {
    public init(onSelection: ((AmityUIKit4.AmityCommunityModel?) -> Swift.Void)?, isOpenedFromLiveStreamPage: Swift.Bool)
    @objc deinit
  }
}
public struct AmityCommentModel : Swift.Identifiable, Swift.Equatable {
  public static func == (lhs: AmityUIKit4.AmityCommentModel, rhs: AmityUIKit4.AmityCommentModel) -> Swift.Bool
  public var id: Swift.String {
    get
  }
  public typealias ID = Swift.String
}
public struct ImageCreatingOptions {
  public var scale: CoreFoundation.CGFloat
  public var duration: Foundation.TimeInterval
  public var preloadAll: Swift.Bool
  public var onlyFirstFrame: Swift.Bool
  public init(scale: CoreFoundation.CGFloat = 1.0, duration: Foundation.TimeInterval = 0.0, preloadAll: Swift.Bool = false, onlyFirstFrame: Swift.Bool = false)
}
@_hasMissingDesignatedInitializers public class GIFAnimatedImage {
  public static func getFrameDuration(from gifInfo: [Swift.String : Any]?) -> Foundation.TimeInterval
  public static func getFrameDuration(from imageSource: ImageIO.CGImageSource, at index: Swift.Int) -> Foundation.TimeInterval
  @objc deinit
}
public protocol ImageFrameSource {
  var data: Foundation.Data? { get }
  var frameCount: Swift.Int { get }
  func frame(at index: Swift.Int, maxSize: CoreFoundation.CGSize?) -> CoreGraphics.CGImage?
  func duration(at index: Swift.Int) -> Foundation.TimeInterval
}
extension AmityUIKit4.ImageFrameSource {
  public func frame(at index: Swift.Int) -> CoreGraphics.CGImage?
}
@_hasMissingDesignatedInitializers @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public class Page : Combine.ObservableObject {
  public var objectWillChange: Combine.PassthroughSubject<Swift.Void, Swift.Never>
  public var index: Swift.Int {
    get
    set
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias ObjectWillChangePublisher = Combine.PassthroughSubject<Swift.Void, Swift.Never>
  @objc deinit
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension AmityUIKit4.Page {
  public enum Update {
    case next
    case previous
    case moveToFirst
    case move(increment: Swift.Int)
    case moveToLast
    case new(index: Swift.Int)
  }
  public static func withIndex(_ index: Swift.Int) -> AmityUIKit4.Page
  public static func first() -> AmityUIKit4.Page
  public func update(_ update: AmityUIKit4.Page.Update)
}
extension Foundation.NSNotification.Name {
  public static let VideoDownloadProgressDidChanged: Foundation.Notification.Name
  public static let VideoDownloadDidFinished: Foundation.Notification.Name
}
open class AmityStoryTargetSelectionPageBehaviour {
  @_hasMissingDesignatedInitializers open class Context {
    final public let page: AmityUIKit4.AmityStoryTargetSelectionPage
    final public let community: AmitySDK.AmityCommunity
    final public let targetType: AmitySDK.AmityStoryTargetType
    @objc deinit
  }
  public init()
  open func goToCreateStoryPage(context: AmityUIKit4.AmityStoryTargetSelectionPageBehaviour.Context)
  @objc deinit
}
public class AmityUserProfilePageViewModel : Combine.ObservableObject {
  public init(_ userId: Swift.String)
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public enum ContentLoadingPolicy : Swift.Equatable {
  case lazy(recyclingRatio: Swift.UInt)
  case eager
  public static func == (a: AmityUIKit4.ContentLoadingPolicy, b: AmityUIKit4.ContentLoadingPolicy) -> Swift.Bool
}
public class AmityLiveChatPageViewModel : Combine.ObservableObject {
  public init(channelId: Swift.String)
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public typealias DraggingAnimation = AmityUIKit4.PagingAnimation
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public enum PagingAnimation : Swift.Equatable {
  case steep(duration: Foundation.TimeInterval)
  case standard(duration: Foundation.TimeInterval)
  case interactive
  case custom(animation: SwiftUICore.Animation?)
  public static var standard: AmityUIKit4.PagingAnimation
  public static var steep: AmityUIKit4.PagingAnimation
  public static var none: AmityUIKit4.PagingAnimation
  public static func == (a: AmityUIKit4.PagingAnimation, b: AmityUIKit4.PagingAnimation) -> Swift.Bool
}
open class AmitySocialGlobalSearchPageBehavior {
  @_hasMissingDesignatedInitializers open class Context {
    final public let page: AmityUIKit4.AmitySocialGlobalSearchPage
    @objc deinit
  }
  public init()
  @objc deinit
}
public protocol AmityViewIdentifiable : Swift.Identifiable {
}
extension AmityUIKit4.AmityViewIdentifiable {
  public var id: Swift.String {
    get
  }
  public func getConfig<T>(pageId: AmityUIKit4.PageId? = nil, componentId: AmityUIKit4.ComponentId? = nil, elementId: AmityUIKit4.ElementId, key: Swift.String, of type: T.Type) -> T?
}
public protocol AmityPageIdentifiable : AmityUIKit4.AmityViewIdentifiable {
  associatedtype ID = AmityUIKit4.PageId
}
extension AmityUIKit4.AmityPageIdentifiable {
  public var configId: Swift.String {
    get
  }
  public func getElementConfig<T>(elementId: AmityUIKit4.ElementId, key: Swift.String, of type: T.Type) -> T?
}
public protocol AmityComponentIdentifiable : AmityUIKit4.AmityViewIdentifiable {
  associatedtype ID = AmityUIKit4.ComponentId
  var pageId: AmityUIKit4.PageId? { get set }
}
extension AmityUIKit4.AmityComponentIdentifiable {
  public var configId: Swift.String {
    get
  }
  public func getElementConfig<T>(elementId: AmityUIKit4.ElementId, key: Swift.String, of type: T.Type) -> T?
}
public protocol AmityElementIdentifiable : AmityUIKit4.AmityViewIdentifiable {
  associatedtype ID = AmityUIKit4.ElementId
  var pageId: AmityUIKit4.PageId? { get set }
  var componentId: AmityUIKit4.ComponentId? { get set }
}
extension AmityUIKit4.AmityElementIdentifiable {
  public var configId: Swift.String {
    get
  }
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension AmityUIKit4.Pager {
  public typealias DragResult = (page: Swift.Int, newPage: Swift.Int, translation: CoreFoundation.CGFloat, velocity: Swift.Double)
  @available(*, deprecated, message: "This method will no longer be mantained in future versions. Please use `draggingAnimation(_:)` instead")
  @_Concurrency.MainActor @preconcurrency public func pagingAnimation(_ value: ((AmityUIKit4.Pager<Element, ID, PageView>.DragResult) -> AmityUIKit4.PagingAnimation)?) -> AmityUIKit4.Pager<Element, ID, PageView>
  @_Concurrency.MainActor @preconcurrency public func multiplePagination() -> AmityUIKit4.Pager<Element, ID, PageView>
  @_Concurrency.MainActor @preconcurrency public func singlePagination(ratio: CoreFoundation.CGFloat = 1, sensitivity: AmityUIKit4.PaginationSensitivity = .medium) -> AmityUIKit4.Pager<Element, ID, PageView>
  @_Concurrency.MainActor @preconcurrency public func contentLoadingPolicy(_ value: AmityUIKit4.ContentLoadingPolicy) -> AmityUIKit4.Pager<Element, ID, PageView>
  @_Concurrency.MainActor @preconcurrency public func loopPages(_ value: Swift.Bool = true, repeating count: Swift.UInt = 1) -> AmityUIKit4.Pager<Element, ID, PageView>
  @_Concurrency.MainActor @preconcurrency public func dragForwardOnly(_ value: Swift.Bool = true) -> AmityUIKit4.Pager<Element, ID, PageView>
  @_Concurrency.MainActor @preconcurrency public func draggingAnimation(onChange anim1: AmityUIKit4.DraggingAnimation, onEnded anim2: AmityUIKit4.DraggingAnimation) -> AmityUIKit4.Pager<Element, ID, PageView>
  @_Concurrency.MainActor @preconcurrency public func sensitivity(_ value: AmityUIKit4.PaginationSensitivity) -> AmityUIKit4.Pager<Element, ID, PageView>
  @_Concurrency.MainActor @preconcurrency public func delaysTouches(_ value: Swift.Bool) -> AmityUIKit4.Pager<Element, ID, PageView>
  @_Concurrency.MainActor @preconcurrency public func disableDragging() -> AmityUIKit4.Pager<Element, ID, PageView>
  @_Concurrency.MainActor @preconcurrency public func allowsDragging(_ value: Swift.Bool = true) -> AmityUIKit4.Pager<Element, ID, PageView>
  @_Concurrency.MainActor @preconcurrency public func pagingPriority(_ value: AmityUIKit4.GesturePriority) -> AmityUIKit4.Pager<Element, ID, PageView>
  @_Concurrency.MainActor @preconcurrency public func swipeInteractionArea(_ value: AmityUIKit4.SwipeInteractionArea) -> AmityUIKit4.Pager<Element, ID, PageView>
  @_Concurrency.MainActor @preconcurrency public func bounces(_ value: Swift.Bool) -> AmityUIKit4.Pager<Element, ID, PageView>
  @_Concurrency.MainActor @preconcurrency public func onDraggingBegan(_ callback: (() -> Swift.Void)?) -> AmityUIKit4.Pager<Element, ID, PageView>
  @_Concurrency.MainActor @preconcurrency public func onDraggingChanged(_ callback: ((Swift.Double) -> Swift.Void)?) -> AmityUIKit4.Pager<Element, ID, PageView>
  @_Concurrency.MainActor @preconcurrency public func onDraggingEnded(_ callback: (() -> Swift.Void)?) -> AmityUIKit4.Pager<Element, ID, PageView>
  @available(watchOS 7.0, *)
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @_Concurrency.MainActor @preconcurrency public func onDigitalCrownRotated(_ callback: ((Swift.Double) -> Swift.Void)?) -> AmityUIKit4.Pager<Element, ID, PageView>
  @available(watchOS 7.0, *)
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @_Concurrency.MainActor @preconcurrency public func disableDigitalCrownRotation() -> AmityUIKit4.Pager<Element, ID, PageView>
  @available(watchOS 7.0, *)
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @_Concurrency.MainActor @preconcurrency public func allowsDigitalCrownRotation(_ value: Swift.Bool = true) -> AmityUIKit4.Pager<Element, ID, PageView>
  @_Concurrency.MainActor @preconcurrency public func draggingAnimation(_ value: AmityUIKit4.DraggingAnimation) -> AmityUIKit4.Pager<Element, ID, PageView>
  @_Concurrency.MainActor @preconcurrency public func alignment(_ value: AmityUIKit4.PositionAlignment) -> AmityUIKit4.Pager<Element, ID, PageView>
  @_Concurrency.MainActor @preconcurrency public func horizontal(_ swipeDirection: AmityUIKit4.HorizontalSwipeDirection = .startToEnd) -> AmityUIKit4.Pager<Element, ID, PageView>
  @_Concurrency.MainActor @preconcurrency public func vertical(_ swipeDirection: AmityUIKit4.VerticalSwipeDirection = .topToBottom) -> AmityUIKit4.Pager<Element, ID, PageView>
  @available(*, deprecated, renamed: "interactive(scale:)")
  @_Concurrency.MainActor @preconcurrency public func interactive(_ scale: CoreFoundation.CGFloat) -> AmityUIKit4.Pager<Element, ID, PageView>
  @_Concurrency.MainActor @preconcurrency public func interactive(scale ratio: CoreFoundation.CGFloat) -> AmityUIKit4.Pager<Element, ID, PageView>
  @_Concurrency.MainActor @preconcurrency public func interactive(opacity decrement: Swift.Double) -> AmityUIKit4.Pager<Element, ID, PageView>
  @_Concurrency.MainActor @preconcurrency public func interactive(rotation shouldRotate: Swift.Bool) -> AmityUIKit4.Pager<Element, ID, PageView>
  @available(*, deprecated, renamed: "interactive(rotation:)")
  @_Concurrency.MainActor @preconcurrency public func rotation3D(_ value: Swift.Bool = true) -> AmityUIKit4.Pager<Element, ID, PageView>
  @_Concurrency.MainActor @preconcurrency public func pageOffset(_ value: Swift.Double) -> AmityUIKit4.Pager<Element, ID, PageView>
  @_Concurrency.MainActor @preconcurrency public func itemSpacing(_ value: CoreFoundation.CGFloat) -> AmityUIKit4.Pager<Element, ID, PageView>
  @_Concurrency.MainActor @preconcurrency public func itemAspectRatio(_ value: CoreFoundation.CGFloat?, alignment: AmityUIKit4.PositionAlignment = .center) -> AmityUIKit4.Pager<Element, ID, PageView>
  @_Concurrency.MainActor @preconcurrency public func preferredItemSize(_ value: CoreFoundation.CGSize, alignment: AmityUIKit4.PositionAlignment = .center) -> AmityUIKit4.Pager<Element, ID, PageView>
  @_Concurrency.MainActor @preconcurrency public func expandPageToEdges() -> AmityUIKit4.Pager<Element, ID, PageView>
  @_Concurrency.MainActor @preconcurrency public func onPageChanged(_ callback: ((Swift.Int) -> Swift.Void)?) -> AmityUIKit4.Pager<Element, ID, PageView>
  @_Concurrency.MainActor @preconcurrency public func onPageWillTransition(_ callback: ((Swift.Result<AmityUIKit4.PageTransition, AmityUIKit4.PageTransitionError>) -> Swift.Void)?) -> AmityUIKit4.Pager<Element, ID, PageView>
  @_Concurrency.MainActor @preconcurrency public func onPageWillChange(_ callback: ((Swift.Int) -> Swift.Void)?) -> AmityUIKit4.Pager<Element, ID, PageView>
  @_Concurrency.MainActor @preconcurrency public func padding(_ length: CoreFoundation.CGFloat) -> AmityUIKit4.Pager<Element, ID, PageView>
  @_Concurrency.MainActor @preconcurrency public func padding(_ insets: SwiftUICore.EdgeInsets) -> AmityUIKit4.Pager<Element, ID, PageView>
  @_Concurrency.MainActor @preconcurrency public func padding(_ edges: SwiftUICore.Edge.Set = .all, _ length: CoreFoundation.CGFloat? = nil) -> AmityUIKit4.Pager<Element, ID, PageView>
}
public enum ToastStyle {
  case success
  case warning
  case loading
  public static func == (a: AmityUIKit4.ToastStyle, b: AmityUIKit4.ToastStyle) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_Concurrency.MainActor @preconcurrency public struct ToastView : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public init(message: Swift.String, style: AmityUIKit4.ToastStyle)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s11AmityUIKit49ToastViewV4bodyQrvp", 0) __
}
extension SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public func showToast(isPresented: SwiftUICore.Binding<Swift.Bool>, style: AmityUIKit4.ToastStyle, message: Swift.String, bottomPadding: CoreFoundation.CGFloat = 60) -> some SwiftUICore.View
  
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class Toast : UIKit.UIViewController {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency public static func showToast(style: AmityUIKit4.ToastStyle, message: Swift.String, bottomPadding: CoreFoundation.CGFloat = 30, autoHide: Swift.Bool = true)
  @_Concurrency.MainActor @preconcurrency public static func hideToastIfPresented()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension Foundation.NSNotification.Name {
  public static let KingfisherDidCleanDiskCache: Foundation.Notification.Name
}
public let KingfisherDiskCacheCleanedHashKey: Swift.String
public enum CacheType : Swift.Sendable {
  case none
  case memory
  case disk
  public var cached: Swift.Bool {
    get
  }
  public static func == (a: AmityUIKit4.CacheType, b: AmityUIKit4.CacheType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct CacheStoreResult : Swift.Sendable {
  public let memoryCacheResult: Swift.Result<(), Swift.Never>
  public let diskCacheResult: Swift.Result<(), AmityUIKit4.KingfisherError>
}
extension UIKit.UIImage : AmityUIKit4.CacheCostCalculable {
  public var cacheCost: Swift.Int {
    get
  }
}
extension Foundation.Data : AmityUIKit4.DataTransformable {
  public func toData() throws -> Foundation.Data
  public static func fromData(_ data: Foundation.Data) throws -> Foundation.Data
  public static let empty: Foundation.Data
}
public enum ImageCacheResult : Swift.Sendable {
  case disk(AmityUIKit4.KFCrossPlatformImage)
  case memory(AmityUIKit4.KFCrossPlatformImage)
  case none
  public var image: AmityUIKit4.KFCrossPlatformImage? {
    get
  }
  public var cacheType: AmityUIKit4.CacheType {
    get
  }
}
open class ImageCache : @unchecked Swift.Sendable {
  public static let `default`: AmityUIKit4.ImageCache
  final public let memoryStorage: AmityUIKit4.MemoryStorage.Backend<AmityUIKit4.KFCrossPlatformImage>
  final public let diskStorage: AmityUIKit4.DiskStorage.Backend<Foundation.Data>
  public typealias DiskCachePathClosure = @Sendable (Foundation.URL, Swift.String) -> Foundation.URL
  public init(memoryStorage: AmityUIKit4.MemoryStorage.Backend<AmityUIKit4.KFCrossPlatformImage>, diskStorage: AmityUIKit4.DiskStorage.Backend<Foundation.Data>)
  convenience public init(name: Swift.String)
  convenience public init(name: Swift.String, cacheDirectoryURL: Foundation.URL?, diskCachePathClosure: AmityUIKit4.ImageCache.DiskCachePathClosure? = nil) throws
  @objc deinit
  open func store(_ image: AmityUIKit4.KFCrossPlatformImage, original: Foundation.Data? = nil, forKey key: Swift.String, options: AmityUIKit4.KingfisherParsedOptionsInfo, toDisk: Swift.Bool = true, completionHandler: (@Sendable (AmityUIKit4.CacheStoreResult) -> Swift.Void)? = nil)
  open func store(_ image: AmityUIKit4.KFCrossPlatformImage, original: Foundation.Data? = nil, forKey key: Swift.String, processorIdentifier identifier: Swift.String = "", cacheSerializer serializer: any AmityUIKit4.CacheSerializer = DefaultCacheSerializer.default, toDisk: Swift.Bool = true, callbackQueue: AmityUIKit4.CallbackQueue = .untouch, completionHandler: (@Sendable (AmityUIKit4.CacheStoreResult) -> Swift.Void)? = nil)
  open func storeToDisk(_ data: Foundation.Data, forKey key: Swift.String, processorIdentifier identifier: Swift.String = "", expiration: AmityUIKit4.StorageExpiration? = nil, callbackQueue: AmityUIKit4.CallbackQueue = .untouch, completionHandler: (@Sendable (AmityUIKit4.CacheStoreResult) -> Swift.Void)? = nil)
  open func removeImage(forKey key: Swift.String, processorIdentifier identifier: Swift.String = "", fromMemory: Swift.Bool = true, fromDisk: Swift.Bool = true, callbackQueue: AmityUIKit4.CallbackQueue = .untouch, completionHandler: (@Sendable () -> Swift.Void)? = nil)
  open func retrieveImage(forKey key: Swift.String, options: AmityUIKit4.KingfisherParsedOptionsInfo, callbackQueue: AmityUIKit4.CallbackQueue = .mainCurrentOrAsync, completionHandler: (@Sendable (Swift.Result<AmityUIKit4.ImageCacheResult, AmityUIKit4.KingfisherError>) -> Swift.Void)?)
  open func retrieveImage(forKey key: Swift.String, options: AmityUIKit4.KingfisherOptionsInfo? = nil, callbackQueue: AmityUIKit4.CallbackQueue = .mainCurrentOrAsync, completionHandler: (@Sendable (Swift.Result<AmityUIKit4.ImageCacheResult, AmityUIKit4.KingfisherError>) -> Swift.Void)?)
  open func retrieveImageInMemoryCache(forKey key: Swift.String, options: AmityUIKit4.KingfisherParsedOptionsInfo) -> AmityUIKit4.KFCrossPlatformImage?
  open func retrieveImageInMemoryCache(forKey key: Swift.String, options: AmityUIKit4.KingfisherOptionsInfo? = nil) -> AmityUIKit4.KFCrossPlatformImage?
  open func retrieveImageInDiskCache(forKey key: Swift.String, options: AmityUIKit4.KingfisherOptionsInfo? = nil, callbackQueue: AmityUIKit4.CallbackQueue = .untouch, completionHandler: @escaping @Sendable (Swift.Result<AmityUIKit4.KFCrossPlatformImage?, AmityUIKit4.KingfisherError>) -> Swift.Void)
  public func clearCache(completion handler: (@Sendable () -> Swift.Void)? = nil)
  @objc public func clearMemoryCache()
  open func clearDiskCache(completion handler: (@Sendable () -> Swift.Void)? = nil)
  open func cleanExpiredCache(completion handler: (@Sendable () -> Swift.Void)? = nil)
  open func cleanExpiredMemoryCache()
  open func cleanExpiredDiskCache(completion handler: (@Sendable () -> Swift.Void)? = nil)
  @_Concurrency.MainActor @objc public func backgroundCleanExpiredDiskCache()
  open func imageCachedType(forKey key: Swift.String, processorIdentifier identifier: Swift.String = DefaultImageProcessor.default.identifier) -> AmityUIKit4.CacheType
  public func isCached(forKey key: Swift.String, processorIdentifier identifier: Swift.String = DefaultImageProcessor.default.identifier) -> Swift.Bool
  open func hash(forKey key: Swift.String, processorIdentifier identifier: Swift.String = DefaultImageProcessor.default.identifier) -> Swift.String
  open func calculateDiskStorageSize(completion handler: @escaping @Sendable (Swift.Result<Swift.UInt, AmityUIKit4.KingfisherError>) -> Swift.Void)
  open func cachePath(forKey key: Swift.String, processorIdentifier identifier: Swift.String = DefaultImageProcessor.default.identifier) -> Swift.String
  open func store(_ image: AmityUIKit4.KFCrossPlatformImage, original: Foundation.Data? = nil, forKey key: Swift.String, options: AmityUIKit4.KingfisherParsedOptionsInfo, toDisk: Swift.Bool = true) async throws
  open func store(_ image: AmityUIKit4.KFCrossPlatformImage, original: Foundation.Data? = nil, forKey key: Swift.String, processorIdentifier identifier: Swift.String = "", cacheSerializer serializer: any AmityUIKit4.CacheSerializer = DefaultCacheSerializer.default, toDisk: Swift.Bool = true) async throws
  open func storeToDisk(_ data: Foundation.Data, forKey key: Swift.String, processorIdentifier identifier: Swift.String = "", expiration: AmityUIKit4.StorageExpiration? = nil) async throws
  open func removeImage(forKey key: Swift.String, processorIdentifier identifier: Swift.String = "", fromMemory: Swift.Bool = true, fromDisk: Swift.Bool = true) async throws
  open func retrieveImage(forKey key: Swift.String, options: AmityUIKit4.KingfisherParsedOptionsInfo) async throws -> AmityUIKit4.ImageCacheResult
  open func retrieveImage(forKey key: Swift.String, options: AmityUIKit4.KingfisherOptionsInfo? = nil) async throws -> AmityUIKit4.ImageCacheResult
  open func retrieveImageInDiskCache(forKey key: Swift.String, options: AmityUIKit4.KingfisherOptionsInfo? = nil) async throws -> AmityUIKit4.KFCrossPlatformImage?
  open func clearCache() async
  open func clearDiskCache() async
  open func cleanExpiredCache() async
  open func cleanExpiredDiskCache() async
  open var diskStorageSize: Swift.UInt {
    get async throws
  }
}
extension UIKit.UIApplication : AmityUIKit4.KingfisherCompatible {
}
extension AmityUIKit4.KingfisherWrapper where Base : UIKit.UIApplication {
  public static var shared: UIKit.UIApplication? {
    get
  }
}
extension AmityUIKit4.ExpandableText {
  @_Concurrency.MainActor @preconcurrency public func font(_ font: SwiftUICore.Font) -> AmityUIKit4.ExpandableText
  @_Concurrency.MainActor @preconcurrency public func foregroundColor(_ color: SwiftUICore.Color) -> AmityUIKit4.ExpandableText
  @_Concurrency.MainActor @preconcurrency public func attributedColor(_ color: UIKit.UIColor) -> AmityUIKit4.ExpandableText
  @_Concurrency.MainActor @preconcurrency public func lineLimit(_ limit: Swift.Int) -> AmityUIKit4.ExpandableText
  @_Concurrency.MainActor @preconcurrency public func moreButtonText(_ moreText: Swift.String) -> AmityUIKit4.ExpandableText
  @_Concurrency.MainActor @preconcurrency public func moreButtonFont(_ font: SwiftUICore.Font) -> AmityUIKit4.ExpandableText
  @_Concurrency.MainActor @preconcurrency public func moreButtonColor(_ color: SwiftUICore.Color) -> AmityUIKit4.ExpandableText
  @_Concurrency.MainActor @preconcurrency public func expandAnimation(_ animation: SwiftUICore.Animation) -> AmityUIKit4.ExpandableText
  @_Concurrency.MainActor @preconcurrency public func enableCollapse(_ value: Swift.Bool) -> AmityUIKit4.ExpandableText
  @_Concurrency.MainActor @preconcurrency public func trimMultipleNewlinesWhenTruncated(_ value: Swift.Bool) -> AmityUIKit4.ExpandableText
}
public typealias PrefetcherProgressBlock = (_ skippedResources: [any AmityUIKit4.Resource], _ failedResources: [any AmityUIKit4.Resource], _ completedResources: [any AmityUIKit4.Resource]) -> Swift.Void
public typealias PrefetcherSourceProgressBlock = (_ skippedSources: [AmityUIKit4.Source], _ failedSources: [AmityUIKit4.Source], _ completedSources: [AmityUIKit4.Source]) -> Swift.Void
public typealias PrefetcherCompletionHandler = (_ skippedResources: [any AmityUIKit4.Resource], _ failedResources: [any AmityUIKit4.Resource], _ completedResources: [any AmityUIKit4.Resource]) -> Swift.Void
public typealias PrefetcherSourceCompletionHandler = (_ skippedSources: [AmityUIKit4.Source], _ failedSources: [AmityUIKit4.Source], _ completedSources: [AmityUIKit4.Source]) -> Swift.Void
@_hasMissingDesignatedInitializers public class ImagePrefetcher : Swift.CustomStringConvertible, @unchecked Swift.Sendable {
  public var description: Swift.String {
    get
  }
  public var maxConcurrentDownloads: Swift.Int
  convenience public init(urls: [Foundation.URL], options: AmityUIKit4.KingfisherOptionsInfo? = nil, progressBlock: AmityUIKit4.PrefetcherProgressBlock? = nil, completionHandler: AmityUIKit4.PrefetcherCompletionHandler? = nil)
  convenience public init(resources: [any AmityUIKit4.Resource], options: AmityUIKit4.KingfisherOptionsInfo? = nil, progressBlock: AmityUIKit4.PrefetcherProgressBlock? = nil, completionHandler: AmityUIKit4.PrefetcherCompletionHandler? = nil)
  convenience public init(sources: [AmityUIKit4.Source], options: AmityUIKit4.KingfisherOptionsInfo? = nil, progressBlock: AmityUIKit4.PrefetcherSourceProgressBlock? = nil, completionHandler: AmityUIKit4.PrefetcherSourceCompletionHandler? = nil)
  public func start()
  public func stop()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class SessionDataTask : @unchecked Swift.Sendable {
  public typealias CancelToken = Swift.Int
  public var mutableData: Foundation.Data {
    get
  }
  final public let originalURL: Foundation.URL?
  final public let task: Foundation.URLSessionDataTask
  @objc deinit
}
public protocol Placeholder {
  @_Concurrency.MainActor func add(to imageView: AmityUIKit4.KFCrossPlatformImageView)
  @_Concurrency.MainActor func remove(from imageView: AmityUIKit4.KFCrossPlatformImageView)
}
@_Concurrency.MainActor extension UIKit.UIImage : AmityUIKit4.Placeholder {
  @_Concurrency.MainActor public func add(to imageView: AmityUIKit4.KFCrossPlatformImageView)
  @_Concurrency.MainActor public func remove(from imageView: AmityUIKit4.KFCrossPlatformImageView)
  @_Concurrency.MainActor public func add(to base: any AmityUIKit4.KingfisherHasImageComponent)
  @_Concurrency.MainActor public func remove(from base: any AmityUIKit4.KingfisherHasImageComponent)
}
@_Concurrency.MainActor extension AmityUIKit4.Placeholder where Self : UIKit.UIView {
  @_Concurrency.MainActor public func add(to imageView: AmityUIKit4.KFCrossPlatformImageView)
  @_Concurrency.MainActor public func remove(from imageView: AmityUIKit4.KFCrossPlatformImageView)
}
@_Concurrency.MainActor @preconcurrency public struct AmityLiveChatMessageSenderView {
  @_Concurrency.MainActor @preconcurrency public var pageId: AmityUIKit4.PageId?
  @_Concurrency.MainActor @preconcurrency public var componentId: AmityUIKit4.ComponentId?
  @_Concurrency.MainActor @preconcurrency public var id: AmityUIKit4.ElementId {
    get
  }
  @_Concurrency.MainActor @preconcurrency public init(message: AmityUIKit4.MessageModel, messageAction: AmityUIKit4.AmityMessageAction, pageId: AmityUIKit4.PageId? = .liveChatPage, componentId: AmityUIKit4.ComponentId? = .messageList)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s11AmityUIKit40A25LiveChatMessageSenderViewV4bodyQrvp", 0) __
  public typealias ID = AmityUIKit4.ElementId
}
@_Concurrency.MainActor @preconcurrency public struct AmityLiveChatMessageReactionPicker {
  @_Concurrency.MainActor @preconcurrency public var pageId: AmityUIKit4.PageId?
  @_Concurrency.MainActor @preconcurrency public var componentId: AmityUIKit4.ComponentId?
  @_Concurrency.MainActor @preconcurrency public var id: AmityUIKit4.ElementId {
    get
  }
  @_Concurrency.MainActor @preconcurrency public init(message: AmityUIKit4.MessageModel, pageId: AmityUIKit4.PageId? = .liveChatPage, componentId: AmityUIKit4.ComponentId? = .messageList, tapAction: AmityUIKit4.DefaultTapAction? = nil)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s11AmityUIKit40A29LiveChatMessageReactionPickerV4bodyQrvp", 0) __
  public typealias ID = AmityUIKit4.ElementId
}
@_Concurrency.MainActor @preconcurrency public struct AmityCommunityAddUserPage : AmityUIKit4.AmityPageView {
  @SwiftUICore.EnvironmentObject @_projectedValueProperty($host) @_Concurrency.MainActor @preconcurrency public var host: AmityUIKit4.AmitySwiftUIHostWrapper {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var $host: SwiftUICore.EnvironmentObject<AmityUIKit4.AmitySwiftUIHostWrapper>.Wrapper {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var id: AmityUIKit4.PageId {
    get
  }
  @_Concurrency.MainActor @preconcurrency public init(users: [AmityUIKit4.AmityUserModel], onAddedAction: @escaping ([AmityUIKit4.AmityUserModel]) -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s11AmityUIKit40A20CommunityAddUserPageV4bodyQrvp", 0) __
  public typealias ID = AmityUIKit4.PageId
}
@available(iOS 14.0, tvOS 14.0, macOS 11.0, watchOS 7.0, *)
final public class Database {
  public struct Configuration {
    public var name: Swift.String
    public var directoryURL: Foundation.URL
    public var fileExtension: Swift.String
    public init(name: Swift.String, directoryURL: Foundation.URL, fileExtension: Swift.String = "db")
  }
  public static let fileExtension: Swift.String
  public init(configuration: AmityUIKit4.Database.Configuration, model: CoreData.NSManagedObjectModel)
  final public func async(_ closure: @escaping (_ context: CoreData.NSManagedObjectContext) throws -> Swift.Void)
  final public func sync(_ closure: (_ context: CoreData.NSManagedObjectContext) throws -> Swift.Void)
  @discardableResult
  final public func sync<T>(_ closure: (_ context: CoreData.NSManagedObjectContext) throws -> T) throws -> T
  @objc deinit
}
public enum AmityLivestreamTerminatedPageType {
  case watcher
  case streamer
  public static func == (a: AmityUIKit4.AmityLivestreamTerminatedPageType, b: AmityUIKit4.AmityLivestreamTerminatedPageType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_Concurrency.MainActor @preconcurrency public struct AmityLivestreamTerminatedPage : AmityUIKit4.AmityPageView {
  @SwiftUICore.EnvironmentObject @_projectedValueProperty($host) @_Concurrency.MainActor @preconcurrency public var host: AmityUIKit4.AmitySwiftUIHostWrapper {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var $host: SwiftUICore.EnvironmentObject<AmityUIKit4.AmitySwiftUIHostWrapper>.Wrapper {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var id: AmityUIKit4.PageId {
    get
  }
  @_Concurrency.MainActor @preconcurrency public init(type: AmityUIKit4.AmityLivestreamTerminatedPageType = .streamer, onDismiss: (() -> Swift.Void)? = nil)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s11AmityUIKit40A24LivestreamTerminatedPageV4bodyQrvp", 0) __
  public typealias ID = AmityUIKit4.PageId
}
extension Foundation.FileManager {
  public var cachesDirectoryURL: Foundation.URL {
    get
  }
  public func tmpFilePathInCachesDirectory() -> Swift.String
}
extension AVFoundation.AVAssetImageGenerator : @unchecked Swift.Sendable {
}
public struct AVAssetImageDataProvider : AmityUIKit4.ImageDataProvider {
  public enum AVAssetImageDataProviderError : Swift.Error {
    case userCancelled
    case invalidImage(_: CoreGraphics.CGImage?)
  }
  public let assetImageGenerator: AVFoundation.AVAssetImageGenerator
  public let time: CoreMedia.CMTime
  public var cacheKey: Swift.String {
    get
  }
  public init(assetImageGenerator: AVFoundation.AVAssetImageGenerator, time: CoreMedia.CMTime)
  public init(assetURL: Foundation.URL, time: CoreMedia.CMTime)
  public init(assetURL: Foundation.URL, seconds: Foundation.TimeInterval)
  public func data(handler: @escaping (Swift.Result<Foundation.Data, any Swift.Error>) -> Swift.Void)
}
@_Concurrency.MainActor @preconcurrency public struct AmityEmptyNewsFeedComponent {
  @SwiftUICore.EnvironmentObject @_projectedValueProperty($host) @_Concurrency.MainActor @preconcurrency public var host: AmityUIKit4.AmitySwiftUIHostWrapper {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var $host: SwiftUICore.EnvironmentObject<AmityUIKit4.AmitySwiftUIHostWrapper>.Wrapper {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var pageId: AmityUIKit4.PageId?
  @_Concurrency.MainActor @preconcurrency public var id: AmityUIKit4.ComponentId {
    get
  }
  @_Concurrency.MainActor @preconcurrency public init(pageId: AmityUIKit4.PageId? = nil)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s11AmityUIKit40A22EmptyNewsFeedComponentV4bodyQrvp", 0) __
  public typealias ID = AmityUIKit4.ComponentId
}
public typealias KFCrossPlatformImage = UIKit.UIImage
public typealias KFCrossPlatformColor = UIKit.UIColor
public typealias KFCrossPlatformImageView = UIKit.UIImageView
public typealias KFCrossPlatformView = UIKit.UIView
public typealias KFCrossPlatformButton = UIKit.UIButton
public struct KingfisherWrapper<Base> : @unchecked Swift.Sendable {
  public let base: Base
  public init(_ base: Base)
}
public protocol KingfisherCompatible : AnyObject {
}
public protocol KingfisherCompatibleValue {
}
extension AmityUIKit4.KingfisherCompatible {
  public var kf: AmityUIKit4.KingfisherWrapper<Self> {
    get
    set
  }
}
extension AmityUIKit4.KingfisherCompatibleValue {
  public var kf: AmityUIKit4.KingfisherWrapper<Self> {
    get
    set
  }
}
extension UIKit.UIImage : AmityUIKit4.KingfisherCompatible {
}
extension UIKit.UIImageView : AmityUIKit4.KingfisherCompatible {
}
extension UIKit.UIButton : AmityUIKit4.KingfisherCompatible {
}
extension UIKit.NSTextAttachment : AmityUIKit4.KingfisherCompatible {
}
@available(iOS 14.0, *)
extension CarPlay.CPListItem : AmityUIKit4.KingfisherCompatible {
}
public protocol URLImageStoreType {
  func removeAllImages()
  func removeImageWithURL(_ url: Foundation.URL)
  func removeImageWithIdentifier(_ identifier: Swift.String)
}
@_Concurrency.MainActor @preconcurrency public struct AmityLiveChatMessageQuickReaction : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public init(message: AmityUIKit4.MessageModel)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s11AmityUIKit40A28LiveChatMessageQuickReactionV4bodyQrvp", 0) __
}
public enum KingfisherError : Swift.Error {
  public enum RequestErrorReason : Swift.Sendable {
    case emptyRequest
    case invalidURL(request: Foundation.URLRequest)
    case taskCancelled(task: AmityUIKit4.SessionDataTask, token: AmityUIKit4.SessionDataTask.CancelToken)
  }
  public enum ResponseErrorReason : Swift.Sendable {
    case invalidURLResponse(response: Foundation.URLResponse)
    case invalidHTTPStatusCode(response: Foundation.HTTPURLResponse)
    case URLSessionError(error: any Swift.Error)
    case dataModifyingFailed(task: AmityUIKit4.SessionDataTask)
    case noURLResponse(task: AmityUIKit4.SessionDataTask)
    case cancelledByDelegate(response: Foundation.URLResponse)
  }
  public enum CacheErrorReason : @unchecked Swift.Sendable {
    case fileEnumeratorCreationFailed(url: Foundation.URL)
    case invalidFileEnumeratorContent(url: Foundation.URL)
    case invalidURLResource(error: any Swift.Error, key: Swift.String, url: Foundation.URL)
    case cannotLoadDataFromDisk(url: Foundation.URL, error: any Swift.Error)
    case cannotCreateDirectory(path: Swift.String, error: any Swift.Error)
    case imageNotExisting(key: Swift.String)
    case cannotConvertToData(object: Any, error: any Swift.Error)
    case cannotSerializeImage(image: AmityUIKit4.KFCrossPlatformImage?, original: Foundation.Data?, serializer: any AmityUIKit4.CacheSerializer)
    case cannotCreateCacheFile(fileURL: Foundation.URL, key: Swift.String, data: Foundation.Data, error: any Swift.Error)
    case cannotSetCacheFileAttribute(filePath: Swift.String, attributes: [Foundation.FileAttributeKey : Any], error: any Swift.Error)
    case diskStorageIsNotReady(cacheURL: Foundation.URL)
  }
  public enum ProcessorErrorReason : Swift.Sendable {
    case processingFailed(processor: any AmityUIKit4.ImageProcessor, item: AmityUIKit4.ImageProcessItem)
  }
  public enum ImageSettingErrorReason : Swift.Sendable {
    case emptySource
    case notCurrentSourceTask(result: AmityUIKit4.RetrieveImageResult?, error: (any Swift.Error)?, source: AmityUIKit4.Source)
    case dataProviderError(provider: any AmityUIKit4.ImageDataProvider, error: any Swift.Error)
    case alternativeSourcesExhausted([AmityUIKit4.PropagationError])
  }
  case requestError(reason: AmityUIKit4.KingfisherError.RequestErrorReason)
  case responseError(reason: AmityUIKit4.KingfisherError.ResponseErrorReason)
  case cacheError(reason: AmityUIKit4.KingfisherError.CacheErrorReason)
  case processorError(reason: AmityUIKit4.KingfisherError.ProcessorErrorReason)
  case imageSettingError(reason: AmityUIKit4.KingfisherError.ImageSettingErrorReason)
  public var isTaskCancelled: Swift.Bool {
    get
  }
  public func isInvalidResponseStatusCode(_ code: Swift.Int) -> Swift.Bool
  public var isInvalidResponseStatusCode: Swift.Bool {
    get
  }
  public var isNotCurrentTask: Swift.Bool {
    get
  }
}
extension AmityUIKit4.KingfisherError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
extension AmityUIKit4.KingfisherError : Foundation.CustomNSError {
  public static let domain: Swift.String
  public var errorCode: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class AmityFile : Swift.Hashable, Swift.Equatable {
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (lhs: AmityUIKit4.AmityFile, rhs: AmityUIKit4.AmityFile) -> Swift.Bool
  @objc deinit
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class AmityDocument : UIKit.UIDocument {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func contents(forType typeName: Swift.String) throws -> Any
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func load(fromContents contents: Any, ofType typeName: Swift.String?) throws
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(fileURL url: Foundation.URL)
  @objc deinit
}
public protocol ImageDataProvider : Swift.Sendable {
  var cacheKey: Swift.String { get }
  func data(handler: @escaping @Sendable (Swift.Result<Foundation.Data, any Swift.Error>) -> Swift.Void)
  var contentURL: Foundation.URL? { get }
}
extension AmityUIKit4.ImageDataProvider {
  public var contentURL: Foundation.URL? {
    get
  }
  public func convertToSource() -> AmityUIKit4.Source
}
public struct LocalFileImageDataProvider : AmityUIKit4.ImageDataProvider {
  public let fileURL: Foundation.URL
  public init(fileURL: Foundation.URL, cacheKey: Swift.String? = nil, loadingQueue: AmityUIKit4.ExecutionQueue = .dispatch(DispatchQueue.global(qos: .userInitiated)))
  public var cacheKey: Swift.String
  public func data(handler: @escaping @Sendable (Swift.Result<Foundation.Data, any Swift.Error>) -> Swift.Void)
  public var data: Foundation.Data {
    get async throws
  }
  public var contentURL: Foundation.URL? {
    get
  }
}
public struct Base64ImageDataProvider : AmityUIKit4.ImageDataProvider {
  public let base64String: Swift.String
  public init(base64String: Swift.String, cacheKey: Swift.String)
  public var cacheKey: Swift.String
  public func data(handler: (Swift.Result<Foundation.Data, any Swift.Error>) -> Swift.Void)
}
public struct RawImageDataProvider : AmityUIKit4.ImageDataProvider {
  public let data: Foundation.Data
  public init(data: Foundation.Data, cacheKey: Swift.String)
  public var cacheKey: Swift.String
  public func data(handler: @escaping (Swift.Result<Foundation.Data, any Swift.Error>) -> Swift.Void)
}
open class AmityCommentTrayComponentBehavior {
  @_hasMissingDesignatedInitializers open class Context {
    final public let component: AmityUIKit4.AmityCommentTrayComponent
    final public let userId: Swift.String
    @objc deinit
  }
  public init()
  open func goToUserProfilePage(context: AmityUIKit4.AmityCommentTrayComponentBehavior.Context)
  @objc deinit
}
@_Concurrency.MainActor @preconcurrency public struct AmityUserPendingFollowRequestsPage : AmityUIKit4.AmityPageView {
  @SwiftUICore.EnvironmentObject @_projectedValueProperty($host) @_Concurrency.MainActor @preconcurrency public var host: AmityUIKit4.AmitySwiftUIHostWrapper {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var $host: SwiftUICore.EnvironmentObject<AmityUIKit4.AmitySwiftUIHostWrapper>.Wrapper {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var id: AmityUIKit4.PageId {
    get
  }
  @_Concurrency.MainActor @preconcurrency public init()
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s11AmityUIKit40A29UserPendingFollowRequestsPageV4bodyQrvp", 0) __
  public typealias ID = AmityUIKit4.PageId
}
extension QuartzCore.CADisplayLink : @unchecked Swift.Sendable {
}
public class AmityLiveChatHeaderViewModel : Foundation.ObservableObject {
  public init(channelId: Swift.String)
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
@_Concurrency.MainActor @preconcurrency public struct AmityPendingPostContentComponent {
  @SwiftUICore.EnvironmentObject @_projectedValueProperty($host) @_Concurrency.MainActor @preconcurrency public var host: AmityUIKit4.AmitySwiftUIHostWrapper {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var $host: SwiftUICore.EnvironmentObject<AmityUIKit4.AmitySwiftUIHostWrapper>.Wrapper {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var pageId: AmityUIKit4.PageId?
  @_Concurrency.MainActor @preconcurrency public var id: AmityUIKit4.ComponentId {
    get
  }
  @_Concurrency.MainActor @preconcurrency public init(pageId: AmityUIKit4.PageId? = nil, post: AmitySDK.AmityPost)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s11AmityUIKit40A27PendingPostContentComponentV4bodyQrvp", 0) __
  public typealias ID = AmityUIKit4.ComponentId
}
@available(iOS 14.0, tvOS 14.0, macOS 11.0, watchOS 7.0, *)
final public class ImageDecoder {
  public struct DecodingOptions {
    public enum Mode {
      case synchronous
      case asynchronous
      public static func == (a: AmityUIKit4.ImageDecoder.DecodingOptions.Mode, b: AmityUIKit4.ImageDecoder.DecodingOptions.Mode) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public static var `default`: AmityUIKit4.ImageDecoder.DecodingOptions {
      get
    }
    public var mode: AmityUIKit4.ImageDecoder.DecodingOptions.Mode
    public var sizeForDrawing: CoreFoundation.CGSize?
    public init(mode: AmityUIKit4.ImageDecoder.DecodingOptions.Mode, sizeForDrawing: CoreFoundation.CGSize?)
  }
  public enum SubsamplingLevel : Swift.Int {
    case level0
    case level1
    case level2
    case level3
    public static var `default`: AmityUIKit4.ImageDecoder.SubsamplingLevel {
      get
    }
    public init?(rawValue: Swift.Int)
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public enum EncodedDataStatus {
    case unknown
    case error
    case typeAvailable
    case sizeAvailable
    case complete
    public static func == (a: AmityUIKit4.ImageDecoder.EncodedDataStatus, b: AmityUIKit4.ImageDecoder.EncodedDataStatus) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public static func preferredFileExtension(forTypeIdentifier uti: Swift.String) -> Swift.String?
  public init()
  convenience public init?(url: Foundation.URL)
  final public var isAllDataReceived: Swift.Bool {
    get
  }
  final public func setData(_ data: Foundation.Data, allDataReceived: Swift.Bool)
  final public func setDataProvider(_ dataProvider: CoreGraphics.CGDataProvider, allDataReceived: Swift.Bool)
  final public var uti: Swift.String? {
    get
  }
  final public var encodedDataStatus: AmityUIKit4.ImageDecoder.EncodedDataStatus {
    get
  }
  final public var frameCount: Swift.Int {
    get
  }
  final public func frameDuration(at index: Swift.Int) -> Foundation.TimeInterval?
  final public func frameSize(at index: Swift.Int, subsamplingLevel: AmityUIKit4.ImageDecoder.SubsamplingLevel = .default) -> CoreFoundation.CGSize?
  final public func createFrameImage(at index: Swift.Int, subsamplingLevel: AmityUIKit4.ImageDecoder.SubsamplingLevel = .default, decodingOptions: AmityUIKit4.ImageDecoder.DecodingOptions = .default) -> CoreGraphics.CGImage?
  final public func isFrameComplete(at index: Swift.Int) -> Swift.Bool
  final public func frameOrientation(at index: Swift.Int) -> ImageIO.CGImagePropertyOrientation?
  @objc deinit
}
open class AmityViewStoryPageBehaviour {
  @_hasMissingDesignatedInitializers open class Context {
    final public let page: AmityUIKit4.AmityViewStoryPage
    final public let targetId: Swift.String
    final public let targetType: AmitySDK.AmityStoryTargetType
    @objc deinit
  }
  public init()
  open func goToCommunityPage(context: AmityUIKit4.AmityViewStoryPageBehaviour.Context)
  open func goToCreateStoryPage(context: AmityUIKit4.AmityViewStoryPageBehaviour.Context)
  @objc deinit
}

public struct AmityCustomFont {
  public static var fontCB: (CoreFoundation.CGFloat, SwiftUICore.Font.Weight) -> SwiftUICore.Font
}
@_hasMissingDesignatedInitializers public class RetryContext : @unchecked Swift.Sendable {
  final public let source: AmityUIKit4.Source
  final public let error: AmityUIKit4.KingfisherError
  public var retriedCount: Swift.Int {
    get
    set
  }
  public var userInfo: Any? {
    get
  }
  @objc deinit
}
public enum RetryDecision {
  case retry(userInfo: Any?)
  case stop
}
public protocol RetryStrategy : Swift.Sendable {
  func retry(context: AmityUIKit4.RetryContext, retryHandler: @escaping @Sendable (AmityUIKit4.RetryDecision) -> Swift.Void)
}
public struct DelayRetryStrategy : AmityUIKit4.RetryStrategy {
  public enum Interval : Swift.Sendable {
    case seconds(Foundation.TimeInterval)
    case accumulated(Foundation.TimeInterval)
    case custom(block: @Sendable (_ retriedCount: Swift.Int) -> Foundation.TimeInterval)
  }
  public let maxRetryCount: Swift.Int
  public let retryInterval: AmityUIKit4.DelayRetryStrategy.Interval
  public init(maxRetryCount: Swift.Int, retryInterval: AmityUIKit4.DelayRetryStrategy.Interval = .seconds(3))
  public func retry(context: AmityUIKit4.RetryContext, retryHandler: @escaping @Sendable (AmityUIKit4.RetryDecision) -> Swift.Void)
}
@_hasMissingDesignatedInitializers @available(macOS 11.0, iOS 14.0, tvOS 14.0, watchOS 7.0, *)
final public class RemoteImage : Combine.ObservableObject {
  @objc deinit
  public typealias LoadingState = AmityUIKit4.RemoteImageLoadingState
  @Combine.Published @_projectedValueProperty($loadingState) final public var loadingState: AmityUIKit4.RemoteImage.LoadingState {
    get
  }
  final public var $loadingState: Combine.Published<AmityUIKit4.RemoteImage.LoadingState>.Publisher {
    get
  }
  final public func load()
  final public func cancel()
  @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
}
extension AVFoundation.AVPlayerItem {
  @_Concurrency.MainActor @preconcurrency public var bufferProgress: Swift.Double {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var currentBufferDuration: Swift.Double {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var currentDuration: Swift.Double {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var playProgress: Swift.Double {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var totalDuration: Swift.Double {
    get
  }
}
public enum SearchType {
  case community, user, myCommunities
  public static func == (a: AmityUIKit4.SearchType, b: AmityUIKit4.SearchType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public class AmityGlobalSearchViewModel : Combine.ObservableObject {
  public var searchType: AmityUIKit4.SearchType
  @Combine.Published @_projectedValueProperty($searchKeyword) public var searchKeyword: Swift.String {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $searchKeyword: Combine.Published<Swift.String>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($communities) public var communities: [AmitySDK.AmityCommunity] {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $communities: Combine.Published<[AmitySDK.AmityCommunity]>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($users) public var users: [AmitySDK.AmityUser] {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $users: Combine.Published<[AmitySDK.AmityUser]>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($loadingState) public var loadingState: AmitySDK.AmityLoadingStatus {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $loadingState: Combine.Published<AmitySDK.AmityLoadingStatus>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($isFirstTimeSearching) public var isFirstTimeSearching: Swift.Bool {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $isFirstTimeSearching: Combine.Published<Swift.Bool>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  public init(searchType: AmityUIKit4.SearchType = .community)
  public func loadMoreCommunities()
  public func loadMoreUsers()
  public func loadMoreMyCommunities()
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public enum SwipeInteractionArea {
  case allAvailable
  case page
  public static func == (a: AmityUIKit4.SwipeInteractionArea, b: AmityUIKit4.SwipeInteractionArea) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol AmityPageView : AmityUIKit4.AmityPageIdentifiable, SwiftUICore.View {
}
@_Concurrency.MainActor @preconcurrency public struct AmityEditUserProfilePage : AmityUIKit4.AmityPageView {
  @SwiftUICore.EnvironmentObject @_projectedValueProperty($host) @_Concurrency.MainActor @preconcurrency public var host: AmityUIKit4.AmitySwiftUIHostWrapper {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var $host: SwiftUICore.EnvironmentObject<AmityUIKit4.AmitySwiftUIHostWrapper>.Wrapper {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var id: AmityUIKit4.PageId {
    get
  }
  @_Concurrency.MainActor @preconcurrency public init()
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s11AmityUIKit40A19EditUserProfilePageV4bodyQrvp", 0) __
  public typealias ID = AmityUIKit4.PageId
}
public class AmityStoryTargetModel : Combine.ObservableObject, Swift.Identifiable, Swift.Equatable {
  public static func == (lhs: AmityUIKit4.AmityStoryTargetModel, rhs: AmityUIKit4.AmityStoryTargetModel) -> Swift.Bool
  public var id: Swift.String {
    get
  }
  public init(_ storyTarget: AmitySDK.AmityStoryTarget)
  public typealias ID = Swift.String
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public enum PaginationSensitivity : Swift.Equatable {
  case low
  case medium
  case high
  case custom(CoreFoundation.CGFloat)
  public static var `default`: AmityUIKit4.PaginationSensitivity
  public static func == (a: AmityUIKit4.PaginationSensitivity, b: AmityUIKit4.PaginationSensitivity) -> Swift.Bool
}
public struct AmityStoryModel : Swift.Identifiable, Swift.Equatable, Swift.Hashable {
  public var hashValue: Swift.Int {
    get
  }
  public static func == (lhs: AmityUIKit4.AmityStoryModel, rhs: AmityUIKit4.AmityStoryModel) -> Swift.Bool
  public var id: Swift.String {
    get
  }
  public typealias ID = Swift.String
  public func hash(into hasher: inout Swift.Hasher)
}
public struct AmityLocalizedStringSet {
  public struct General {
  }
  public struct Story {
  }
  public struct Comment {
  }
  public struct Chat {
  }
  public struct Reaction {
  }
  public enum Social {
  }
}
@_Concurrency.MainActor @preconcurrency public struct AmityRecommendedCommunitiesComponent {
  @_Concurrency.MainActor @preconcurrency public var pageId: AmityUIKit4.PageId?
  @_Concurrency.MainActor @preconcurrency public var id: AmityUIKit4.ComponentId {
    get
  }
  @SwiftUICore.EnvironmentObject @_projectedValueProperty($host) @_Concurrency.MainActor @preconcurrency public var host: AmityUIKit4.AmitySwiftUIHostWrapper {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var $host: SwiftUICore.EnvironmentObject<AmityUIKit4.AmitySwiftUIHostWrapper>.Wrapper {
    get
  }
  @_Concurrency.MainActor @preconcurrency public init(pageId: AmityUIKit4.PageId? = .socialHomePage)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s11AmityUIKit40A31RecommendedCommunitiesComponentV4bodyQrvp", 0) __
  public typealias ID = AmityUIKit4.ComponentId
}
public enum StorageExpiration : Swift.Sendable {
  case never
  case seconds(Foundation.TimeInterval)
  case days(Swift.Int)
  case date(Foundation.Date)
  case expired
}
public enum ExpirationExtending : Swift.Sendable {
  case none
  case cacheTime
  case expirationTime(_: AmityUIKit4.StorageExpiration)
}
public protocol CacheCostCalculable {
  var cacheCost: Swift.Int { get }
}
public protocol DataTransformable {
  func toData() throws -> Foundation.Data
  static func fromData(_ data: Foundation.Data) throws -> Self
  static var empty: Self { get }
}
extension SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public func bottomSheet<Content>(isPresented: SwiftUICore.Binding<Swift.Bool>, height: CoreFoundation.CGFloat, topBarHeight: CoreFoundation.CGFloat = 30, topBarCornerRadius: CoreFoundation.CGFloat? = nil, contentBackgroundColor: SwiftUICore.Color = Color(.systemBackground), topBarBackgroundColor: SwiftUICore.Color = Color(.systemBackground), showTopIndicator: Swift.Bool = true, animation: SwiftUICore.Animation = .easeInOut(duration: 0.3), onDismiss: (() -> Swift.Void)? = nil, showGrayBackground: Swift.Bool = true, @SwiftUICore.ViewBuilder content: @escaping () -> Content) -> some SwiftUICore.View where Content : SwiftUICore.View
  
  @_Concurrency.MainActor @preconcurrency public func bottomSheet<Item, Content>(item: SwiftUICore.Binding<Item?>, height: CoreFoundation.CGFloat, topBarHeight: CoreFoundation.CGFloat = 30, topBarCornerRadius: CoreFoundation.CGFloat? = nil, contentBackgroundColor: SwiftUICore.Color = Color(.systemBackground), topBarBackgroundColor: SwiftUICore.Color = Color(.systemBackground), showTopIndicator: Swift.Bool = true, onDismiss: (() -> Swift.Void)? = nil, @SwiftUICore.ViewBuilder content: @escaping (Item) -> Content) -> some SwiftUICore.View where Item : Swift.Identifiable, Content : SwiftUICore.View
  
}
@_Concurrency.MainActor @preconcurrency public struct AmityTopSearchBarComponent {
  @_Concurrency.MainActor @preconcurrency public var pageId: AmityUIKit4.PageId?
  @_Concurrency.MainActor @preconcurrency public var id: AmityUIKit4.ComponentId {
    get
  }
  @_Concurrency.MainActor @preconcurrency public init(viewModel: AmityUIKit4.AmityGlobalSearchViewModel, pageId: AmityUIKit4.PageId? = nil, isMain: Swift.Bool = false)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s11AmityUIKit40A21TopSearchBarComponentV4bodyQrvp", 0) __
  public typealias ID = AmityUIKit4.ComponentId
}
@_Concurrency.MainActor @preconcurrency public struct AmityCreatePostMenuComponent {
  @SwiftUICore.EnvironmentObject @_projectedValueProperty($host) @_Concurrency.MainActor @preconcurrency public var host: AmityUIKit4.AmitySwiftUIHostWrapper {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var $host: SwiftUICore.EnvironmentObject<AmityUIKit4.AmitySwiftUIHostWrapper>.Wrapper {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var pageId: AmityUIKit4.PageId?
  @_Concurrency.MainActor @preconcurrency public var id: AmityUIKit4.ComponentId {
    get
  }
  @_Concurrency.MainActor @preconcurrency public init(isPresented: SwiftUICore.Binding<Swift.Bool>? = nil, pageId: AmityUIKit4.PageId? = nil)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s11AmityUIKit40A23CreatePostMenuComponentV4bodyQrvp", 0) __
  public typealias ID = AmityUIKit4.ComponentId
}
@_Concurrency.MainActor @preconcurrency public struct AmityReactionList {
  @SwiftUICore.EnvironmentObject @_projectedValueProperty($host) @_Concurrency.MainActor @preconcurrency public var host: AmityUIKit4.AmitySwiftUIHostWrapper {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var $host: SwiftUICore.EnvironmentObject<AmityUIKit4.AmitySwiftUIHostWrapper>.Wrapper {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var pageId: AmityUIKit4.PageId?
  @_Concurrency.MainActor @preconcurrency public var id: AmityUIKit4.ComponentId {
    get
  }
  @_Concurrency.MainActor @preconcurrency public init(referenceId: Swift.String, referenceType: AmitySDK.AmityReactionReferenceType, pageId: AmityUIKit4.PageId? = nil)
  @_Concurrency.MainActor @preconcurrency public init(post: AmitySDK.AmityPost, pageId: AmityUIKit4.PageId? = nil)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s11AmityUIKit40A12ReactionListV4bodyQrvp", 0) __
  public typealias ID = AmityUIKit4.ComponentId
}
public class AmityMessageListViewModel : Combine.ObservableObject {
  public init(subChannelId: Swift.String)
  public func queryMessages()
  public func loadMoreMessages()
  @_Concurrency.MainActor public func deleteMessage(messageId: Swift.String)
  public func isPaginationAvailable() -> Swift.Bool
  @_Concurrency.MainActor public func reportMessage(messageId: Swift.String)
  @_Concurrency.MainActor public func unReportMessage(messageId: Swift.String)
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
extension AmityUIKit4.AmityMessageListViewModel : AmitySDK.AmityClientDelegate {
  public func didReceiveError(error: any Swift.Error)
}
@_Concurrency.MainActor @preconcurrency public struct AmityLiveChatMessageReactionPreview : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public init(message: AmityUIKit4.MessageModel, tapAction: AmityUIKit4.DefaultTapAction? = nil)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s11AmityUIKit40A30LiveChatMessageReactionPreviewV4bodyQrvp", 0) __
}
open class AmityBlockedUsersPageBehavior {
  @_hasMissingDesignatedInitializers open class Context {
    final public let page: AmityUIKit4.AmityBlockedUsersPage
    final public let userId: Swift.String
    @objc deinit
  }
  public init()
  open func goToUserProfilePage(context: AmityUIKit4.AmityBlockedUsersPageBehavior.Context)
  @objc deinit
}
@_Concurrency.MainActor extension AmityUIKit4.KingfisherWrapper where Base : UIKit.UIImageView {
  @discardableResult
  @_Concurrency.MainActor public func setImage(with source: AmityUIKit4.Source?, placeholder: (any AmityUIKit4.Placeholder)? = nil, options: AmityUIKit4.KingfisherOptionsInfo? = nil, progressBlock: AmityUIKit4.DownloadProgressBlock? = nil, completionHandler: (@_Concurrency.MainActor @Sendable (Swift.Result<AmityUIKit4.RetrieveImageResult, AmityUIKit4.KingfisherError>) -> Swift.Void)? = nil) -> AmityUIKit4.DownloadTask?
  @discardableResult
  @_Concurrency.MainActor public func setImage(with source: AmityUIKit4.Source?, placeholder: (any AmityUIKit4.Placeholder)? = nil, options: AmityUIKit4.KingfisherOptionsInfo? = nil, completionHandler: (@_Concurrency.MainActor @Sendable (Swift.Result<AmityUIKit4.RetrieveImageResult, AmityUIKit4.KingfisherError>) -> Swift.Void)? = nil) -> AmityUIKit4.DownloadTask?
  @discardableResult
  @_Concurrency.MainActor public func setImage(with resource: (any AmityUIKit4.Resource)?, placeholder: (any AmityUIKit4.Placeholder)? = nil, options: AmityUIKit4.KingfisherOptionsInfo? = nil, progressBlock: AmityUIKit4.DownloadProgressBlock? = nil, completionHandler: (@_Concurrency.MainActor @Sendable (Swift.Result<AmityUIKit4.RetrieveImageResult, AmityUIKit4.KingfisherError>) -> Swift.Void)? = nil) -> AmityUIKit4.DownloadTask?
  @discardableResult
  @_Concurrency.MainActor public func setImage(with resource: (any AmityUIKit4.Resource)?, placeholder: (any AmityUIKit4.Placeholder)? = nil, options: AmityUIKit4.KingfisherOptionsInfo? = nil, completionHandler: (@_Concurrency.MainActor @Sendable (Swift.Result<AmityUIKit4.RetrieveImageResult, AmityUIKit4.KingfisherError>) -> Swift.Void)? = nil) -> AmityUIKit4.DownloadTask?
  @discardableResult
  @_Concurrency.MainActor public func setImage(with provider: (any AmityUIKit4.ImageDataProvider)?, placeholder: (any AmityUIKit4.Placeholder)? = nil, options: AmityUIKit4.KingfisherOptionsInfo? = nil, progressBlock: AmityUIKit4.DownloadProgressBlock? = nil, completionHandler: (@_Concurrency.MainActor @Sendable (Swift.Result<AmityUIKit4.RetrieveImageResult, AmityUIKit4.KingfisherError>) -> Swift.Void)? = nil) -> AmityUIKit4.DownloadTask?
  @discardableResult
  @_Concurrency.MainActor public func setImage(with provider: (any AmityUIKit4.ImageDataProvider)?, placeholder: (any AmityUIKit4.Placeholder)? = nil, options: AmityUIKit4.KingfisherOptionsInfo? = nil, completionHandler: (@_Concurrency.MainActor @Sendable (Swift.Result<AmityUIKit4.RetrieveImageResult, AmityUIKit4.KingfisherError>) -> Swift.Void)? = nil) -> AmityUIKit4.DownloadTask?
  @_Concurrency.MainActor public func cancelDownloadTask()
}
@_Concurrency.MainActor extension AmityUIKit4.KingfisherWrapper where Base : UIKit.UIImageView {
  @_Concurrency.MainActor public var taskIdentifier: AmityUIKit4.Source.Identifier.Value? {
    get
  }
  @_Concurrency.MainActor public var indicatorType: AmityUIKit4.IndicatorType {
    get
    set
  }
  @_Concurrency.MainActor public var indicator: (any AmityUIKit4.Indicator)? {
    get
  }
  @_Concurrency.MainActor public var placeholder: (any AmityUIKit4.Placeholder)? {
    get
  }
}
public enum CameraState {
  case ready, accessDenied, noDeviceFound, notDetermined
  public static func == (a: AmityUIKit4.CameraState, b: AmityUIKit4.CameraState) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum CameraDevice {
  case front, back
  public static func == (a: AmityUIKit4.CameraDevice, b: AmityUIKit4.CameraDevice) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum CameraFlashMode : Swift.Int {
  case off, on, auto
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum CameraOutputMode {
  case stillImage, videoWithMic, videoOnly
  public static func == (a: AmityUIKit4.CameraOutputMode, b: AmityUIKit4.CameraOutputMode) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum CaptureResult {
  case success(content: AmityUIKit4.CaptureContent)
  case failure(any Swift.Error)
}
public enum CaptureContent {
  case imageData(Foundation.Data, Foundation.URL?)
  case image(UIKit.UIImage)
  case asset(Photos.PHAsset)
}
extension AmityUIKit4.CaptureContent {
  public var asImage: UIKit.UIImage? {
    get
  }
  public var asData: (data: Foundation.Data?, url: Foundation.URL?) {
    get
  }
}
public enum CaptureError : Swift.Error {
  case noImageData
  case invalidImageData
  case noVideoConnection
  case noSampleBuffer
  case assetNotSaved
  public static func == (a: AmityUIKit4.CaptureError, b: AmityUIKit4.CaptureError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency open class CameraManager : ObjectiveC.NSObject, AVFoundation.AVCaptureFileOutputRecordingDelegate, UIKit.UIGestureRecognizerDelegate {
  @_Concurrency.MainActor @preconcurrency open var imageAlbumName: Swift.String?
  @_Concurrency.MainActor @preconcurrency open var videoAlbumName: Swift.String?
  @_Concurrency.MainActor @preconcurrency open var captureSession: AVFoundation.AVCaptureSession?
  @_Concurrency.MainActor @preconcurrency open var showErrorsToUsers: Swift.Bool
  @_Concurrency.MainActor @preconcurrency open var showAccessPermissionPopupAutomatically: Swift.Bool
  @_Concurrency.MainActor @preconcurrency open var showErrorBlock: (_ erTitle: Swift.String, _ erMessage: Swift.String) -> Swift.Void
  @_Concurrency.MainActor @preconcurrency open func canSetPreset(preset: AVFoundation.AVCaptureSession.Preset) -> Swift.Bool?
  @_Concurrency.MainActor @preconcurrency open var writeFilesToPhoneLibrary: Swift.Bool
  @_Concurrency.MainActor @preconcurrency open var shouldRespondToOrientationChanges: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency open var shouldFlipFrontCameraImage: Swift.Bool
  @_Concurrency.MainActor @preconcurrency open var shouldKeepViewAtOrientationChanges: Swift.Bool
  @_Concurrency.MainActor @preconcurrency open var shouldEnableTapToFocus: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency open var shouldEnablePinchToZoom: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency open var shouldEnableExposure: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency open var cameraIsReady: Swift.Bool {
    get
  }
  @_Concurrency.MainActor @preconcurrency open var hasFrontCamera: Swift.Bool
  @_Concurrency.MainActor @preconcurrency open var hasFlash: Swift.Bool
  @_Concurrency.MainActor @preconcurrency open var animateCameraDeviceChange: Swift.Bool
  @_Concurrency.MainActor @preconcurrency open var animateShutter: Swift.Bool
  @_Concurrency.MainActor @preconcurrency open var shouldUseLocationServices: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency open var cameraDevice: AmityUIKit4.CameraDevice {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency open var flashMode: AmityUIKit4.CameraFlashMode {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency open var cameraOutputQuality: AVFoundation.AVCaptureSession.Preset {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency open var cameraOutputMode: AmityUIKit4.CameraOutputMode {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency open var recordedDuration: CoreMedia.CMTime {
    get
  }
  @_Concurrency.MainActor @preconcurrency open var recordedFileSize: Swift.Int64 {
    get
  }
  @_Concurrency.MainActor @preconcurrency open var focusMode: AVFoundation.AVCaptureDevice.FocusMode
  @_Concurrency.MainActor @preconcurrency open var exposureMode: AVFoundation.AVCaptureDevice.ExposureMode
  @_Concurrency.MainActor @preconcurrency open var videoStabilisationMode: AVFoundation.AVCaptureVideoStabilizationMode {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency open var activeVideoStabilisationMode: AVFoundation.AVCaptureVideoStabilizationMode {
    get
  }
  @discardableResult
  @_Concurrency.MainActor @preconcurrency open func addPreviewLayerToView(_ view: UIKit.UIView) -> AmityUIKit4.CameraState
  @discardableResult
  @_Concurrency.MainActor @preconcurrency open func addPreviewLayerToView(_ view: UIKit.UIView, newCameraOutputMode: AmityUIKit4.CameraOutputMode) -> AmityUIKit4.CameraState
  @discardableResult
  @_Concurrency.MainActor @preconcurrency open func addLayerPreviewToView(_ view: UIKit.UIView, newCameraOutputMode: AmityUIKit4.CameraOutputMode, completion: (() -> Swift.Void)?) -> AmityUIKit4.CameraState
  @_Concurrency.MainActor @preconcurrency open func zoom(_ scale: CoreFoundation.CGFloat)
  @_Concurrency.MainActor @preconcurrency open func askUserForCameraPermission(_ completion: @escaping (Swift.Bool) -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency open func stopCaptureSession()
  @_Concurrency.MainActor @preconcurrency open func resumeCaptureSession()
  @_Concurrency.MainActor @preconcurrency open func stopAndRemoveCaptureSession()
  @available(*, deprecated)
  @_Concurrency.MainActor @preconcurrency open func capturePictureWithCompletion(_ imageCompletion: @escaping (UIKit.UIImage?, Foundation.NSError?) -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency open func capturePictureWithCompletion(_ imageCompletion: @escaping (AmityUIKit4.CaptureResult) -> Swift.Void)
  @available(*, deprecated)
  @_Concurrency.MainActor @preconcurrency open func capturePictureDataWithCompletion(_ imageCompletion: @escaping (Foundation.Data?, Foundation.NSError?) -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency open func capturePictureDataWithCompletion(_ imageCompletion: @escaping (AmityUIKit4.CaptureResult) -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency open func startRecordingVideo()
  @_Concurrency.MainActor @preconcurrency open func stopVideoRecording(_ completion: ((_ videoURL: Foundation.URL?, _ error: Foundation.NSError?) -> Swift.Void)?)
  public typealias QRCodeDetectionHandler = (Swift.Result<Swift.String, any Swift.Error>) -> Swift.Void
  @_Concurrency.MainActor @preconcurrency open func startQRCodeDetection(_ handler: @escaping AmityUIKit4.CameraManager.QRCodeDetectionHandler)
  @_Concurrency.MainActor @preconcurrency open func stopQRCodeDetection()
  @_Concurrency.MainActor @preconcurrency open func deviceOrientationMatchesInterfaceOrientation() -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency open func currentCameraStatus() -> AmityUIKit4.CameraState
  @_Concurrency.MainActor @preconcurrency open func changeFlashMode() -> AmityUIKit4.CameraFlashMode
  @_Concurrency.MainActor @preconcurrency open func hasFlash(for cameraDevice: AmityUIKit4.CameraDevice) -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency @objc public func fileOutput(_: AVFoundation.AVCaptureFileOutput, didStartRecordingTo _: Foundation.URL, from _: [AVFoundation.AVCaptureConnection])
  @_Concurrency.MainActor @preconcurrency @objc open func fileOutput(_: AVFoundation.AVCaptureFileOutput, didFinishRecordingTo outputFileURL: Foundation.URL, from _: [AVFoundation.AVCaptureConnection], error: (any Swift.Error)?)
  @_Concurrency.MainActor @preconcurrency @objc open func gestureRecognizerShouldBegin(_ gestureRecognizer: UIKit.UIGestureRecognizer) -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency open func resetOrientation()
  @_Concurrency.MainActor @preconcurrency open func _doFlipAnimation()
  @objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class CameraLocationManager : ObjectiveC.NSObject, CoreLocation.CLLocationManagerDelegate {
    @objc public func locationManager(_: CoreLocation.CLLocationManager, didUpdateLocations locations: [CoreLocation.CLLocation])
    @objc public func locationManager(_: CoreLocation.CLLocationManager, didChangeAuthorization status: CoreLocation.CLAuthorizationStatus)
    @objc deinit
  }
  @objc deinit
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init()
}
extension AmityUIKit4.CameraManager : AVFoundation.AVCaptureMetadataOutputObjectsDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func metadataOutput(_: AVFoundation.AVCaptureMetadataOutput, didOutput metadataObjects: [AVFoundation.AVMetadataObject], from _: AVFoundation.AVCaptureConnection)
}
public protocol AsyncImageDownloadRequestModifier : Swift.Sendable {
  func modified(for request: Foundation.URLRequest) async -> Foundation.URLRequest?
  var onDownloadTaskStarted: (@Sendable (AmityUIKit4.DownloadTask?) -> Swift.Void)? { get }
}
public protocol ImageDownloadRequestModifier : AmityUIKit4.AsyncImageDownloadRequestModifier {
  func modified(for request: Foundation.URLRequest) -> Foundation.URLRequest?
}
extension AmityUIKit4.ImageDownloadRequestModifier {
  public var onDownloadTaskStarted: (@Sendable (AmityUIKit4.DownloadTask?) -> Swift.Void)? {
    get
  }
}
public struct AnyModifier : AmityUIKit4.ImageDownloadRequestModifier {
  public func modified(for request: Foundation.URLRequest) -> Foundation.URLRequest?
  public init(modify: @escaping @Sendable (Foundation.URLRequest) -> Foundation.URLRequest?)
}
public enum EmptyCommunityFeedViewType {
  case post, image, video
  public static func == (a: AmityUIKit4.EmptyCommunityFeedViewType, b: AmityUIKit4.EmptyCommunityFeedViewType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_Concurrency.MainActor @preconcurrency public struct EmptyCommunityFeedView : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public init(_ type: AmityUIKit4.EmptyCommunityFeedViewType = .post)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s11AmityUIKit422EmptyCommunityFeedViewV4bodyQrvp", 0) __
}
@_Concurrency.MainActor @preconcurrency public struct AmityStoryTargetSelectionPage : AmityUIKit4.AmityPageIdentifiable, SwiftUICore.View {
  @SwiftUICore.EnvironmentObject @_projectedValueProperty($host) @_Concurrency.MainActor @preconcurrency public var host: AmityUIKit4.AmitySwiftUIHostWrapper {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var $host: SwiftUICore.EnvironmentObject<AmityUIKit4.AmitySwiftUIHostWrapper>.Wrapper {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var id: AmityUIKit4.PageId {
    get
  }
  @_Concurrency.MainActor @preconcurrency public init()
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s11AmityUIKit40A24StoryTargetSelectionPageV4bodyQrvp", 0) __
  public typealias ID = AmityUIKit4.PageId
}
public class AmityUserRelationshipPageViewModel : Foundation.ObservableObject {
  public init(_ userId: Swift.String)
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
open class AmityPostComposerPageBehavior {
  @_hasMissingDesignatedInitializers open class Context {
    final public let page: AmityUIKit4.AmityPostComposerPage
    @objc deinit
  }
  public init()
  @objc deinit
}
open class AmityPostTargetSelectionPageBehavior {
  @_hasMissingDesignatedInitializers open class Context {
    final public let page: AmityUIKit4.AmityPostTargetSelectionPage
    final public let community: AmityUIKit4.AmityCommunityModel?
    @objc deinit
  }
  public init()
  open func goToPostComposerPage(context: AmityUIKit4.AmityPostTargetSelectionPageBehavior.Context)
  @objc deinit
}
@_Concurrency.MainActor @preconcurrency public struct AmitySocialHomeTopNavigationComponent {
  @SwiftUICore.EnvironmentObject @_projectedValueProperty($host) @_Concurrency.MainActor @preconcurrency public var host: AmityUIKit4.AmitySwiftUIHostWrapper {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var $host: SwiftUICore.EnvironmentObject<AmityUIKit4.AmitySwiftUIHostWrapper>.Wrapper {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var pageId: AmityUIKit4.PageId?
  @_Concurrency.MainActor @preconcurrency public var id: AmityUIKit4.ComponentId {
    get
  }
  @_Concurrency.MainActor @preconcurrency public init(pageId: AmityUIKit4.PageId? = nil, selectedTab: AmityUIKit4.AmitySocialHomePageTab = .newsFeed, searchButtonAction: AmityUIKit4.DefaultTapAction? = nil, notificationButtonAction: AmityUIKit4.DefaultTapAction? = nil)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s11AmityUIKit40A32SocialHomeTopNavigationComponentV4bodyQrvp", 0) __
  public typealias ID = AmityUIKit4.ComponentId
}
@_hasMissingDesignatedInitializers public class RemoteConfig {
  public static func setup(apiKey: Swift.String, httpEndpoint: Swift.String)
  @objc deinit
}
@_Concurrency.MainActor @preconcurrency public struct AmityCommunityVideoFeedComponent {
  @_Concurrency.MainActor @preconcurrency public var pageId: AmityUIKit4.PageId?
  @_Concurrency.MainActor @preconcurrency public var id: AmityUIKit4.ComponentId {
    get
  }
  @_Concurrency.MainActor @preconcurrency public init(communityId: Swift.String, communityProfileViewModel: AmityUIKit4.CommunityProfileViewModel? = nil, pageId: AmityUIKit4.PageId? = nil)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s11AmityUIKit40A27CommunityVideoFeedComponentV4bodyQrvp", 0) __
  public typealias ID = AmityUIKit4.ComponentId
}
@_Concurrency.MainActor @preconcurrency public struct AmityLiveChatMessageReceiverView {
  @_Concurrency.MainActor @preconcurrency public var pageId: AmityUIKit4.PageId?
  @_Concurrency.MainActor @preconcurrency public var componentId: AmityUIKit4.ComponentId?
  @_Concurrency.MainActor @preconcurrency public var id: AmityUIKit4.ElementId {
    get
  }
  @_Concurrency.MainActor @preconcurrency public init(message: AmityUIKit4.MessageModel, messageAction: AmityUIKit4.AmityMessageAction, pageId: AmityUIKit4.PageId? = .liveChatPage, componentId: AmityUIKit4.ComponentId? = .messageList)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s11AmityUIKit40A27LiveChatMessageReceiverViewV4bodyQrvp", 0) __
  public typealias ID = AmityUIKit4.ElementId
}
public protocol CacheSerializer : Swift.Sendable {
  func data(with image: AmityUIKit4.KFCrossPlatformImage, original: Foundation.Data?) -> Foundation.Data?
  func image(with data: Foundation.Data, options: AmityUIKit4.KingfisherParsedOptionsInfo) -> AmityUIKit4.KFCrossPlatformImage?
  var originalDataUsed: Swift.Bool { get }
}
extension AmityUIKit4.CacheSerializer {
  public var originalDataUsed: Swift.Bool {
    get
  }
}
public struct DefaultCacheSerializer : AmityUIKit4.CacheSerializer {
  public static let `default`: AmityUIKit4.DefaultCacheSerializer
  public var compressionQuality: CoreFoundation.CGFloat
  public var preferCacheOriginalData: Swift.Bool
  public var originalDataUsed: Swift.Bool {
    get
  }
  public init()
  public func data(with image: AmityUIKit4.KFCrossPlatformImage, original: Foundation.Data?) -> Foundation.Data?
  public func image(with data: Foundation.Data, options: AmityUIKit4.KingfisherParsedOptionsInfo) -> AmityUIKit4.KFCrossPlatformImage?
}
@available(iOS 13, *)
public struct VideoPlayer {
  public enum State {
    case loading
    case playing(totalDuration: Swift.Double)
    case paused(playProgress: Swift.Double, bufferProgress: Swift.Double)
    case error(Foundation.NSError)
  }
  public init(url: Foundation.URL, play: SwiftUICore.Binding<Swift.Bool>, time: SwiftUICore.Binding<CoreMedia.CMTime> = .constant(.zero))
}
@available(iOS 13, *)
extension AmityUIKit4.VideoPlayer {
  public static var preloadByteCount: Swift.Int {
    get
    set
  }
  public static func preload(urls: [Foundation.URL])
  public static func customHTTPHeaderFields(transform: @escaping (Foundation.URL) -> [Swift.String : Swift.String]?)
  public static func calculateCachedSize() -> Swift.UInt
  public static func cleanAllCache()
}
@available(iOS 13, *)
extension AmityUIKit4.VideoPlayer {
  public struct Config {
  }
  public func autoReplay(_ value: Swift.Bool) -> AmityUIKit4.VideoPlayer
  public func mute(_ value: Swift.Bool) -> AmityUIKit4.VideoPlayer
  public func speedRate(_ value: Swift.Float) -> AmityUIKit4.VideoPlayer
  public func contentMode(_ value: UIKit.UIView.ContentMode) -> AmityUIKit4.VideoPlayer
  public func onBufferChanged(_ handler: @escaping (Swift.Double) -> Swift.Void) -> AmityUIKit4.VideoPlayer
  public func onPlayToEndTime(_ handler: @escaping () -> Swift.Void) -> AmityUIKit4.VideoPlayer
  public func onReplay(_ handler: @escaping () -> Swift.Void) -> AmityUIKit4.VideoPlayer
  public func onStateChanged(_ handler: @escaping (AmityUIKit4.VideoPlayer.State) -> Swift.Void) -> AmityUIKit4.VideoPlayer
}
@available(iOS 13, *)
extension AmityUIKit4.VideoPlayer : SwiftUI.UIViewRepresentable {
  @_Concurrency.MainActor @preconcurrency public func makeUIView(context: AmityUIKit4.VideoPlayer.Context) -> AmityUIKit4.VideoPlayerView
  @_Concurrency.MainActor @preconcurrency public func makeCoordinator() -> AmityUIKit4.VideoPlayer.Coordinator
  @_Concurrency.MainActor @preconcurrency public func updateUIView(_ uiView: AmityUIKit4.VideoPlayerView, context: AmityUIKit4.VideoPlayer.Context)
  @_Concurrency.MainActor @preconcurrency public static func dismantleUIView(_ uiView: AmityUIKit4.VideoPlayerView, coordinator: AmityUIKit4.VideoPlayer.Coordinator)
  @objc @_hasMissingDesignatedInitializers public class Coordinator : ObjectiveC.NSObject {
    @objc deinit
  }
  @available(iOS 13, *)
  public typealias Body = Swift.Never
  @available(iOS 13, *)
  public typealias UIViewType = AmityUIKit4.VideoPlayerView
}
@_Concurrency.MainActor public protocol KFOptionSetter {
  @_Concurrency.MainActor var options: AmityUIKit4.KingfisherParsedOptionsInfo { get nonmutating set }
  @_Concurrency.MainActor var onFailureDelegate: AmityUIKit4.Delegate<AmityUIKit4.KingfisherError, Swift.Void> { get }
  @_Concurrency.MainActor var onSuccessDelegate: AmityUIKit4.Delegate<AmityUIKit4.RetrieveImageResult, Swift.Void> { get }
  @_Concurrency.MainActor var onProgressDelegate: AmityUIKit4.Delegate<(Swift.Int64, Swift.Int64), Swift.Void> { get }
  @_Concurrency.MainActor var delegateObserver: Swift.AnyObject { get }
}
extension AmityUIKit4.KF.Builder : AmityUIKit4.KFOptionSetter {
  @_Concurrency.MainActor public var delegateObserver: Swift.AnyObject {
    get
  }
}
extension AmityUIKit4.KFOptionSetter {
  @_Concurrency.MainActor public func onProgress(_ block: AmityUIKit4.DownloadProgressBlock?) -> Self
  @_Concurrency.MainActor public func onSuccess(_ block: ((AmityUIKit4.RetrieveImageResult) -> Swift.Void)?) -> Self
  @_Concurrency.MainActor public func onFailure(_ block: ((AmityUIKit4.KingfisherError) -> Swift.Void)?) -> Self
}
extension AmityUIKit4.KFOptionSetter {
  @_Concurrency.MainActor public func targetCache(_ cache: AmityUIKit4.ImageCache) -> Self
  @_Concurrency.MainActor public func originalCache(_ cache: AmityUIKit4.ImageCache) -> Self
  @_Concurrency.MainActor public func downloader(_ downloader: AmityUIKit4.ImageDownloader) -> Self
  @_Concurrency.MainActor public func downloadPriority(_ priority: Swift.Float) -> Self
  @_Concurrency.MainActor public func forceRefresh(_ enabled: Swift.Bool = true) -> Self
  @_Concurrency.MainActor public func fromMemoryCacheOrRefresh(_ enabled: Swift.Bool = true) -> Self
  @_Concurrency.MainActor public func cacheMemoryOnly(_ enabled: Swift.Bool = true) -> Self
  @_Concurrency.MainActor public func waitForCache(_ enabled: Swift.Bool = true) -> Self
  @_Concurrency.MainActor public func onlyFromCache(_ enabled: Swift.Bool = true) -> Self
  @_Concurrency.MainActor public func backgroundDecode(_ enabled: Swift.Bool = true) -> Self
  @_Concurrency.MainActor public func callbackQueue(_ queue: AmityUIKit4.CallbackQueue) -> Self
  @_Concurrency.MainActor public func scaleFactor(_ factor: CoreFoundation.CGFloat) -> Self
  @_Concurrency.MainActor public func cacheOriginalImage(_ enabled: Swift.Bool = true) -> Self
  @_Concurrency.MainActor public func diskStoreWriteOptions(_ writingOptions: Foundation.Data.WritingOptions) -> Self
  @_Concurrency.MainActor public func loadDiskFileSynchronously(_ enabled: Swift.Bool = true) -> Self
  @_Concurrency.MainActor public func processingQueue(_ queue: AmityUIKit4.CallbackQueue?) -> Self
  @_Concurrency.MainActor public func alternativeSources(_ sources: [AmityUIKit4.Source]?) -> Self
  @_Concurrency.MainActor public func retry(_ strategy: (any AmityUIKit4.RetryStrategy)?) -> Self
  @_Concurrency.MainActor public func retry(maxCount: Swift.Int, interval: AmityUIKit4.DelayRetryStrategy.Interval = .seconds(3)) -> Self
  @_Concurrency.MainActor public func lowDataModeSource(_ source: AmityUIKit4.Source?) -> Self
  @_Concurrency.MainActor public func forceTransition(_ enabled: Swift.Bool = true) -> Self
  @_Concurrency.MainActor public func onFailureImage(_ image: AmityUIKit4.KFCrossPlatformImage?) -> Self
}
extension AmityUIKit4.KFOptionSetter {
  @_Concurrency.MainActor public func requestModifier(_ modifier: any AmityUIKit4.AsyncImageDownloadRequestModifier) -> Self
  @_Concurrency.MainActor public func requestModifier(_ modifyBlock: @escaping @Sendable (inout Foundation.URLRequest) -> Swift.Void) -> Self
}
extension AmityUIKit4.KFOptionSetter {
  @_Concurrency.MainActor public func redirectHandler(_ handler: any AmityUIKit4.ImageDownloadRedirectHandler) -> Self
  @_Concurrency.MainActor public func redirectHandler(_ block: @escaping @Sendable (AmityUIKit4.KF.RedirectPayload) -> Swift.Void) -> Self
}
extension AmityUIKit4.KFOptionSetter {
  @_Concurrency.MainActor public func setProcessor(_ processor: any AmityUIKit4.ImageProcessor) -> Self
  @_Concurrency.MainActor public func setProcessors(_ processors: [any AmityUIKit4.ImageProcessor]) -> Self
  @_Concurrency.MainActor public func appendProcessor(_ processor: any AmityUIKit4.ImageProcessor) -> Self
  @_Concurrency.MainActor public func roundCorner(radius: AmityUIKit4.Radius, targetSize: CoreFoundation.CGSize? = nil, roundingCorners corners: AmityUIKit4.RectCorner = .all, backgroundColor: AmityUIKit4.KFCrossPlatformColor? = nil) -> Self
  @_Concurrency.MainActor public func blur(radius: CoreFoundation.CGFloat) -> Self
  @_Concurrency.MainActor public func overlay(color: AmityUIKit4.KFCrossPlatformColor, fraction: CoreFoundation.CGFloat = 0.5) -> Self
  @_Concurrency.MainActor public func tint(color: AmityUIKit4.KFCrossPlatformColor) -> Self
  @_Concurrency.MainActor public func blackWhite() -> Self
  @_Concurrency.MainActor public func cropping(size: CoreFoundation.CGSize, anchor: CoreFoundation.CGPoint = .init(x: 0.5, y: 0.5)) -> Self
  @_Concurrency.MainActor public func downsampling(size: CoreFoundation.CGSize) -> Self
  @_Concurrency.MainActor public func resizing(referenceSize: CoreFoundation.CGSize, mode: AmityUIKit4.KingfisherContentMode = .none) -> Self
}
extension AmityUIKit4.KFOptionSetter {
  @_Concurrency.MainActor public func serialize(by cacheSerializer: any AmityUIKit4.CacheSerializer) -> Self
  @_Concurrency.MainActor public func serialize(as format: AmityUIKit4.ImageFormat, jpegCompressionQuality: CoreFoundation.CGFloat? = nil) -> Self
}
extension AmityUIKit4.KFOptionSetter {
  @_Concurrency.MainActor public func imageModifier(_ modifier: (any AmityUIKit4.ImageModifier)?) -> Self
  @_Concurrency.MainActor public func imageModifier(_ block: @escaping @Sendable (inout AmityUIKit4.KFCrossPlatformImage) throws -> Swift.Void) -> Self
}
extension AmityUIKit4.KFOptionSetter {
  @_Concurrency.MainActor public func memoryCacheExpiration(_ expiration: AmityUIKit4.StorageExpiration?) -> Self
  @_Concurrency.MainActor public func memoryCacheAccessExtending(_ extending: AmityUIKit4.ExpirationExtending) -> Self
  @_Concurrency.MainActor public func diskCacheExpiration(_ expiration: AmityUIKit4.StorageExpiration?) -> Self
  @_Concurrency.MainActor public func diskCacheAccessExtending(_ extending: AmityUIKit4.ExpirationExtending) -> Self
}
@_Concurrency.MainActor @preconcurrency public struct AmityNotificationTrayPage : AmityUIKit4.AmityPageView {
  @SwiftUICore.EnvironmentObject @_projectedValueProperty($host) @_Concurrency.MainActor @preconcurrency public var host: AmityUIKit4.AmitySwiftUIHostWrapper {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var $host: SwiftUICore.EnvironmentObject<AmityUIKit4.AmitySwiftUIHostWrapper>.Wrapper {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var id: AmityUIKit4.PageId {
    get
  }
  @_Concurrency.MainActor @preconcurrency public init()
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s11AmityUIKit40A20NotificationTrayPageV4bodyQrvp", 0) __
  public typealias ID = AmityUIKit4.PageId
}
public enum ImageProcessItem : Swift.Sendable {
  case image(AmityUIKit4.KFCrossPlatformImage)
  case data(Foundation.Data)
}
public protocol ImageProcessor : Swift.Sendable {
  var identifier: Swift.String { get }
  func process(item: AmityUIKit4.ImageProcessItem, options: AmityUIKit4.KingfisherParsedOptionsInfo) -> AmityUIKit4.KFCrossPlatformImage?
}
extension AmityUIKit4.ImageProcessor {
  public func append(another: any AmityUIKit4.ImageProcessor) -> any AmityUIKit4.ImageProcessor
}
public struct DefaultImageProcessor : AmityUIKit4.ImageProcessor {
  public static let `default`: AmityUIKit4.DefaultImageProcessor
  public let identifier: Swift.String
  public init()
  public func process(item: AmityUIKit4.ImageProcessItem, options: AmityUIKit4.KingfisherParsedOptionsInfo) -> AmityUIKit4.KFCrossPlatformImage?
}
public struct RectCorner : Swift.OptionSet, Swift.Sendable {
  public let rawValue: Swift.Int
  public static let topLeft: AmityUIKit4.RectCorner
  public static let topRight: AmityUIKit4.RectCorner
  public static let bottomLeft: AmityUIKit4.RectCorner
  public static let bottomRight: AmityUIKit4.RectCorner
  public static let all: AmityUIKit4.RectCorner
  public init(rawValue: Swift.Int)
  public typealias ArrayLiteralElement = AmityUIKit4.RectCorner
  public typealias Element = AmityUIKit4.RectCorner
  public typealias RawValue = Swift.Int
}
public struct BlendImageProcessor : AmityUIKit4.ImageProcessor {
  public let identifier: Swift.String
  public let blendMode: CoreGraphics.CGBlendMode
  public let alpha: CoreFoundation.CGFloat
  public let backgroundColor: AmityUIKit4.KFCrossPlatformColor?
  public init(blendMode: CoreGraphics.CGBlendMode, alpha: CoreFoundation.CGFloat = 1.0, backgroundColor: AmityUIKit4.KFCrossPlatformColor? = nil)
  public func process(item: AmityUIKit4.ImageProcessItem, options: AmityUIKit4.KingfisherParsedOptionsInfo) -> AmityUIKit4.KFCrossPlatformImage?
}
public enum Radius : Swift.Sendable {
  case widthFraction(CoreFoundation.CGFloat)
  case heightFraction(CoreFoundation.CGFloat)
  case point(CoreFoundation.CGFloat)
  public func compute(with size: CoreFoundation.CGSize) -> CoreFoundation.CGFloat
}
public struct RoundCornerImageProcessor : AmityUIKit4.ImageProcessor {
  public let identifier: Swift.String
  public let radius: AmityUIKit4.Radius
  public let roundingCorners: AmityUIKit4.RectCorner
  public let targetSize: CoreFoundation.CGSize?
  public let backgroundColor: AmityUIKit4.KFCrossPlatformColor?
  public init(cornerRadius: CoreFoundation.CGFloat, targetSize: CoreFoundation.CGSize? = nil, roundingCorners corners: AmityUIKit4.RectCorner = .all, backgroundColor: AmityUIKit4.KFCrossPlatformColor? = nil)
  public init(radius: AmityUIKit4.Radius, targetSize: CoreFoundation.CGSize? = nil, roundingCorners corners: AmityUIKit4.RectCorner = .all, backgroundColor: AmityUIKit4.KFCrossPlatformColor? = nil)
  public func process(item: AmityUIKit4.ImageProcessItem, options: AmityUIKit4.KingfisherParsedOptionsInfo) -> AmityUIKit4.KFCrossPlatformImage?
}
public struct Border : Swift.Sendable {
  public var color: AmityUIKit4.KFCrossPlatformColor
  public var lineWidth: CoreFoundation.CGFloat
  public var radius: AmityUIKit4.Radius
  public var roundingCorners: AmityUIKit4.RectCorner
  public init(color: AmityUIKit4.KFCrossPlatformColor = .black, lineWidth: CoreFoundation.CGFloat = 4, radius: AmityUIKit4.Radius = .point(0), roundingCorners: AmityUIKit4.RectCorner = .all)
}
public struct BorderImageProcessor : AmityUIKit4.ImageProcessor {
  public var identifier: Swift.String {
    get
  }
  public let border: AmityUIKit4.Border
  public init(border: AmityUIKit4.Border)
  public func process(item: AmityUIKit4.ImageProcessItem, options: AmityUIKit4.KingfisherParsedOptionsInfo) -> AmityUIKit4.KFCrossPlatformImage?
}
public enum KingfisherContentMode : Swift.Sendable {
  case none
  case aspectFit
  case aspectFill
  public static func == (a: AmityUIKit4.KingfisherContentMode, b: AmityUIKit4.KingfisherContentMode) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct ResizingImageProcessor : AmityUIKit4.ImageProcessor {
  public let identifier: Swift.String
  public let referenceSize: CoreFoundation.CGSize
  public let targetContentMode: AmityUIKit4.KingfisherContentMode
  public init(referenceSize: CoreFoundation.CGSize, mode: AmityUIKit4.KingfisherContentMode = .none)
  public func process(item: AmityUIKit4.ImageProcessItem, options: AmityUIKit4.KingfisherParsedOptionsInfo) -> AmityUIKit4.KFCrossPlatformImage?
}
public struct BlurImageProcessor : AmityUIKit4.ImageProcessor {
  public let identifier: Swift.String
  public let blurRadius: CoreFoundation.CGFloat
  public init(blurRadius: CoreFoundation.CGFloat)
  public func process(item: AmityUIKit4.ImageProcessItem, options: AmityUIKit4.KingfisherParsedOptionsInfo) -> AmityUIKit4.KFCrossPlatformImage?
}
public struct OverlayImageProcessor : AmityUIKit4.ImageProcessor {
  public let identifier: Swift.String
  public let overlay: AmityUIKit4.KFCrossPlatformColor
  public let fraction: CoreFoundation.CGFloat
  public init(overlay: AmityUIKit4.KFCrossPlatformColor, fraction: CoreFoundation.CGFloat = 0.5)
  public func process(item: AmityUIKit4.ImageProcessItem, options: AmityUIKit4.KingfisherParsedOptionsInfo) -> AmityUIKit4.KFCrossPlatformImage?
}
public struct TintImageProcessor : AmityUIKit4.ImageProcessor {
  public let identifier: Swift.String
  public let tint: AmityUIKit4.KFCrossPlatformColor
  public init(tint: AmityUIKit4.KFCrossPlatformColor)
  public func process(item: AmityUIKit4.ImageProcessItem, options: AmityUIKit4.KingfisherParsedOptionsInfo) -> AmityUIKit4.KFCrossPlatformImage?
}
public struct ColorControlsProcessor : AmityUIKit4.ImageProcessor {
  public let identifier: Swift.String
  public let brightness: CoreFoundation.CGFloat
  public let contrast: CoreFoundation.CGFloat
  public let saturation: CoreFoundation.CGFloat
  public let inputEV: CoreFoundation.CGFloat
  public init(brightness: CoreFoundation.CGFloat, contrast: CoreFoundation.CGFloat, saturation: CoreFoundation.CGFloat, inputEV: CoreFoundation.CGFloat)
  public func process(item: AmityUIKit4.ImageProcessItem, options: AmityUIKit4.KingfisherParsedOptionsInfo) -> AmityUIKit4.KFCrossPlatformImage?
}
public struct BlackWhiteProcessor : AmityUIKit4.ImageProcessor {
  public let identifier: Swift.String
  public init()
  public func process(item: AmityUIKit4.ImageProcessItem, options: AmityUIKit4.KingfisherParsedOptionsInfo) -> AmityUIKit4.KFCrossPlatformImage?
}
public struct CroppingImageProcessor : AmityUIKit4.ImageProcessor {
  public let identifier: Swift.String
  public let size: CoreFoundation.CGSize
  public let anchor: CoreFoundation.CGPoint
  public init(size: CoreFoundation.CGSize, anchor: CoreFoundation.CGPoint = CGPoint(x: 0.5, y: 0.5))
  public func process(item: AmityUIKit4.ImageProcessItem, options: AmityUIKit4.KingfisherParsedOptionsInfo) -> AmityUIKit4.KFCrossPlatformImage?
}
public struct DownsamplingImageProcessor : AmityUIKit4.ImageProcessor {
  public let size: CoreFoundation.CGSize
  public let identifier: Swift.String
  public init(size: CoreFoundation.CGSize)
  public func process(item: AmityUIKit4.ImageProcessItem, options: AmityUIKit4.KingfisherParsedOptionsInfo) -> AmityUIKit4.KFCrossPlatformImage?
}
infix operator |> : AdditionPrecedence
public func |> (left: any AmityUIKit4.ImageProcessor, right: any AmityUIKit4.ImageProcessor) -> any AmityUIKit4.ImageProcessor
@_Concurrency.MainActor @preconcurrency public struct AmityCommunityPostPermissionPage : AmityUIKit4.AmityPageView {
  @SwiftUICore.EnvironmentObject @_projectedValueProperty($host) @_Concurrency.MainActor @preconcurrency public var host: AmityUIKit4.AmitySwiftUIHostWrapper {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var $host: SwiftUICore.EnvironmentObject<AmityUIKit4.AmitySwiftUIHostWrapper>.Wrapper {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var id: AmityUIKit4.PageId {
    get
  }
  @_Concurrency.MainActor @preconcurrency public init(community: AmitySDK.AmityCommunity)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s11AmityUIKit40A27CommunityPostPermissionPageV4bodyQrvp", 0) __
  public typealias ID = AmityUIKit4.PageId
}
@_inheritsConvenienceInitializers @objc(KFSessionDelegate) open class SessionDelegate : ObjectiveC.NSObject, @unchecked Swift.Sendable {
  @objc override dynamic public init()
  @objc deinit
}
extension AmityUIKit4.SessionDelegate : Foundation.URLSessionDataDelegate {
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, didReceive response: Foundation.URLResponse) async -> Foundation.URLSession.ResponseDisposition
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, didReceive data: Foundation.Data)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didCompleteWithError error: (any Swift.Error)?)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, didReceive challenge: Foundation.URLAuthenticationChallenge) async -> (Foundation.URLSession.AuthChallengeDisposition, Foundation.URLCredential?)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didReceive challenge: Foundation.URLAuthenticationChallenge) async -> (Foundation.URLSession.AuthChallengeDisposition, Foundation.URLCredential?)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, willPerformHTTPRedirection response: Foundation.HTTPURLResponse, newRequest request: Foundation.URLRequest) async -> Foundation.URLRequest?
}
@_Concurrency.MainActor @preconcurrency public struct AmityCommunityCategoriesComponent {
  @_Concurrency.MainActor @preconcurrency public var pageId: AmityUIKit4.PageId?
  @_Concurrency.MainActor @preconcurrency public var id: AmityUIKit4.ComponentId {
    get
  }
  @SwiftUICore.EnvironmentObject @_projectedValueProperty($host) @_Concurrency.MainActor @preconcurrency public var host: AmityUIKit4.AmitySwiftUIHostWrapper {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var $host: SwiftUICore.EnvironmentObject<AmityUIKit4.AmitySwiftUIHostWrapper>.Wrapper {
    get
  }
  @_Concurrency.MainActor @preconcurrency public init(pageId: AmityUIKit4.PageId? = .socialHomePage)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s11AmityUIKit40A28CommunityCategoriesComponentV4bodyQrvp", 0) __
  public typealias ID = AmityUIKit4.ComponentId
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension AmityUIKit4.KFImage {
  @_hasMissingDesignatedInitializers public class Context<HoldingView> : @unchecked Swift.Sendable where HoldingView : AmityUIKit4.KFImageHoldingView {
    @objc deinit
  }
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension AmityUIKit4.KFImage.Context : Swift.Hashable {
  public static func == (lhs: AmityUIKit4.KFImage.Context<HoldingView>, rhs: AmityUIKit4.KFImage.Context<HoldingView>) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension AmityUIKit4.KFAnimatedImage {
  public typealias Context = AmityUIKit4.KFImage.Context
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_Concurrency.MainActor @preconcurrency public struct Pager<Element, ID, PageView> : SwiftUICore.View where Element : Swift.Equatable, ID : Swift.Hashable, PageView : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public init<Data>(page: AmityUIKit4.Page, data: Data, id: Swift.KeyPath<Element, ID>, @SwiftUICore.ViewBuilder content: @escaping (Element) -> PageView) where Element == Data.Element, Data : Swift.RandomAccessCollection, Data.Index == Swift.Int
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = @_opaqueReturnTypeOf("$s11AmityUIKit45PagerV4bodyQrvp", 0) __<Element, ID, PageView>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension AmityUIKit4.Pager where Element : Swift.Identifiable, ID == Element.ID {
  @_Concurrency.MainActor @preconcurrency public init<Data>(page: AmityUIKit4.Page, data: Data, @SwiftUICore.ViewBuilder content: @escaping (Element) -> PageView) where Element == Data.Element, Data : Swift.RandomAccessCollection, Data.Index == Swift.Int
}
public protocol AnimatedImageViewDelegate : AnyObject {
  func animatedImageView(_ imageView: AmityUIKit4.AnimatedImageView, didPlayAnimationLoops count: Swift.UInt)
  func animatedImageViewDidFinishAnimating(_ imageView: AmityUIKit4.AnimatedImageView)
}
extension AmityUIKit4.AnimatedImageViewDelegate {
  public func animatedImageView(_ imageView: AmityUIKit4.AnimatedImageView, didPlayAnimationLoops count: Swift.UInt)
  public func animatedImageViewDidFinishAnimating(_ imageView: AmityUIKit4.AnimatedImageView)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency open class AnimatedImageView : AmityUIKit4.KFCrossPlatformImageView {
  public enum RepeatCount : Swift.Equatable {
    case once
    case finite(count: Swift.UInt)
    case infinite
    public static func == (lhs: AmityUIKit4.AnimatedImageView.RepeatCount, rhs: AmityUIKit4.AnimatedImageView.RepeatCount) -> Swift.Bool
  }
  @_Concurrency.MainActor @preconcurrency public var autoPlayAnimatedImage: Swift.Bool
  @_Concurrency.MainActor @preconcurrency public var framePreloadCount: Swift.Int
  @_Concurrency.MainActor @preconcurrency public var needsPrescaling: Swift.Bool
  @available(*, deprecated, message: "    This property does not perform as declared and may lead to performance degradation.\n    It is currently obsolete and scheduled for removal in a future version.")
  @_Concurrency.MainActor @preconcurrency public var backgroundDecode: Swift.Bool
  @_Concurrency.MainActor @preconcurrency public var runLoopMode: Foundation.RunLoop.Mode {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var repeatCount: AmityUIKit4.AnimatedImageView.RepeatCount {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency weak public var delegate: (any AmityUIKit4.AnimatedImageViewDelegate)?
  @_Concurrency.MainActor @preconcurrency public var animator: AmityUIKit4.AnimatedImageView.Animator? {
    get
  }
  @_Concurrency.MainActor @objc override dynamic open var image: AmityUIKit4.KFCrossPlatformImage? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open var isHighlighted: Swift.Bool {
    @objc get
    @objc set
  }
  @objc deinit
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open var isAnimating: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func startAnimating()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func stopAnimating()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func display(_ layer: QuartzCore.CALayer)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func didMoveToWindow()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func didMoveToSuperview()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(image: UIKit.UIImage?)
  @available(iOS 3.0, *)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(image: UIKit.UIImage?, highlightedImage: UIKit.UIImage?)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
}
extension AmityUIKit4.AnimatedImageView {
  @_hasMissingDesignatedInitializers public class Animator : @unchecked Swift.Sendable {
    final public let maxFrameCount: Swift.Int
    public var currentFrameImage: AmityUIKit4.KFCrossPlatformImage? {
      get
    }
    public var currentFrameDuration: Foundation.TimeInterval {
      get
    }
    public var currentFrameIndex: Swift.Int {
      get
    }
    public var isLastFrame: Swift.Bool {
      get
    }
    public func frame(at index: Swift.Int) -> AmityUIKit4.KFCrossPlatformImage?
    public func duration(at index: Swift.Int) -> Foundation.TimeInterval
    @objc deinit
  }
}
@_Concurrency.MainActor @preconcurrency public struct RecordedStreamPlayerView : SwiftUI.UIViewControllerRepresentable {
  @_Concurrency.MainActor @preconcurrency public init(livestream: AmitySDK.AmityStream, client: AmitySDK.AmityClient)
  @_Concurrency.MainActor @preconcurrency public func makeUIViewController(context: AmityUIKit4.RecordedStreamPlayerView.Context) -> AVKit.AVPlayerViewController
  @_Concurrency.MainActor @preconcurrency public func updateUIViewController(_ uiViewController: AVKit.AVPlayerViewController, context: AmityUIKit4.RecordedStreamPlayerView.Context)
  public typealias Body = Swift.Never
  public typealias Coordinator = Swift.Void
  public typealias UIViewControllerType = AVKit.AVPlayerViewController
}
@_Concurrency.MainActor @preconcurrency public struct LivestreamPlayerView : SwiftUI.UIViewRepresentable {
  @_Concurrency.MainActor @preconcurrency public init(stream: AmitySDK.AmityStream?, client: AmitySDK.AmityClient, isPlaying: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency public func makeUIView(context: AmityUIKit4.LivestreamPlayerView.Context) -> UIKit.UIView
  @_Concurrency.MainActor @preconcurrency public func updateUIView(_ uiView: UIKit.UIView, context: AmityUIKit4.LivestreamPlayerView.Context)
  @_hasMissingDesignatedInitializers public class Coordinator {
    @objc deinit
  }
  @_Concurrency.MainActor @preconcurrency public func makeCoordinator() -> AmityUIKit4.LivestreamPlayerView.Coordinator
  public typealias Body = Swift.Never
  public typealias UIViewType = UIKit.UIView
}
extension AmityUIKit4.DownloadManager {
  public enum DownloadResult {
    case data(_: Foundation.Data)
    case file(_: Swift.String)
  }
}
public enum DownloadInfo {
  case progress(_: Swift.Float?)
  case completion(_: AmityUIKit4.DownloadManager.DownloadResult)
}
extension AmityUIKit4.DownloadManager.DownloadResult : Swift.Hashable {
  public static func == (a: AmityUIKit4.DownloadManager.DownloadResult, b: AmityUIKit4.DownloadManager.DownloadResult) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public typealias DownloadError = Swift.Error
public typealias DownloadReceiveResponse = (_ download: AmityUIKit4.Download) -> Swift.Void
public typealias DownloadReceiveData = (_ download: AmityUIKit4.Download, _ data: Foundation.Data) -> Swift.Void
public typealias DownloadReportProgress = (_ download: AmityUIKit4.Download, _ progress: Swift.Float?) -> Swift.Void
public typealias DownloadCompletion = (_ download: AmityUIKit4.Download, _ result: Swift.Result<AmityUIKit4.DownloadManager.DownloadResult, any Swift.Error>) -> Swift.Void
public enum ImageFormat : Swift.Sendable {
  case unknown
  case PNG
  case JPEG
  case GIF
  public enum JPEGMarker {
    case SOF0
    case SOF2
    case DHT
    case DQT
    case DRI
    case SOS
    case RSTn(Swift.UInt8)
    case APPn
    case COM
    case EOI
  }
  public static func == (a: AmityUIKit4.ImageFormat, b: AmityUIKit4.ImageFormat) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension Foundation.Data : AmityUIKit4.KingfisherCompatibleValue {
}
extension AmityUIKit4.KingfisherWrapper where Base == Foundation.Data {
  public var imageFormat: AmityUIKit4.ImageFormat {
    get
  }
  public func contains(jpeg marker: AmityUIKit4.ImageFormat.JPEGMarker) -> Swift.Bool
}
public enum URLImageError : Swift.Error {
  case decode
  public static func == (a: AmityUIKit4.URLImageError, b: AmityUIKit4.URLImageError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public let log_default: Swift.Int
public let log_normal: Swift.Int
public let log_detailed: Swift.Int
@inline(__always) public func log_info(_ object: Any?, _ function: Swift.String?, _ message: Swift.String)
public func log_debug(_ object: Any?, _ function: Swift.String?, _ message: @autoclosure () -> Swift.String?, detail: Swift.Int = log_default)
@inline(__always) public func log_error(_ object: Any?, _ function: Swift.String?, _ message: Swift.String)
@inline(__always) public func log_fault(_ object: Any?, _ function: Swift.String?, _ message: Swift.String)
@_hasMissingDesignatedInitializers public class ReactionOverlayController {
  public static func showOverlay<Content>(message: AmityUIKit4.MessageModel, messageAction: AmityUIKit4.AmityMessageAction, nameSpace: SwiftUICore.Namespace.ID, messageFrame: CoreFoundation.CGRect, content: @escaping () -> Content) where Content : SwiftUICore.View
  @objc deinit
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_Concurrency.MainActor public struct KFImage : AmityUIKit4.KFImageProtocol {
  @_Concurrency.MainActor public var context: AmityUIKit4.KFImage.Context<SwiftUICore.Image>
  @_Concurrency.MainActor public init(context: AmityUIKit4.KFImage.Context<SwiftUICore.Image>)
  @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
  public typealias Body = @_opaqueReturnTypeOf("$s11AmityUIKit415KFImageProtocolPAAE4bodyQrvp", 0) __<AmityUIKit4.KFImage>
  @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
  public typealias HoldingView = SwiftUICore.Image
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUICore.Image : AmityUIKit4.KFImageHoldingView {
  public typealias RenderingView = SwiftUICore.Image
  @_Concurrency.MainActor public static func created(from image: AmityUIKit4.KFCrossPlatformImage?, context: AmityUIKit4.KFImage.Context<SwiftUICore.Image>) -> SwiftUICore.Image
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension AmityUIKit4.KFImage {
  @_Concurrency.MainActor public func resizable(capInsets: SwiftUICore.EdgeInsets = EdgeInsets(), resizingMode: SwiftUICore.Image.ResizingMode = .stretch) -> AmityUIKit4.KFImage
  @_Concurrency.MainActor public func renderingMode(_ renderingMode: SwiftUICore.Image.TemplateRenderingMode?) -> AmityUIKit4.KFImage
  @_Concurrency.MainActor public func interpolation(_ interpolation: SwiftUICore.Image.Interpolation) -> AmityUIKit4.KFImage
  @_Concurrency.MainActor public func antialiased(_ isAntialiased: Swift.Bool) -> AmityUIKit4.KFImage
  @available(*, deprecated, message: "This is not necessary anymore since `@StateObject` is used. It does nothing now and please just remove it.")
  @_Concurrency.MainActor public func loadImmediately(_ start: Swift.Bool = true) -> AmityUIKit4.KFImage
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_Concurrency.MainActor public struct KFAnimatedImage : AmityUIKit4.KFImageProtocol {
  public typealias HoldingView = AmityUIKit4.KFAnimatedImageViewRepresenter
  @_Concurrency.MainActor public var context: AmityUIKit4.KFImage.Context<AmityUIKit4.KFAnimatedImage.HoldingView>
  @_Concurrency.MainActor public init(context: AmityUIKit4.KFImage.Context<AmityUIKit4.KFAnimatedImage.HoldingView>)
  @_Concurrency.MainActor public func configure(_ block: @escaping (AmityUIKit4.KFAnimatedImage.HoldingView.RenderingView) -> Swift.Void) -> AmityUIKit4.KFAnimatedImage
  @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
  public typealias Body = @_opaqueReturnTypeOf("$s11AmityUIKit415KFImageProtocolPAAE4bodyQrvp", 0) __<AmityUIKit4.KFAnimatedImage>
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_Concurrency.MainActor @preconcurrency public struct KFAnimatedImageViewRepresenter : AmityUIKit4.KFImageHoldingView {
  public typealias RenderingView = AmityUIKit4.AnimatedImageView
  @_Concurrency.MainActor public static func created(from image: AmityUIKit4.KFCrossPlatformImage?, context: AmityUIKit4.KFImage.Context<AmityUIKit4.KFAnimatedImageViewRepresenter>) -> AmityUIKit4.KFAnimatedImageViewRepresenter
  @_Concurrency.MainActor @preconcurrency public func makeUIView(context: AmityUIKit4.KFAnimatedImageViewRepresenter.Context) -> AmityUIKit4.AnimatedImageView
  @_Concurrency.MainActor @preconcurrency public func updateUIView(_ uiView: AmityUIKit4.AnimatedImageView, context: AmityUIKit4.KFAnimatedImageViewRepresenter.Context)
  @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
  public typealias Body = Swift.Never
  @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
  public typealias Coordinator = Swift.Void
  @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
  public typealias UIViewType = AmityUIKit4.AnimatedImageView
}
@_hasMissingDesignatedInitializers public class AmityMessageAction {
  public typealias MessageAction = (AmityUIKit4.MessageModel) -> Swift.Void
  public init(onCopy: AmityUIKit4.AmityMessageAction.MessageAction?, onReply: AmityUIKit4.AmityMessageAction.MessageAction?, onDelete: AmityUIKit4.AmityMessageAction.MessageAction?, onReport: AmityUIKit4.AmityMessageAction.MessageAction?, onUnReport: AmityUIKit4.AmityMessageAction.MessageAction?)
  @objc deinit
}
public struct AmityCommunityModel : Swift.Identifiable {
  public var id: Swift.String {
    get
  }
  public var object: AmitySDK.AmityCommunity
  public typealias ID = Swift.String
}
public enum Source : Swift.Sendable {
  public enum Identifier {
    public typealias Value = Swift.UInt
  }
  case network(any AmityUIKit4.Resource)
  case provider(any AmityUIKit4.ImageDataProvider)
  public var cacheKey: Swift.String {
    get
  }
  public var url: Foundation.URL? {
    get
  }
}
extension AmityUIKit4.Source : Swift.Hashable {
  public static func == (lhs: AmityUIKit4.Source, rhs: AmityUIKit4.Source) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum AmityStoryTabComponentType {
  case globalFeed
  case communityFeed(Swift.String)
}
@_Concurrency.MainActor @preconcurrency public struct AmityStoryTabComponent {
  @SwiftUICore.EnvironmentObject @_projectedValueProperty($host) @_Concurrency.MainActor @preconcurrency public var host: AmityUIKit4.AmitySwiftUIHostWrapper {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var $host: SwiftUICore.EnvironmentObject<AmityUIKit4.AmitySwiftUIHostWrapper>.Wrapper {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var pageId: AmityUIKit4.PageId?
  @_Concurrency.MainActor @preconcurrency public var id: AmityUIKit4.ComponentId {
    get
  }
  @_Concurrency.MainActor @preconcurrency public init(type: AmityUIKit4.AmityStoryTabComponentType, pageId: AmityUIKit4.PageId? = nil)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s11AmityUIKit40A17StoryTabComponentV4bodyQrvp", 0) __
  public typealias ID = AmityUIKit4.ComponentId
}
@_Concurrency.MainActor @preconcurrency public struct AmityCommunityStoriesNotificationSettingPage : AmityUIKit4.AmityPageView {
  @SwiftUICore.EnvironmentObject @_projectedValueProperty($host) @_Concurrency.MainActor @preconcurrency public var host: AmityUIKit4.AmitySwiftUIHostWrapper {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var $host: SwiftUICore.EnvironmentObject<AmityUIKit4.AmitySwiftUIHostWrapper>.Wrapper {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var id: AmityUIKit4.PageId {
    get
  }
  @_Concurrency.MainActor @preconcurrency public init(community: AmitySDK.AmityCommunity)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s11AmityUIKit40A39CommunityStoriesNotificationSettingPageV4bodyQrvp", 0) __
  public typealias ID = AmityUIKit4.PageId
}
@available(macOS 11.0, iOS 14.0, tvOS 14.0, watchOS 7.0, *)
@_Concurrency.MainActor @preconcurrency public struct URLImage<Empty, InProgress, Failure, Content> : SwiftUICore.View where Empty : SwiftUICore.View, InProgress : SwiftUICore.View, Failure : SwiftUICore.View, Content : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
  public typealias Body = @_opaqueReturnTypeOf("$s11AmityUIKit48URLImageV4bodyQrvp", 0) __<Empty, InProgress, Failure, Content>
}
@available(macOS 11.0, iOS 14.0, tvOS 14.0, watchOS 7.0, *)
extension AmityUIKit4.URLImage {
  @_Concurrency.MainActor @preconcurrency public init(_ url: Foundation.URL, identifier: Swift.String? = nil, @SwiftUICore.ViewBuilder empty: @escaping () -> Empty, @SwiftUICore.ViewBuilder inProgress: @escaping (_ progress: Swift.Float?) -> InProgress, @SwiftUICore.ViewBuilder failure: @escaping (_ error: any Swift.Error, _ retry: @escaping () -> Swift.Void) -> Failure, @SwiftUICore.ViewBuilder content: @escaping (_ image: SwiftUICore.Image) -> Content)
  @_Concurrency.MainActor @preconcurrency public init(_ url: Foundation.URL, identifier: Swift.String? = nil, @SwiftUICore.ViewBuilder empty: @escaping () -> Empty, @SwiftUICore.ViewBuilder inProgress: @escaping (_ progress: Swift.Float?) -> InProgress, @SwiftUICore.ViewBuilder failure: @escaping (_ error: any Swift.Error, _ retry: @escaping () -> Swift.Void) -> Failure, @SwiftUICore.ViewBuilder content: @escaping (_ image: SwiftUICore.Image, _ info: AmityUIKit4.ImageInfo) -> Content)
}
@available(macOS 11.0, iOS 14.0, tvOS 14.0, watchOS 7.0, *)
extension AmityUIKit4.URLImage where Empty == SwiftUICore.EmptyView {
  @_Concurrency.MainActor @preconcurrency public init(_ url: Foundation.URL, identifier: Swift.String? = nil, @SwiftUICore.ViewBuilder inProgress: @escaping (_ progress: Swift.Float?) -> InProgress, @SwiftUICore.ViewBuilder failure: @escaping (_ error: any Swift.Error, _ retry: @escaping () -> Swift.Void) -> Failure, @SwiftUICore.ViewBuilder content: @escaping (_ image: SwiftUICore.Image) -> Content)
  @_Concurrency.MainActor @preconcurrency public init(_ url: Foundation.URL, identifier: Swift.String? = nil, @SwiftUICore.ViewBuilder inProgress: @escaping (_ progress: Swift.Float?) -> InProgress, @SwiftUICore.ViewBuilder failure: @escaping (_ error: any Swift.Error, _ retry: @escaping () -> Swift.Void) -> Failure, @SwiftUICore.ViewBuilder content: @escaping (_ image: SwiftUICore.Image, _ info: AmityUIKit4.ImageInfo) -> Content)
}
@available(macOS 11.0, iOS 14.0, tvOS 14.0, watchOS 7.0, *)
extension AmityUIKit4.URLImage where Empty == SwiftUICore.EmptyView, InProgress == AmityUIKit4.URLImageActivityIndicator {
  @_Concurrency.MainActor @preconcurrency public init(_ url: Foundation.URL, identifier: Swift.String? = nil, @SwiftUICore.ViewBuilder failure: @escaping (_ error: any Swift.Error, _ retry: @escaping () -> Swift.Void) -> Failure, @SwiftUICore.ViewBuilder content: @escaping (_ image: SwiftUICore.Image) -> Content)
  @_Concurrency.MainActor @preconcurrency public init(_ url: Foundation.URL, identifier: Swift.String? = nil, @SwiftUICore.ViewBuilder failure: @escaping (_ error: any Swift.Error, _ retry: @escaping () -> Swift.Void) -> Failure, @SwiftUICore.ViewBuilder content: @escaping (_ image: SwiftUICore.Image, _ info: AmityUIKit4.ImageInfo) -> Content)
}
@available(macOS 11.0, iOS 14.0, tvOS 14.0, watchOS 7.0, *)
extension AmityUIKit4.URLImage where Empty == SwiftUICore.EmptyView, Failure == SwiftUICore.EmptyView {
  @_Concurrency.MainActor @preconcurrency public init(_ url: Foundation.URL, identifier: Swift.String? = nil, @SwiftUICore.ViewBuilder inProgress: @escaping (_ progress: Swift.Float?) -> InProgress, @SwiftUICore.ViewBuilder content: @escaping (_ image: SwiftUICore.Image) -> Content)
  @_Concurrency.MainActor @preconcurrency public init(_ url: Foundation.URL, identifier: Swift.String? = nil, @SwiftUICore.ViewBuilder inProgress: @escaping (_ progress: Swift.Float?) -> InProgress, @SwiftUICore.ViewBuilder content: @escaping (_ image: SwiftUICore.Image, _ info: AmityUIKit4.ImageInfo) -> Content)
}
@available(macOS 11.0, iOS 14.0, tvOS 14.0, watchOS 7.0, *)
extension AmityUIKit4.URLImage where Empty == SwiftUICore.EmptyView, InProgress == AmityUIKit4.URLImageActivityIndicator, Failure == SwiftUICore.EmptyView {
  @_Concurrency.MainActor @preconcurrency public init(_ url: Foundation.URL, identifier: Swift.String? = nil, @SwiftUICore.ViewBuilder content: @escaping (_ image: SwiftUICore.Image) -> Content)
  @_Concurrency.MainActor @preconcurrency public init(_ url: Foundation.URL, identifier: Swift.String? = nil, @SwiftUICore.ViewBuilder content: @escaping (_ image: SwiftUICore.Image, _ info: AmityUIKit4.ImageInfo) -> Content)
}
@available(macOS 11.0, iOS 14.0, tvOS 14.0, watchOS 7.0, *)
public enum URLImagePhase {
  case empty
  case success(SwiftUICore.Image)
  case failure(any Swift.Error)
  public var image: SwiftUICore.Image? {
    get
  }
  public var error: (any Swift.Error)? {
    get
  }
}
@available(macOS 11.0, iOS 14.0, tvOS 14.0, watchOS 7.0, *)
extension AmityUIKit4.URLImage where Empty == InProgress, InProgress == Failure, Failure == Content {
  @_Concurrency.MainActor @preconcurrency public init(url: Foundation.URL, @SwiftUICore.ViewBuilder content: @escaping (_ phase: AmityUIKit4.URLImagePhase) -> Content)
}
@objc @_Concurrency.MainActor @preconcurrency open class VideoPlayerView : UIKit.UIView {
  public enum State {
    case none
    case loading
    case playing
    case paused(playProgress: Swift.Double, bufferProgress: Swift.Double)
    case error(Foundation.NSError)
  }
  public enum PausedReason : Swift.Int {
    case hidden
    case userInteraction
    case waitingKeepUp
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @_Concurrency.MainActor @preconcurrency final public let playerLayer: AVFoundation.AVPlayerLayer
  @_Concurrency.MainActor @preconcurrency public var player: AVFoundation.AVPlayer? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var playerURL: Foundation.URL? {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var state: AmityUIKit4.VideoPlayerView.State {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var pausedReason: AmityUIKit4.VideoPlayerView.PausedReason {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var replayCount: Swift.Int {
    get
  }
  @_Concurrency.MainActor @preconcurrency open var isAutoReplay: Swift.Bool
  @_Concurrency.MainActor @preconcurrency open var playToEndTime: (() -> Swift.Void)?
  @_Concurrency.MainActor @preconcurrency open var stateDidChanged: ((AmityUIKit4.VideoPlayerView.State) -> Swift.Void)?
  @_Concurrency.MainActor @preconcurrency open var replay: (() -> Swift.Void)?
  @_Concurrency.MainActor @preconcurrency open var isMuted: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency open var speedRate: Swift.Float
  @_Concurrency.MainActor @preconcurrency open var volume: Swift.Double {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var playProgress: Swift.Double {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var currentDuration: Swift.Double {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var bufferProgress: Swift.Double {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var currentBufferDuration: Swift.Double {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var totalDuration: Swift.Double {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var watchDuration: Swift.Double {
    get
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open var contentMode: UIKit.UIView.ContentMode {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc dynamic public init()
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func layoutSubviews()
  @objc deinit
}
@objc extension AmityUIKit4.VideoPlayerView {
  @objc @_Concurrency.MainActor @preconcurrency dynamic open func play(for url: Foundation.URL)
  @objc @_Concurrency.MainActor @preconcurrency dynamic open func replay(resetCount: Swift.Bool = false)
  @objc @_Concurrency.MainActor @preconcurrency dynamic open func resume()
  @objc @_Concurrency.MainActor @preconcurrency dynamic open func pause()
  @objc @_Concurrency.MainActor @preconcurrency dynamic open func seek(to time: CoreMedia.CMTime, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  @objc @_Concurrency.MainActor @preconcurrency dynamic open func seek(to time: CoreMedia.CMTime, toleranceBefore: CoreMedia.CMTime, toleranceAfter: CoreMedia.CMTime, completion: @escaping (Swift.Bool) -> Swift.Void)
  @discardableResult
  @nonobjc @_Concurrency.MainActor @preconcurrency open func addBoundaryTimeObserver(forTimes times: [CoreMedia.CMTime], queue: Dispatch.DispatchQueue? = nil, using: @escaping () -> Swift.Void) -> Any?
  @objc @discardableResult
  @_Concurrency.MainActor @preconcurrency dynamic open func addPeriodicTimeObserver(forInterval interval: CoreMedia.CMTime, queue: Dispatch.DispatchQueue? = nil, using: @escaping (CoreMedia.CMTime) -> Swift.Void) -> Any?
  @objc @_Concurrency.MainActor @preconcurrency dynamic open func removeTimeObserver(_ observer: Any)
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func destroy()
  @objc @_Concurrency.MainActor @preconcurrency dynamic open func playAudioTrack(index: Swift.Int)
}
extension AmityUIKit4.VideoPlayerView {
  @_Concurrency.MainActor @preconcurrency public func pause(reason: AmityUIKit4.VideoPlayerView.PausedReason)
}
extension AmityUIKit4.VideoPlayerView.State : Swift.Equatable {
  public static func == (lhs: AmityUIKit4.VideoPlayerView.State, rhs: AmityUIKit4.VideoPlayerView.State) -> Swift.Bool
}
extension Foundation.NSNotification.Name {
  public static let didPostCreated: Foundation.Notification.Name
  public static let didPostDeleted: Foundation.Notification.Name
  public static let didPostReacted: Foundation.Notification.Name
  public static let didVotePoll: Foundation.Notification.Name
  public static let didLivestreamStatusUpdated: Foundation.Notification.Name
}
open class AmityUserRelationshipPageBehavior {
  @_hasMissingDesignatedInitializers open class Context {
    final public let page: AmityUIKit4.AmityUserRelationshipPage
    final public let userId: Swift.String
    @objc deinit
  }
  public init()
  open func goToUserProfilePage(context: AmityUIKit4.AmityUserRelationshipPageBehavior.Context)
  @objc deinit
}
@available(iOS 14.0, tvOS 14.0, macOS 11.0, watchOS 7.0, *)
public struct CoreDataModelDescription<ManagedObject> where ManagedObject : CoreData.NSManagedObject {
  public var entity: AmityUIKit4.CoreDataEntityDescription<ManagedObject>
  public init(entity: AmityUIKit4.CoreDataEntityDescription<ManagedObject>)
}
@_hasMissingDesignatedInitializers public class AmityPreviewLinkWizard {
  public static let shared: AmityUIKit4.AmityPreviewLinkWizard
  @objc deinit
}
open class AmityCommunitySetupPageBehavior {
  @_hasMissingDesignatedInitializers open class Context {
    final public let page: AmityUIKit4.AmityCommunitySetupPage
    final public let selectedCategories: [AmityUIKit4.AmityCommunityCategoryModel]
    final public let onCategoryAddedAction: (([AmityUIKit4.AmityCommunityCategoryModel]) -> Swift.Void)?
    final public let selectedUsers: [AmityUIKit4.AmityUserModel]
    final public let onUserAddedAction: (([AmityUIKit4.AmityUserModel]) -> Swift.Void)?
    @objc deinit
  }
  public init()
  open func goToAddCategoryPage(_ context: AmityUIKit4.AmityCommunitySetupPageBehavior.Context)
  open func goToAddMemberPage(_ context: AmityUIKit4.AmityCommunitySetupPageBehavior.Context)
  @objc deinit
}
#warning("FIX ME: Refactor and share the same code base between AmityMediaAttatchmentComponent and AmityDetailMediaAttatchmentComponent")
@_Concurrency.MainActor @preconcurrency public struct AmityDetailedMediaAttachmentComponent {
  @_Concurrency.MainActor @preconcurrency public var pageId: AmityUIKit4.PageId?
  @_Concurrency.MainActor @preconcurrency public var id: AmityUIKit4.ComponentId {
    get
  }
  @_Concurrency.MainActor @preconcurrency public init(viewModel: AmityUIKit4.AmityMediaAttachmentViewModel, pageId: AmityUIKit4.PageId? = nil)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s11AmityUIKit40A32DetailedMediaAttachmentComponentV4bodyQrvp", 0) __
  public typealias ID = AmityUIKit4.ComponentId
}
@_Concurrency.MainActor @preconcurrency public struct AmityGlobalFeedComponent {
  @SwiftUICore.EnvironmentObject @_projectedValueProperty($host) @_Concurrency.MainActor @preconcurrency public var host: AmityUIKit4.AmitySwiftUIHostWrapper {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var $host: SwiftUICore.EnvironmentObject<AmityUIKit4.AmitySwiftUIHostWrapper>.Wrapper {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var pageId: AmityUIKit4.PageId?
  @_Concurrency.MainActor @preconcurrency public var id: AmityUIKit4.ComponentId {
    get
  }
  @_Concurrency.MainActor @preconcurrency public init(pageId: AmityUIKit4.PageId? = nil)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s11AmityUIKit40A19GlobalFeedComponentV4bodyQrvp", 0) __
  public typealias ID = AmityUIKit4.ComponentId
}
@_hasMissingDesignatedInitializers public class AmityMedia : Swift.Equatable, Swift.Hashable, Swift.Identifiable, Foundation.ObservableObject {
  final public let id: Swift.String
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (lhs: AmityUIKit4.AmityMedia, rhs: AmityUIKit4.AmityMedia) -> Swift.Bool
  public func isLocal() -> Swift.Bool
  public func getImageURL() -> Foundation.URL?
  public func getAltText(hasDefault: Swift.Bool = true) -> Swift.String?
  public typealias ID = Swift.String
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
  public var hashValue: Swift.Int {
    get
  }
}
@_Concurrency.MainActor @preconcurrency public struct AmityNewsFeedComponent {
  @SwiftUICore.EnvironmentObject @_projectedValueProperty($host) @_Concurrency.MainActor @preconcurrency public var host: AmityUIKit4.AmitySwiftUIHostWrapper {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var $host: SwiftUICore.EnvironmentObject<AmityUIKit4.AmitySwiftUIHostWrapper>.Wrapper {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var pageId: AmityUIKit4.PageId?
  @_Concurrency.MainActor @preconcurrency public var id: AmityUIKit4.ComponentId {
    get
  }
  @_Concurrency.MainActor @preconcurrency public init(pageId: AmityUIKit4.PageId? = nil)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s11AmityUIKit40A17NewsFeedComponentV4bodyQrvp", 0) __
  public typealias ID = AmityUIKit4.ComponentId
}
public enum AmityUserRelationshipPageTab {
  case following, follower
  public static func == (a: AmityUIKit4.AmityUserRelationshipPageTab, b: AmityUIKit4.AmityUserRelationshipPageTab) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_Concurrency.MainActor @preconcurrency public struct AmityUserRelationshipPage : AmityUIKit4.AmityPageView {
  @SwiftUICore.EnvironmentObject @_projectedValueProperty($host) @_Concurrency.MainActor @preconcurrency public var host: AmityUIKit4.AmitySwiftUIHostWrapper {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var $host: SwiftUICore.EnvironmentObject<AmityUIKit4.AmitySwiftUIHostWrapper>.Wrapper {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var id: AmityUIKit4.PageId {
    get
  }
  @_Concurrency.MainActor @preconcurrency public init(userId: Swift.String, selectedTab: AmityUIKit4.AmityUserRelationshipPageTab)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s11AmityUIKit40A20UserRelationshipPageV4bodyQrvp", 0) __
  public typealias ID = AmityUIKit4.PageId
}
@_Concurrency.MainActor @preconcurrency public struct AmityCommunityProfileTabComponent {
  @_Concurrency.MainActor @preconcurrency public var pageId: AmityUIKit4.PageId?
  @_Concurrency.MainActor @preconcurrency public var id: AmityUIKit4.ComponentId {
    get
  }
  @_Concurrency.MainActor @preconcurrency public init(currentTab: SwiftUICore.Binding<Swift.Int>, pageId: AmityUIKit4.PageId = .communityProfilePage)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s11AmityUIKit40A28CommunityProfileTabComponentV4bodyQrvp", 0) __
  public typealias ID = AmityUIKit4.ComponentId
}
@_Concurrency.MainActor @preconcurrency public struct AmitySocialHomePage : AmityUIKit4.AmityPageView {
  @SwiftUICore.EnvironmentObject @_projectedValueProperty($host) @_Concurrency.MainActor @preconcurrency public var host: AmityUIKit4.AmitySwiftUIHostWrapper {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var $host: SwiftUICore.EnvironmentObject<AmityUIKit4.AmitySwiftUIHostWrapper>.Wrapper {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var id: AmityUIKit4.PageId {
    get
  }
  @_Concurrency.MainActor @preconcurrency public init(showBackButton: Swift.Bool = false)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s11AmityUIKit40A14SocialHomePageV4bodyQrvp", 0) __
  public typealias ID = AmityUIKit4.PageId
}
public struct AmityCommunityCategoryModel : Swift.Hashable {
  public let name: Swift.String
  public let categoryId: Swift.String
  public static func == (a: AmityUIKit4.AmityCommunityCategoryModel, b: AmityUIKit4.AmityCommunityCategoryModel) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_Concurrency.MainActor @preconcurrency public struct AmityPendingPostsPage : AmityUIKit4.AmityPageView {
  @_Concurrency.MainActor @preconcurrency public var id: AmityUIKit4.PageId {
    get
  }
  @_Concurrency.MainActor @preconcurrency public init(community: AmitySDK.AmityCommunity)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s11AmityUIKit40A16PendingPostsPageV4bodyQrvp", 0) __
  public typealias ID = AmityUIKit4.PageId
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public struct PageTransition {
  public let currentPage: Swift.Int
  public let nextPage: Swift.Int
  public let pageIncrement: Swift.Int
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public enum PageTransitionError : Swift.Error {
  case draggingStopped
  public static func == (a: AmityUIKit4.PageTransitionError, b: AmityUIKit4.PageTransitionError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol URLImageInMemoryStoreType : AmityUIKit4.URLImageStoreType {
  func getImage<T>(_ keys: [AmityUIKit4.URLImageKey]) -> T?
  func store<T>(_ image: T, info: AmityUIKit4.URLImageStoreInfo)
}
@available(macOS 11.0, iOS 14.0, tvOS 14.0, watchOS 7.0, *)
extension AmityUIKit4.URLImageInMemoryStoreType {
  public func getImage(_ identifier: Swift.String) -> CoreGraphics.CGImage?
  public func getImage(_ url: Foundation.URL) -> CoreGraphics.CGImage?
}
open class AmityPendingPostContentComponentBehavior {
  @_hasMissingDesignatedInitializers open class Context {
    final public let component: AmityUIKit4.AmityPendingPostContentComponent
    final public let userId: Swift.String
    @objc deinit
  }
  public init()
  open func goToUserProfilePage(context: AmityUIKit4.AmityPendingPostContentComponentBehavior.Context)
  @objc deinit
}
public typealias KingfisherOptionsInfo = [AmityUIKit4.KingfisherOptionsInfoItem]
public enum KingfisherOptionsInfoItem : Swift.Sendable {
  case targetCache(AmityUIKit4.ImageCache)
  case originalCache(AmityUIKit4.ImageCache)
  case downloader(AmityUIKit4.ImageDownloader)
  case transition(AmityUIKit4.ImageTransition)
  case downloadPriority(Swift.Float)
  case forceRefresh
  case fromMemoryCacheOrRefresh
  case forceTransition
  case cacheMemoryOnly
  case waitForCache
  case onlyFromCache
  case backgroundDecode
  case callbackQueue(AmityUIKit4.CallbackQueue)
  case scaleFactor(CoreFoundation.CGFloat)
  case preloadAllAnimationData
  case requestModifier(any AmityUIKit4.AsyncImageDownloadRequestModifier)
  case redirectHandler(any AmityUIKit4.ImageDownloadRedirectHandler)
  case processor(any AmityUIKit4.ImageProcessor)
  case cacheSerializer(any AmityUIKit4.CacheSerializer)
  case imageModifier(any AmityUIKit4.ImageModifier)
  case keepCurrentImageWhileLoading
  case onlyLoadFirstFrame
  case cacheOriginalImage
  case onFailureImage(AmityUIKit4.KFCrossPlatformImage?)
  case alsoPrefetchToMemory
  case loadDiskFileSynchronously
  case diskStoreWriteOptions(Foundation.Data.WritingOptions)
  case memoryCacheExpiration(AmityUIKit4.StorageExpiration)
  case memoryCacheAccessExtendingExpiration(AmityUIKit4.ExpirationExtending)
  case diskCacheExpiration(AmityUIKit4.StorageExpiration)
  case diskCacheAccessExtendingExpiration(AmityUIKit4.ExpirationExtending)
  case processingQueue(AmityUIKit4.CallbackQueue)
  case progressiveJPEG(AmityUIKit4.ImageProgressive)
  case alternativeSources([AmityUIKit4.Source])
  case retryStrategy(any AmityUIKit4.RetryStrategy)
  case lowDataMode(AmityUIKit4.Source?)
}
public struct KingfisherParsedOptionsInfo : Swift.Sendable {
  public var targetCache: AmityUIKit4.ImageCache?
  public var originalCache: AmityUIKit4.ImageCache?
  public var downloader: AmityUIKit4.ImageDownloader?
  public var transition: AmityUIKit4.ImageTransition
  public var downloadPriority: Swift.Float
  public var forceRefresh: Swift.Bool
  public var fromMemoryCacheOrRefresh: Swift.Bool
  public var forceTransition: Swift.Bool
  public var cacheMemoryOnly: Swift.Bool
  public var waitForCache: Swift.Bool
  public var onlyFromCache: Swift.Bool
  public var backgroundDecode: Swift.Bool
  public var preloadAllAnimationData: Swift.Bool
  public var callbackQueue: AmityUIKit4.CallbackQueue
  public var scaleFactor: CoreFoundation.CGFloat
  public var requestModifier: (any AmityUIKit4.AsyncImageDownloadRequestModifier)?
  public var redirectHandler: (any AmityUIKit4.ImageDownloadRedirectHandler)?
  public var processor: any AmityUIKit4.ImageProcessor
  public var imageModifier: (any AmityUIKit4.ImageModifier)?
  public var cacheSerializer: any AmityUIKit4.CacheSerializer
  public var keepCurrentImageWhileLoading: Swift.Bool
  public var onlyLoadFirstFrame: Swift.Bool
  public var cacheOriginalImage: Swift.Bool
  public var onFailureImage: AmityUIKit4.KFCrossPlatformImage??
  public var alsoPrefetchToMemory: Swift.Bool
  public var loadDiskFileSynchronously: Swift.Bool
  public var diskStoreWriteOptions: Foundation.Data.WritingOptions
  public var memoryCacheExpiration: AmityUIKit4.StorageExpiration?
  public var memoryCacheAccessExtendingExpiration: AmityUIKit4.ExpirationExtending
  public var diskCacheExpiration: AmityUIKit4.StorageExpiration?
  public var diskCacheAccessExtendingExpiration: AmityUIKit4.ExpirationExtending
  public var processingQueue: AmityUIKit4.CallbackQueue?
  public var progressiveJPEG: AmityUIKit4.ImageProgressive?
  public var alternativeSources: [AmityUIKit4.Source]?
  public var retryStrategy: (any AmityUIKit4.RetryStrategy)?
  public var lowDataModeSource: AmityUIKit4.Source?
  public init(_ info: AmityUIKit4.KingfisherOptionsInfo?)
}
@available(macOS 11.0, iOS 14.0, tvOS 14.0, watchOS 7.0, *)
public struct URLImageOptions {
  public static let defaultImageOptions: AmityUIKit4.URLImageOptions
  public static var amityOptions: AmityUIKit4.URLImageOptions {
    get
  }
  public enum FetchPolicy : Swift.Hashable {
    case returnStoreElseLoad(downloadDelay: Foundation.TimeInterval? = nil)
    case returnStoreDontLoad
    public static func == (a: AmityUIKit4.URLImageOptions.FetchPolicy, b: AmityUIKit4.URLImageOptions.FetchPolicy) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct LoadOptions : Swift.OptionSet, Swift.Hashable {
    public let rawValue: Swift.Int
    public init(rawValue: Swift.Int)
    public static let loadImmediately: AmityUIKit4.URLImageOptions.LoadOptions
    public static let loadOnAppear: AmityUIKit4.URLImageOptions.LoadOptions
    public static let cancelOnDisappear: AmityUIKit4.URLImageOptions.LoadOptions
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    public typealias ArrayLiteralElement = AmityUIKit4.URLImageOptions.LoadOptions
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    public typealias Element = AmityUIKit4.URLImageOptions.LoadOptions
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    public typealias RawValue = Swift.Int
  }
  public var fetchPolicy: AmityUIKit4.URLImageOptions.FetchPolicy
  public var loadOptions: AmityUIKit4.URLImageOptions.LoadOptions
  public var urlRequestConfiguration: AmityUIKit4.Download.URLRequestConfiguration?
  public var maxPixelSize: CoreFoundation.CGSize?
  public init(fetchPolicy: AmityUIKit4.URLImageOptions.FetchPolicy = .returnStoreElseLoad(downloadDelay: 0.25), loadOptions: AmityUIKit4.URLImageOptions.LoadOptions = [ .loadImmediately ], urlRequestConfiguration: AmityUIKit4.Download.URLRequestConfiguration? = nil, maxPixelSize: CoreFoundation.CGSize? = nil)
}
@available(macOS 11.0, iOS 14.0, tvOS 14.0, watchOS 7.0, *)
extension AmityUIKit4.URLImageOptions : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: AmityUIKit4.URLImageOptions, b: AmityUIKit4.URLImageOptions) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public typealias ExecutionQueue = AmityUIKit4.CallbackQueue
public enum CallbackQueue : Swift.Sendable {
  case mainAsync
  case mainCurrentOrAsync
  case untouch
  case dispatch(Dispatch.DispatchQueue)
  public func execute(_ block: @escaping @Sendable () -> Swift.Void)
}
extension Swift.String {
  public var localizedString: Swift.String {
    get
  }
  public func height(withConstrainedWidth width: CoreFoundation.CGFloat, font: UIKit.UIFont) -> CoreFoundation.CGFloat
}
@available(iOS 14.0, tvOS 14.0, macOS 11.0, watchOS 7.0, *)
public struct CoreDataEntityDescription<ManagedObject> where ManagedObject : CoreData.NSManagedObject {
  public init(name: Swift.String, managedObjectClassName: Swift.String, attributes: [AmityUIKit4.CoreDataAttributeDescription], indexes: [AmityUIKit4.CoreDataFetchIndexDescription])
  public init(name: Swift.String, managedObjectClass: ManagedObject.Type, attributes: [AmityUIKit4.CoreDataAttributeDescription], indexes: [AmityUIKit4.CoreDataFetchIndexDescription])
  public var name: Swift.String
  public var managedObjectClassName: Swift.String
  public var attributes: [AmityUIKit4.CoreDataAttributeDescription]
  public var indexes: [AmityUIKit4.CoreDataFetchIndexDescription]
}
@_hasMissingDesignatedInitializers public class MentionData {
  @objc deinit
}
public struct AmityMentionUserModel {
}
public protocol MentionManagerDelegate : AnyObject {
  func didUpdateMentionUsers(users: [AmityUIKit4.AmityMentionUserModel])
  func didCreateAttributedString(attributedString: Foundation.NSAttributedString)
}
public enum MentionManagerType {
  case post(communityId: Swift.String?)
  case comment(communityId: Swift.String?)
  case message(subChannelId: Swift.String?)
}
final public class MentionManager {
  public static let maximumCharacterCountForPost: Swift.Int
  public static let maximumMentionsCount: Swift.Int
  weak final public var delegate: (any AmityUIKit4.MentionManagerDelegate)?
  public init(withType type: AmityUIKit4.MentionManagerType)
  @objc deinit
}
#warning("FIX ME: Refactor and share the same code base between AmityMediaAttatchmentComponent and AmityDetailMediaAttatchmentComponent")
@_Concurrency.MainActor @preconcurrency public struct AmityMediaAttachmentComponent {
  @_Concurrency.MainActor @preconcurrency public var pageId: AmityUIKit4.PageId?
  @_Concurrency.MainActor @preconcurrency public var id: AmityUIKit4.ComponentId {
    get
  }
  @_Concurrency.MainActor @preconcurrency public init(viewModel: AmityUIKit4.AmityMediaAttachmentViewModel, pageId: AmityUIKit4.PageId? = nil)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s11AmityUIKit40A24MediaAttachmentComponentV4bodyQrvp", 0) __
  public typealias ID = AmityUIKit4.ComponentId
}
@_Concurrency.MainActor @preconcurrency public struct AmitySocialGlobalSearchPage : AmityUIKit4.AmityPageView {
  @SwiftUICore.EnvironmentObject @_projectedValueProperty($host) @_Concurrency.MainActor @preconcurrency public var host: AmityUIKit4.AmitySwiftUIHostWrapper {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var $host: SwiftUICore.EnvironmentObject<AmityUIKit4.AmitySwiftUIHostWrapper>.Wrapper {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var id: AmityUIKit4.PageId {
    get
  }
  @_Concurrency.MainActor @preconcurrency public init(isMain: Swift.Bool = false)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s11AmityUIKit40A22SocialGlobalSearchPageV4bodyQrvp", 0) __
  public typealias ID = AmityUIKit4.PageId
}
@available(macOS 11.0, iOS 14.0, tvOS 14.0, watchOS 7.0, *)
public struct ImageInfo {
  public var cgImage: CoreGraphics.CGImage {
    get
  }
  public var size: CoreFoundation.CGSize
}
@_Concurrency.MainActor @preconcurrency public struct AmityUserImageFeedComponent {
  @_Concurrency.MainActor @preconcurrency public var pageId: AmityUIKit4.PageId?
  @_Concurrency.MainActor @preconcurrency public var id: AmityUIKit4.ComponentId {
    get
  }
  @_Concurrency.MainActor @preconcurrency public init(userId: Swift.String, userProfilePageViewModel: AmityUIKit4.AmityUserProfilePageViewModel? = nil, pageId: AmityUIKit4.PageId? = nil)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s11AmityUIKit40A22UserImageFeedComponentV4bodyQrvp", 0) __
  public typealias ID = AmityUIKit4.ComponentId
}
public struct VideoCacheConfiguration : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
open class AmityPostDetailPageBehavior {
  @_hasMissingDesignatedInitializers open class Context {
    final public let page: AmityUIKit4.AmityPostDetailPage
    final public let userId: Swift.String
    @objc deinit
  }
  public init()
  open func goToUserProfilePage(context: AmityUIKit4.AmityPostDetailPageBehavior.Context)
  @objc deinit
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public enum PositionAlignment {
  case center
  case justified(CoreFoundation.CGFloat)
  case start(CoreFoundation.CGFloat)
  case end(CoreFoundation.CGFloat)
  public static var start: AmityUIKit4.PositionAlignment {
    get
  }
  public static var end: AmityUIKit4.PositionAlignment {
    get
  }
  public static var justified: AmityUIKit4.PositionAlignment {
    get
  }
}
public enum MentionListPosition : Swift.Equatable {
  case top(CoreFoundation.CGFloat)
  case bottom(CoreFoundation.CGFloat)
  case none
  public static func == (a: AmityUIKit4.MentionListPosition, b: AmityUIKit4.MentionListPosition) -> Swift.Bool
}
extension AmityUIKit4.AmityTextEditorView {
  @_Concurrency.MainActor @preconcurrency public func placeholder(_ value: Swift.String) -> AmityUIKit4.AmityTextEditorView
  @_Concurrency.MainActor @preconcurrency public func maxExpandableHeight(_ value: CoreFoundation.CGFloat) -> AmityUIKit4.AmityTextEditorView
  @_Concurrency.MainActor @preconcurrency public func willShowMentionList(_ value: ((CoreFoundation.CGFloat) -> Swift.Void)?) -> AmityUIKit4.AmityTextEditorView
  @_Concurrency.MainActor @preconcurrency public func mentionListPosition(_ value: AmityUIKit4.MentionListPosition) -> AmityUIKit4.AmityTextEditorView
  @_Concurrency.MainActor @preconcurrency public func autoFocus(_ value: Swift.Bool) -> AmityUIKit4.AmityTextEditorView
  @_Concurrency.MainActor @preconcurrency public func textColor(_ value: UIKit.UIColor) -> AmityUIKit4.AmityTextEditorView
  @_Concurrency.MainActor @preconcurrency public func backgroundColor(_ value: UIKit.UIColor) -> AmityUIKit4.AmityTextEditorView
  @_Concurrency.MainActor @preconcurrency public func hightlightColor(_ value: UIKit.UIColor) -> AmityUIKit4.AmityTextEditorView
}
@_Concurrency.MainActor @preconcurrency public struct AmityTextEditorView : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public init(_ mentionManagerType: AmityUIKit4.MentionManagerType, text: SwiftUICore.Binding<Swift.String>, mentionData: SwiftUICore.Binding<AmityUIKit4.MentionData>, textViewHeight: CoreFoundation.CGFloat)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s11AmityUIKit40A14TextEditorViewV4bodyQrvp", 0) __
}
@_hasMissingDesignatedInitializers public class AmityTextEditorViewModel : Foundation.ObservableObject {
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
public struct AmityUserModel : Swift.Equatable {
  public static func == (lhs: AmityUIKit4.AmityUserModel, rhs: AmityUIKit4.AmityUserModel) -> Swift.Bool
}
@_Concurrency.MainActor @preconcurrency public struct AmityMyCommunitiesComponent {
  @SwiftUICore.EnvironmentObject @_projectedValueProperty($host) @_Concurrency.MainActor @preconcurrency public var host: AmityUIKit4.AmitySwiftUIHostWrapper {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var $host: SwiftUICore.EnvironmentObject<AmityUIKit4.AmitySwiftUIHostWrapper>.Wrapper {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var pageId: AmityUIKit4.PageId?
  @_Concurrency.MainActor @preconcurrency public var id: AmityUIKit4.ComponentId {
    get
  }
  @_Concurrency.MainActor @preconcurrency public init(pageId: AmityUIKit4.PageId? = nil)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s11AmityUIKit40A22MyCommunitiesComponentV4bodyQrvp", 0) __
  public typealias ID = AmityUIKit4.ComponentId
}
@available(macOS 11.0, iOS 14.0, tvOS 14.0, watchOS 7.0, *)
@_Concurrency.MainActor @preconcurrency public struct URLImageActivityIndicator : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public init()
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
  public typealias Body = @_opaqueReturnTypeOf("$s11AmityUIKit425URLImageActivityIndicatorV4bodyQrvp", 0) __
}
@_Concurrency.MainActor @preconcurrency public struct AmityCommunityStorySettingPage : AmityUIKit4.AmityPageView {
  @SwiftUICore.EnvironmentObject @_projectedValueProperty($host) @_Concurrency.MainActor @preconcurrency public var host: AmityUIKit4.AmitySwiftUIHostWrapper {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var $host: SwiftUICore.EnvironmentObject<AmityUIKit4.AmitySwiftUIHostWrapper>.Wrapper {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var id: AmityUIKit4.PageId {
    get
  }
  @_Concurrency.MainActor @preconcurrency public init(community: AmitySDK.AmityCommunity)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s11AmityUIKit40A25CommunityStorySettingPageV4bodyQrvp", 0) __
  public typealias ID = AmityUIKit4.PageId
}
@_Concurrency.MainActor @preconcurrency public struct AmityLivestreamPlayerPage : AmityUIKit4.AmityPageView {
  @_Concurrency.MainActor @preconcurrency public var id: AmityUIKit4.PageId {
    get
  }
  @_Concurrency.MainActor @preconcurrency public init(post: AmitySDK.AmityPost)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s11AmityUIKit40A20LivestreamPlayerPageV4bodyQrvp", 0) __
  public typealias ID = AmityUIKit4.PageId
}
public typealias ViewController = UIKit.UIViewController
public typealias HostingController = SwiftUI.UIHostingController
@_hasMissingDesignatedInitializers public class AmitySwiftUIHostWrapper : Combine.ObservableObject {
  weak public var controller: AmityUIKit4.ViewController?
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
@_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class AmitySwiftUIHostingController<Content> : SwiftUI.UIHostingController<SwiftUICore.ModifiedContent<Content, SwiftUICore._EnvironmentKeyWritingModifier<AmityUIKit4.AmitySwiftUIHostWrapper?>>> where Content : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public init(rootView: Content)
  @objc deinit
}
@_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class AmitySwiftUIHostingNavigationController<Content> : UIKit.UINavigationController where Content : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency convenience public init(rootView: Content)
  @available(iOS 5.0, *)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(navigationBarClass: Swift.AnyClass?, toolbarClass: Swift.AnyClass?)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(rootViewController: UIKit.UIViewController)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
extension UIKit.UINavigationController : @retroactive UIKit.UIGestureRecognizerDelegate {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func gestureRecognizerShouldBegin(_ gestureRecognizer: UIKit.UIGestureRecognizer) -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func gestureRecognizer(_ gestureRecognizer: UIKit.UIGestureRecognizer, shouldRecognizeSimultaneouslyWith otherGestureRecognizer: UIKit.UIGestureRecognizer) -> Swift.Bool
}
@_Concurrency.MainActor @preconcurrency public struct AmityPostDetailPage : AmityUIKit4.AmityPageView {
  @SwiftUICore.EnvironmentObject @_projectedValueProperty($host) @_Concurrency.MainActor @preconcurrency public var host: AmityUIKit4.AmitySwiftUIHostWrapper {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var $host: SwiftUICore.EnvironmentObject<AmityUIKit4.AmitySwiftUIHostWrapper>.Wrapper {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var id: AmityUIKit4.PageId {
    get
  }
  @_Concurrency.MainActor @preconcurrency public init(id: Swift.String, commentId: Swift.String? = nil, parentId: Swift.String? = nil)
  @_Concurrency.MainActor @preconcurrency public init(post: AmitySDK.AmityPost, context: AmityUIKit4.AmityPostContentComponent.Context?)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s11AmityUIKit40A14PostDetailPageV4bodyQrvp", 0) __
  public typealias ID = AmityUIKit4.PageId
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class VideoFullscreenPlayerView : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
open class AmityCreatePostMenuComponentBehavior {
  @_hasMissingDesignatedInitializers open class Context {
    final public let component: AmityUIKit4.AmityCreatePostMenuComponent
    @objc deinit
  }
  public init()
  open func goToSelectPostTargetPage(context: AmityUIKit4.AmityCreatePostMenuComponentBehavior.Context)
  open func goToSelectStoryTargetPage(context: AmityUIKit4.AmityCreatePostMenuComponentBehavior.Context)
  open func goToSelectPollPostTargetPage(context: AmityUIKit4.AmityCreatePostMenuComponentBehavior.Context)
  open func goToSelectLiveStreamPostTargetPage(context: AmityUIKit4.AmityCreatePostMenuComponentBehavior.Context)
  @objc deinit
}
@_Concurrency.MainActor @preconcurrency public struct AmityEditCommentView : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public init(comment: AmityUIKit4.AmityCommentModel, cancelAction: @escaping () -> Swift.Void, saveAction: @escaping (AmityUIKit4.AmityCommentModel) -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s11AmityUIKit40A15EditCommentViewV4bodyQrvp", 0) __
}
public typealias DefaultTapAction = () -> Swift.Void
public struct URLImageStoreInfo {
  public var url: Foundation.URL
  public var identifier: Swift.String?
  public var uti: Swift.String
}
open class AmityNewsFeedComponentBehavior {
  @_hasMissingDesignatedInitializers open class Context {
    final public let component: AmityUIKit4.AmityNewsFeedComponent
    final public let post: AmityUIKit4.AmityPostModel
    final public let showPollResult: Swift.Bool
    @objc deinit
  }
  public init()
  open func goToPostDetailPage(context: AmityUIKit4.AmityNewsFeedComponentBehavior.Context)
  @objc deinit
}
@_Concurrency.MainActor @preconcurrency public struct AmityBlockedUsersPage : AmityUIKit4.AmityPageView {
  @SwiftUICore.EnvironmentObject @_projectedValueProperty($host) @_Concurrency.MainActor @preconcurrency public var host: AmityUIKit4.AmitySwiftUIHostWrapper {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var $host: SwiftUICore.EnvironmentObject<AmityUIKit4.AmitySwiftUIHostWrapper>.Wrapper {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var id: AmityUIKit4.PageId {
    get
  }
  @_Concurrency.MainActor @preconcurrency public init()
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s11AmityUIKit40A16BlockedUsersPageV4bodyQrvp", 0) __
  public typealias ID = AmityUIKit4.PageId
}
@_Concurrency.MainActor @preconcurrency public struct AmityPollTargetSelectionPage : AmityUIKit4.AmityPageView {
  @SwiftUICore.EnvironmentObject @_projectedValueProperty($host) @_Concurrency.MainActor @preconcurrency public var host: AmityUIKit4.AmitySwiftUIHostWrapper {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var $host: SwiftUICore.EnvironmentObject<AmityUIKit4.AmitySwiftUIHostWrapper>.Wrapper {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var id: AmityUIKit4.PageId {
    get
  }
  @_Concurrency.MainActor @preconcurrency public init()
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s11AmityUIKit40A23PollTargetSelectionPageV4bodyQrvp", 0) __
  public typealias ID = AmityUIKit4.PageId
}
open class AmityPollTargetSelectionPageBehavior {
  @_hasMissingDesignatedInitializers open class Context {
    final public let page: AmityUIKit4.AmityPollTargetSelectionPage
    final public let community: AmityUIKit4.AmityCommunityModel?
    @objc deinit
  }
  public init()
  open func goToPollPostComposerPage(context: AmityUIKit4.AmityPollTargetSelectionPageBehavior.Context)
  @objc deinit
}
open class AmitySocialHomeTopNavigationComponentBehavior {
  @_hasMissingDesignatedInitializers open class Context {
    final public let component: AmityUIKit4.AmitySocialHomeTopNavigationComponent
    @objc deinit
  }
  public init()
  open func goToCreateCommunityPage(context: AmityUIKit4.AmitySocialHomeTopNavigationComponentBehavior.Context)
  @objc deinit
}
extension UIKit.UINavigationController {
  public enum UINavigationControllerAnimation {
    case `default`, presentation
    public static func == (a: UIKit.UINavigationController.UINavigationControllerAnimation, b: UIKit.UINavigationController.UINavigationControllerAnimation) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @_Concurrency.MainActor @preconcurrency public func pushViewController(_ viewController: UIKit.UIViewController, animation: UIKit.UINavigationController.UINavigationControllerAnimation = .default)
  @_Concurrency.MainActor @preconcurrency public func popViewController(animation: UIKit.UINavigationController.UINavigationControllerAnimation = .default)
}
@_Concurrency.MainActor @preconcurrency public struct CircularProgressView : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s11AmityUIKit420CircularProgressViewV4bodyQrvp", 0) __
}
public struct FormatIndicatedCacheSerializer : AmityUIKit4.CacheSerializer {
  public static let png: AmityUIKit4.FormatIndicatedCacheSerializer
  public static let jpeg: AmityUIKit4.FormatIndicatedCacheSerializer
  public static func jpeg(compressionQuality: CoreFoundation.CGFloat) -> AmityUIKit4.FormatIndicatedCacheSerializer
  public static let gif: AmityUIKit4.FormatIndicatedCacheSerializer
  public func data(with image: AmityUIKit4.KFCrossPlatformImage, original: Foundation.Data?) -> Foundation.Data?
  public func image(with data: Foundation.Data, options: AmityUIKit4.KingfisherParsedOptionsInfo) -> AmityUIKit4.KFCrossPlatformImage?
}
public func withoutAnimation(action: @escaping () -> Swift.Void)
@_Concurrency.MainActor @preconcurrency public struct AmityCommunityImageFeedComponent {
  @_Concurrency.MainActor @preconcurrency public var id: AmityUIKit4.ComponentId {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var pageId: AmityUIKit4.PageId?
  @_Concurrency.MainActor @preconcurrency public init(communityId: Swift.String, communityProfileViewModel: AmityUIKit4.CommunityProfileViewModel? = nil, pageId: AmityUIKit4.PageId? = nil)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s11AmityUIKit40A27CommunityImageFeedComponentV4bodyQrvp", 0) __
  public typealias ID = AmityUIKit4.ComponentId
}
@available(iOS 14.0, *)
@_Concurrency.MainActor extension AmityUIKit4.KingfisherWrapper where Base : CarPlay.CPListItem {
  @discardableResult
  @_Concurrency.MainActor public func setImage(with source: AmityUIKit4.Source?, placeholder: AmityUIKit4.KFCrossPlatformImage? = nil, options: AmityUIKit4.KingfisherOptionsInfo? = nil, progressBlock: AmityUIKit4.DownloadProgressBlock? = nil, completionHandler: (@_Concurrency.MainActor @Sendable (Swift.Result<AmityUIKit4.RetrieveImageResult, AmityUIKit4.KingfisherError>) -> Swift.Void)? = nil) -> AmityUIKit4.DownloadTask?
  @discardableResult
  @_Concurrency.MainActor public func setImage(with resource: (any AmityUIKit4.Resource)?, placeholder: AmityUIKit4.KFCrossPlatformImage? = nil, options: AmityUIKit4.KingfisherOptionsInfo? = nil, progressBlock: AmityUIKit4.DownloadProgressBlock? = nil, completionHandler: (@_Concurrency.MainActor @Sendable (Swift.Result<AmityUIKit4.RetrieveImageResult, AmityUIKit4.KingfisherError>) -> Swift.Void)? = nil) -> AmityUIKit4.DownloadTask?
  @_Concurrency.MainActor public func cancelDownloadTask()
}
@_Concurrency.MainActor extension AmityUIKit4.KingfisherWrapper where Base : CarPlay.CPListItem {
  @_Concurrency.MainActor public var taskIdentifier: AmityUIKit4.Source.Identifier.Value? {
    get
  }
}
@_hasMissingDesignatedInitializers open class AmityUIKitBehaviour {
  public var createStoryPageBehaviour: AmityUIKit4.AmityCreateStoryPageBehaviour?
  public var draftStoryPageBehaviour: AmityUIKit4.AmityDraftStoryPageBehaviour?
  public var storyTabComponentBehaviour: AmityUIKit4.AmityStoryTabComponentBehaviour?
  public var viewStoryPageBehaviour: AmityUIKit4.AmityViewStoryPageBehaviour?
  public var storyTargetSelectionPageBehaviour: AmityUIKit4.AmityStoryTargetSelectionPageBehaviour?
  public var commentTrayComponentBehavior: AmityUIKit4.AmityCommentTrayComponentBehavior?
  public var socialHomePageBehavior: AmityUIKit4.AmitySocialHomePageBehavior?
  public var myCommunitiesComponentBehavior: AmityUIKit4.AmityMyCommunitiesComponentBehavior?
  public var newsFeedComponentBehavior: AmityUIKit4.AmityNewsFeedComponentBehavior?
  public var globalFeedComponentBehavior: AmityUIKit4.AmityGlobalFeedComponentBehavior?
  public var postContentComponentBehavior: AmityUIKit4.AmityPostContentComponentBehavior?
  public var createPostMenuComponentBehavior: AmityUIKit4.AmityCreatePostMenuComponentBehavior?
  public var postTargetSelectionPageBehavior: AmityUIKit4.AmityPostTargetSelectionPageBehavior?
  public var pollTargetSelectionPageBehavior: AmityUIKit4.AmityPollTargetSelectionPageBehavior?
  public var liveStreamPostTargetSelectionPageBehavior: AmityUIKit4.AmityLivestreamPostTargetSelectionPageBehavior?
  public var postDetailPageBehavior: AmityUIKit4.AmityPostDetailPageBehavior?
  public var socialGlobalSearchPageBehavior: AmityUIKit4.AmitySocialGlobalSearchPageBehavior?
  public var socialHomeTopNavigationComponentBehavior: AmityUIKit4.AmitySocialHomeTopNavigationComponentBehavior?
  public var myCommunitiesSearchPageBehavior: AmityUIKit4.AmityMyCommunitiesSearchPageBehavior?
  public var communitySearchResultComponentBehavior: AmityUIKit4.AmityCommunitySearchResultComponentBehavior?
  public var userSearchResultComponentBehavior: AmityUIKit4.AmityUserSearchResultComponentBehavior?
  public var postComposerPageBehavior: AmityUIKit4.AmityPostComposerPageBehavior?
  public var communityProfilePageBehavior: AmityUIKit4.AmityCommunityProfilePageBehavior?
  public var communitySetupPageBehavior: AmityUIKit4.AmityCommunitySetupPageBehavior?
  public var communityMembershipPageBehavior: AmityUIKit4.AmityCommunityMembershipPageBehavior?
  public var communitySettingPageBehavior: AmityUIKit4.AmityCommunitySettingPageBehavior?
  public var communityNotificationSettingPageBehavior: AmityUIKit4.AmityCommunityNotificationSettingPageBehavior?
  public var userProfilePageBehavior: AmityUIKit4.AmityUserProfilePageBehavior?
  public var userProfileHeaderComponentBehavior: AmityUIKit4.AmityUserProfileHeaderComponentBehavior?
  public var userRelationshipPageBehavior: AmityUIKit4.AmityUserRelationshipPageBehavior?
  public var userPendingFollowRequestsPageBehavior: AmityUIKit4.AmityUserPendingFollowRequestsPageBehavior?
  public var blockedUsersPageBehavior: AmityUIKit4.AmityBlockedUsersPageBehavior?
  public var pendingPostContentComponentBehavior: AmityUIKit4.AmityPendingPostContentComponentBehavior?
  public var livestreamBehavior: AmityUIKit4.AmityLivestreamBehavior?
  public var swipeToBackGestureBehavior: AmityUIKit4.AmitySwipeToBackGestureBehavior?
  public var notificationTrayPageBehavior: AmityUIKit4.AmityNotificationTrayPageBehavior
  @objc deinit
}
open class AmitySwipeToBackGestureBehavior {
  public init()
  open func gestureRecognizerShouldBegin(navigationController: UIKit.UINavigationController, _ gestureRecognizer: UIKit.UIGestureRecognizer) -> Swift.Bool
  open func gestureRecognizer(_ gestureRecognizer: UIKit.UIGestureRecognizer, shouldRecognizeSimultaneouslyWith otherGestureRecognizer: UIKit.UIGestureRecognizer) -> Swift.Bool
  @objc deinit
}
public enum AmitySocialHomePageTab : Swift.String, Swift.CaseIterable, Swift.Identifiable {
  public var id: Swift.String {
    get
  }
  case newsFeed
  case explore
  case myCommunities
  public init?(rawValue: Swift.String)
  public typealias AllCases = [AmityUIKit4.AmitySocialHomePageTab]
  public typealias ID = Swift.String
  public typealias RawValue = Swift.String
  nonisolated public static var allCases: [AmityUIKit4.AmitySocialHomePageTab] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
@available(macOS 11.0, iOS 14.0, tvOS 14.0, watchOS 7.0, *)
public class URLImageService {
  public static let defaultImageService: AmityUIKit4.URLImageService
  public init(fileStore: (any AmityUIKit4.URLImageFileStoreType)? = nil, inMemoryStore: (any AmityUIKit4.URLImageInMemoryStoreType)? = nil)
  final public let fileStore: (any AmityUIKit4.URLImageFileStoreType)?
  final public let inMemoryStore: (any AmityUIKit4.URLImageInMemoryStoreType)?
  @objc deinit
}
open class AmityCommunityNotificationSettingPageBehavior {
  open class Context {
    final public let page: AmityUIKit4.AmityCommunityNotificationSettingPage
    final public let community: AmitySDK.AmityCommunity
    public init(page: AmityUIKit4.AmityCommunityNotificationSettingPage, community: AmitySDK.AmityCommunity)
    @objc deinit
  }
  public init()
  open func goToPostsNotificationSettingPage(_ context: AmityUIKit4.AmityCommunityNotificationSettingPageBehavior.Context)
  open func goToCommentsNotificationSettingPage(_ context: AmityUIKit4.AmityCommunityNotificationSettingPageBehavior.Context)
  open func goToStoriesNotificationSettingPage(_ context: AmityUIKit4.AmityCommunityNotificationSettingPageBehavior.Context)
  @objc deinit
}
@_Concurrency.MainActor @preconcurrency public struct BottomSheet<Content> : SwiftUICore.View where Content : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public init(isPresented: SwiftUICore.Binding<Swift.Bool>, height: CoreFoundation.CGFloat, topBarHeight: CoreFoundation.CGFloat = 30, topBarCornerRadius: CoreFoundation.CGFloat? = nil, topBarBackgroundColor: SwiftUICore.Color = Color(.systemBackground), contentBackgroundColor: SwiftUICore.Color = Color(.systemBackground), showTopIndicator: Swift.Bool, animation: SwiftUICore.Animation = .easeInOut(duration: 0.3), onDismiss: (() -> Swift.Void)? = nil, showGrayBackground: Swift.Bool = true, @SwiftUICore.ViewBuilder content: () -> Content)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s11AmityUIKit411BottomSheetV4bodyQrvp", 0) __<Content>
}
public enum MemoryStorage {
  public class Backend<T> : @unchecked Swift.Sendable where T : AmityUIKit4.CacheCostCalculable {
    public var config: AmityUIKit4.MemoryStorage.Config {
      get
      set
    }
    public init(config: AmityUIKit4.MemoryStorage.Config)
    public func removeExpired()
    public func store(value: T, forKey key: Swift.String, expiration: AmityUIKit4.StorageExpiration? = nil)
    public func value(forKey key: Swift.String, extendingExpiration: AmityUIKit4.ExpirationExtending = .cacheTime) -> T?
    public func isCached(forKey key: Swift.String) -> Swift.Bool
    public func remove(forKey key: Swift.String)
    public func removeAll()
    @objc deinit
  }
}
extension AmityUIKit4.MemoryStorage {
  public struct Config {
    public var totalCostLimit: Swift.Int
    public var countLimit: Swift.Int
    public var expiration: AmityUIKit4.StorageExpiration
    public var cleanInterval: Foundation.TimeInterval
    public var keepWhenEnteringBackground: Swift.Bool
    public init(totalCostLimit: Swift.Int, cleanInterval: Foundation.TimeInterval = 120)
  }
}
@_Concurrency.MainActor @preconcurrency public struct AmityLiveChatMessageList {
  @_Concurrency.MainActor @preconcurrency public var pageId: AmityUIKit4.PageId?
  @_Concurrency.MainActor @preconcurrency public var id: AmityUIKit4.ComponentId {
    get
  }
  @_Concurrency.MainActor @preconcurrency public init(viewModel: AmityUIKit4.AmityLiveChatPageViewModel, pageId: AmityUIKit4.PageId? = .liveChatPage)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s11AmityUIKit40A19LiveChatMessageListV4bodyQrvp", 0) __
  public typealias ID = AmityUIKit4.ComponentId
}
extension Swift.Int {
  public var formattedCountString: Swift.String {
    get
  }
}
public typealias Transformer = (CoreImage.CIImage) -> CoreImage.CIImage?
public protocol CIImageProcessor : AmityUIKit4.ImageProcessor {
  var filter: AmityUIKit4.Filter { get }
}
extension AmityUIKit4.CIImageProcessor {
  public func process(item: AmityUIKit4.ImageProcessItem, options: AmityUIKit4.KingfisherParsedOptionsInfo) -> AmityUIKit4.KFCrossPlatformImage?
}
public struct Filter {
  public init(transform: @escaping AmityUIKit4.Transformer)
  public static let tint: @Sendable (_ color: AmityUIKit4.KFCrossPlatformColor) -> AmityUIKit4.Filter
  public struct ColorElement {
    public let brightness: CoreFoundation.CGFloat
    public let contrast: CoreFoundation.CGFloat
    public let saturation: CoreFoundation.CGFloat
    public let inputEV: CoreFoundation.CGFloat
    public init(brightness: CoreFoundation.CGFloat, contrast: CoreFoundation.CGFloat, saturation: CoreFoundation.CGFloat, inputEV: CoreFoundation.CGFloat)
  }
  public static let colorControl: @Sendable (_ arg: AmityUIKit4.Filter.ColorElement) -> AmityUIKit4.Filter
}
extension AmityUIKit4.KingfisherWrapper where Base : UIKit.UIImage {
  public func apply(_ filter: AmityUIKit4.Filter) -> AmityUIKit4.KFCrossPlatformImage
}
@_Concurrency.MainActor @preconcurrency public struct AmityCommunityFeedComponent {
  @_Concurrency.MainActor @preconcurrency public var pageId: AmityUIKit4.PageId?
  @_Concurrency.MainActor @preconcurrency public var id: AmityUIKit4.ComponentId {
    get
  }
  @_Concurrency.MainActor @preconcurrency public init(communityId: Swift.String, pageId: AmityUIKit4.PageId? = nil, communityProfileViewModel: AmityUIKit4.CommunityProfileViewModel? = nil, onTapAction: ((AmityUIKit4.AmityPostModel, AmityUIKit4.AmityPostContentComponent.Context?) -> Swift.Void)? = nil)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s11AmityUIKit40A22CommunityFeedComponentV4bodyQrvp", 0) __
  public typealias ID = AmityUIKit4.ComponentId
}
public enum DiskStorage {
  @_hasMissingDesignatedInitializers public class Backend<T> : @unchecked Swift.Sendable where T : AmityUIKit4.DataTransformable {
    public var config: AmityUIKit4.DiskStorage.Config {
      get
      set
    }
    final public let directoryURL: Foundation.URL
    convenience public init(config: AmityUIKit4.DiskStorage.Config) throws
    public func store(value: T, forKey key: Swift.String, expiration: AmityUIKit4.StorageExpiration? = nil, writeOptions: Foundation.Data.WritingOptions = []) throws
    public func value(forKey key: Swift.String, extendingExpiration: AmityUIKit4.ExpirationExtending = .cacheTime) throws -> T?
    public func isCached(forKey key: Swift.String) -> Swift.Bool
    public func isCached(forKey key: Swift.String, referenceDate: Foundation.Date) -> Swift.Bool
    public func remove(forKey key: Swift.String) throws
    public func removeAll() throws
    public func cacheFileURL(forKey key: Swift.String) -> Foundation.URL
    public func removeExpiredValues() throws -> [Foundation.URL]
    public func removeSizeExceededValues() throws -> [Foundation.URL]
    public func totalSize() throws -> Swift.UInt
    @objc deinit
  }
}
extension AmityUIKit4.DiskStorage {
  public struct Config : @unchecked Swift.Sendable {
    public var sizeLimit: Swift.UInt
    public var expiration: AmityUIKit4.StorageExpiration
    public var pathExtension: Swift.String?
    public var usesHashedFileName: Swift.Bool
    public var autoExtAfterHashedFileName: Swift.Bool
    public var cachePathBlock: (@Sendable (_ directory: Foundation.URL, _ cacheName: Swift.String) -> Foundation.URL)!
    public let name: Swift.String
    public init(name: Swift.String, sizeLimit: Swift.UInt, fileManager: Foundation.FileManager = .default, directory: Foundation.URL? = nil)
  }
}
public class Delegate<Input, Output> : @unchecked Swift.Sendable {
  public init()
  public func delegate<T>(on target: T, block: ((T, Input) -> Output)?) where T : AnyObject
  public func delegate<T>(on target: T, block: ((T, Input) async -> Output)?) where T : AnyObject
  public func call(_ input: Input) -> Output?
  public func callAsFunction(_ input: Input) -> Output?
  public func callAsync(_ input: Input) async -> Output?
  public var isSet: Swift.Bool {
    get
  }
  @objc deinit
}
extension AmityUIKit4.Delegate where Input == () {
  public func call() -> Output?
  public func callAsFunction() -> Output?
}
extension AmityUIKit4.Delegate where Input == (), Output : AmityUIKit4.OptionalProtocol {
  public func call() -> Output
  public func callAsFunction() -> Output
}
extension AmityUIKit4.Delegate where Output : AmityUIKit4.OptionalProtocol {
  public func call(_ input: Input) -> Output
  public func callAsFunction(_ input: Input) -> Output
}
public protocol OptionalProtocol {
  static var _createNil: Self { get }
}
extension Swift.Optional : AmityUIKit4.OptionalProtocol {
  public static var _createNil: Swift.Optional<Wrapped> {
    get
  }
}
open class AmityUserProfileHeaderComponentBehavior {
  @_hasMissingDesignatedInitializers open class Context {
    final public let component: AmityUIKit4.AmityUserProfileHeaderComponent
    final public let userId: Swift.String
    final public let selectedTab: AmityUIKit4.AmityUserRelationshipPageTab
    @objc deinit
  }
  public init()
  open func goToUserRelationshipPage(context: AmityUIKit4.AmityUserProfileHeaderComponentBehavior.Context)
  open func goToPendingFollowRequestPage(context: AmityUIKit4.AmityUserProfileHeaderComponentBehavior.Context)
  @objc deinit
}
@available(macOS 11.0, iOS 14.0, tvOS 14.0, watchOS 7.0, *)
final public class DownloadManager {
  public init()
  public typealias DownloadTaskPublisher = Combine.Publishers.Share<AmityUIKit4.DownloadPublisher>
  final public func publisher(for download: AmityUIKit4.Download) -> AmityUIKit4.DownloadManager.DownloadTaskPublisher
  final public func reset(download: AmityUIKit4.Download)
  @objc deinit
}
public class StoryManager {
  public init()
  public func getGlobaFeedStoryTargets(options: AmitySDK.AmityGlobalStoryTargetsQueryOption) -> AmitySDK.AmityCollection<AmitySDK.AmityStoryTarget>
  public func getStoryTarget(targetType: AmitySDK.AmityStoryTargetType, targetId: Swift.String) -> AmitySDK.AmityObject<AmitySDK.AmityStoryTarget>
  public func getActiveStoriesByTarget(targetType: Swift.String, targetId: Swift.String, sortOption: AmitySDK.AmityStoryQuerySortOption) -> AmitySDK.AmityCollection<AmitySDK.AmityStory>
  public func getActiveStories(in communityId: Swift.String) -> AmitySDK.AmityCollection<AmitySDK.AmityStory>
  @discardableResult
  @_Concurrency.MainActor public func createImageStory(in communityId: Swift.String, createOption: AmitySDK.AmityImageStoryCreateOptions) async throws -> AmitySDK.AmityStory
  @discardableResult
  @_Concurrency.MainActor public func createVideoStory(in communityId: Swift.String, createOption: AmitySDK.AmityVideoStoryCreateOptions) async throws -> AmitySDK.AmityStory
  @_Concurrency.MainActor public func deleteStory(storyId: Swift.String) async throws
  @_Concurrency.MainActor public func addReaction(storyId: Swift.String) async throws -> Swift.Bool
  @_Concurrency.MainActor public func removeReaction(storyId: Swift.String) async throws -> Swift.Bool
  @objc deinit
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension AmityUIKit4.KFImageProtocol {
  @_Concurrency.MainActor public static func source(_ source: AmityUIKit4.Source?) -> Self
  @_Concurrency.MainActor public static func resource(_ resource: (any AmityUIKit4.Resource)?) -> Self
  @_Concurrency.MainActor public static func url(_ url: Foundation.URL?, cacheKey: Swift.String? = nil) -> Self
  @_Concurrency.MainActor public static func dataProvider(_ provider: (any AmityUIKit4.ImageDataProvider)?) -> Self
  @_Concurrency.MainActor public static func data(_ data: Foundation.Data?, cacheKey: Swift.String) -> Self
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension AmityUIKit4.KFImageProtocol {
  @_Concurrency.MainActor public func placeholder<P>(@SwiftUICore.ViewBuilder _ content: @escaping (Foundation.Progress) -> P) -> Self where P : SwiftUICore.View
  @_Concurrency.MainActor public func placeholder<P>(@SwiftUICore.ViewBuilder _ content: @escaping () -> P) -> Self where P : SwiftUICore.View
  @_Concurrency.MainActor public func cancelOnDisappear(_ flag: Swift.Bool) -> Self
  @_Concurrency.MainActor public func reducePriorityOnDisappear(_ flag: Swift.Bool) -> Self
  @_Concurrency.MainActor public func fade(duration: Foundation.TimeInterval) -> Self
  @_Concurrency.MainActor public func startLoadingBeforeViewAppear(_ flag: Swift.Bool = true) -> Self
}
public enum AmityPostContentComponentStyle {
  case feed
  case detail
  public static func == (a: AmityUIKit4.AmityPostContentComponentStyle, b: AmityUIKit4.AmityPostContentComponentStyle) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum AmityPostCategory {
  case general
  case announcement
  case global
  case pin
  case pinAndAnnouncement
  public static func == (a: AmityUIKit4.AmityPostCategory, b: AmityUIKit4.AmityPostCategory) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_Concurrency.MainActor @preconcurrency public struct AmityPostContentComponent {
  @SwiftUICore.EnvironmentObject @_projectedValueProperty($host) @_Concurrency.MainActor @preconcurrency public var host: AmityUIKit4.AmitySwiftUIHostWrapper {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var $host: SwiftUICore.EnvironmentObject<AmityUIKit4.AmitySwiftUIHostWrapper>.Wrapper {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var pageId: AmityUIKit4.PageId?
  @_Concurrency.MainActor @preconcurrency public var id: AmityUIKit4.ComponentId {
    get
  }
  @_Concurrency.MainActor @preconcurrency public let post: AmityUIKit4.AmityPostModel
  @_Concurrency.MainActor @preconcurrency public init(post: AmitySDK.AmityPost, style: AmityUIKit4.AmityPostContentComponentStyle = .feed, category: AmityUIKit4.AmityPostCategory = .general, hideTarget: Swift.Bool = false, hideMenuButton: Swift.Bool = false, onTapAction: ((AmityUIKit4.AmityPostContentComponent.Context?) -> Swift.Void)? = nil, pageId: AmityUIKit4.PageId? = nil)
  @_Concurrency.MainActor @preconcurrency public init(post: AmitySDK.AmityPost, style: AmityUIKit4.AmityPostContentComponentStyle = .feed, context: AmityUIKit4.AmityPostContentComponent.Context, onTapAction: ((AmityUIKit4.AmityPostContentComponent.Context?) -> Swift.Void)? = nil, pageId: AmityUIKit4.PageId? = nil)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s11AmityUIKit40A20PostContentComponentV4bodyQrvp", 0) __
  public typealias ID = AmityUIKit4.ComponentId
}
extension AmityUIKit4.AmityPostContentComponent {
  public class Context {
    public init(shouldShowPollResults: Swift.Bool = false, category: AmityUIKit4.AmityPostCategory = .general, shouldHideTarget: Swift.Bool = false, shouldHideMenuButton: Swift.Bool = false)
    @objc deinit
  }
}
open class AmityDraftStoryPageBehaviour {
  @_hasMissingDesignatedInitializers open class Context {
    final public let page: AmityUIKit4.AmityDraftStoryPage
    @objc deinit
  }
  public init()
  open func event1(context: AmityUIKit4.AmityDraftStoryPageBehaviour.Context)
  open func goToCameraPage(context: AmityUIKit4.AmityDraftStoryPageBehaviour.Context)
  @objc deinit
}
@_Concurrency.MainActor extension AmityUIKit4.KingfisherWrapper where Base : UIKit.UIButton {
  @discardableResult
  @_Concurrency.MainActor public func setImage(with source: AmityUIKit4.Source?, for state: UIKit.UIControl.State, placeholder: UIKit.UIImage? = nil, options: AmityUIKit4.KingfisherOptionsInfo? = nil, progressBlock: AmityUIKit4.DownloadProgressBlock? = nil, completionHandler: (@_Concurrency.MainActor @Sendable (Swift.Result<AmityUIKit4.RetrieveImageResult, AmityUIKit4.KingfisherError>) -> Swift.Void)? = nil) -> AmityUIKit4.DownloadTask?
  @discardableResult
  @_Concurrency.MainActor public func setImage(with resource: (any AmityUIKit4.Resource)?, for state: UIKit.UIControl.State, placeholder: UIKit.UIImage? = nil, options: AmityUIKit4.KingfisherOptionsInfo? = nil, progressBlock: AmityUIKit4.DownloadProgressBlock? = nil, completionHandler: (@_Concurrency.MainActor @Sendable (Swift.Result<AmityUIKit4.RetrieveImageResult, AmityUIKit4.KingfisherError>) -> Swift.Void)? = nil) -> AmityUIKit4.DownloadTask?
  @discardableResult
  @_Concurrency.MainActor public func setImage(with source: AmityUIKit4.Source?, for state: UIKit.UIControl.State, placeholder: UIKit.UIImage? = nil, parsedOptions: AmityUIKit4.KingfisherParsedOptionsInfo, progressBlock: AmityUIKit4.DownloadProgressBlock? = nil, completionHandler: (@_Concurrency.MainActor @Sendable (Swift.Result<AmityUIKit4.RetrieveImageResult, AmityUIKit4.KingfisherError>) -> Swift.Void)? = nil) -> AmityUIKit4.DownloadTask?
  @_Concurrency.MainActor public func cancelImageDownloadTask()
  @discardableResult
  @_Concurrency.MainActor public func setBackgroundImage(with source: AmityUIKit4.Source?, for state: UIKit.UIControl.State, placeholder: UIKit.UIImage? = nil, options: AmityUIKit4.KingfisherOptionsInfo? = nil, progressBlock: AmityUIKit4.DownloadProgressBlock? = nil, completionHandler: (@_Concurrency.MainActor @Sendable (Swift.Result<AmityUIKit4.RetrieveImageResult, AmityUIKit4.KingfisherError>) -> Swift.Void)? = nil) -> AmityUIKit4.DownloadTask?
  @discardableResult
  @_Concurrency.MainActor public func setBackgroundImage(with resource: (any AmityUIKit4.Resource)?, for state: UIKit.UIControl.State, placeholder: UIKit.UIImage? = nil, options: AmityUIKit4.KingfisherOptionsInfo? = nil, progressBlock: AmityUIKit4.DownloadProgressBlock? = nil, completionHandler: (@Sendable (Swift.Result<AmityUIKit4.RetrieveImageResult, AmityUIKit4.KingfisherError>) -> Swift.Void)? = nil) -> AmityUIKit4.DownloadTask?
  @_Concurrency.MainActor public func cancelBackgroundImageDownloadTask()
}
@_Concurrency.MainActor extension AmityUIKit4.KingfisherWrapper where Base : UIKit.UIButton {
  @_Concurrency.MainActor public func taskIdentifier(for state: UIKit.UIControl.State) -> AmityUIKit4.Source.Identifier.Value?
}
@_Concurrency.MainActor extension AmityUIKit4.KingfisherWrapper where Base : UIKit.UIButton {
  @_Concurrency.MainActor public func backgroundTaskIdentifier(for state: UIKit.UIControl.State) -> AmityUIKit4.Source.Identifier.Value?
}
@objc @_inheritsConvenienceInitializers public class VideoLoadManager : ObjectiveC.NSObject {
  public static let shared: AmityUIKit4.VideoLoadManager
  public var reportError: ((any Swift.Error) -> Swift.Void)?
  public var customHTTPHeaderFields: ((Foundation.URL) -> [Swift.String : Swift.String]?)?
  @objc override dynamic public init()
  @objc deinit
}
extension AmityUIKit4.VideoLoadManager : AVFoundation.AVAssetResourceLoaderDelegate {
  @objc dynamic public func resourceLoader(_ resourceLoader: AVFoundation.AVAssetResourceLoader, shouldWaitForLoadingOfRequestedResource loadingRequest: AVFoundation.AVAssetResourceLoadingRequest) -> Swift.Bool
  @objc dynamic public func resourceLoader(_ resourceLoader: AVFoundation.AVAssetResourceLoader, didCancel loadingRequest: AVFoundation.AVAssetResourceLoadingRequest)
}
public struct ImageLoadingResult : Swift.Sendable {
  public let image: AmityUIKit4.KFCrossPlatformImage
  public let url: Foundation.URL?
  public let originalData: Foundation.Data
  public init(image: AmityUIKit4.KFCrossPlatformImage, url: Foundation.URL? = nil, originalData: Foundation.Data)
}
@_hasMissingDesignatedInitializers final public class DownloadTask : @unchecked Swift.Sendable {
  final public var sessionTask: AmityUIKit4.SessionDataTask? {
    get
  }
  final public var cancelToken: AmityUIKit4.SessionDataTask.CancelToken? {
    get
  }
  final public func cancel()
  final public var isInitialized: Swift.Bool {
    get
  }
  @objc deinit
}
open class ImageDownloader : @unchecked Swift.Sendable {
  public static let `default`: AmityUIKit4.ImageDownloader
  open var downloadTimeout: Foundation.TimeInterval {
    get
    set
  }
  open var trustedHosts: Swift.Set<Swift.String>?
  open var sessionConfiguration: Foundation.URLSessionConfiguration {
    get
    set
  }
  open var sessionDelegate: AmityUIKit4.SessionDelegate {
    get
    set
  }
  open var requestsUsePipelining: Swift.Bool
  weak open var delegate: (any AmityUIKit4.ImageDownloaderDelegate)?
  weak open var authenticationChallengeResponder: (any AmityUIKit4.AuthenticationChallengeResponsible)?
  public init(name: Swift.String)
  @objc deinit
  @discardableResult
  open func downloadImage(with url: Foundation.URL, options: AmityUIKit4.KingfisherParsedOptionsInfo, completionHandler: (@Sendable (Swift.Result<AmityUIKit4.ImageLoadingResult, AmityUIKit4.KingfisherError>) -> Swift.Void)? = nil) -> AmityUIKit4.DownloadTask
  @discardableResult
  open func downloadImage(with url: Foundation.URL, options: AmityUIKit4.KingfisherOptionsInfo? = nil, progressBlock: AmityUIKit4.DownloadProgressBlock? = nil, completionHandler: (@Sendable (Swift.Result<AmityUIKit4.ImageLoadingResult, AmityUIKit4.KingfisherError>) -> Swift.Void)? = nil) -> AmityUIKit4.DownloadTask
  @discardableResult
  open func downloadImage(with url: Foundation.URL, options: AmityUIKit4.KingfisherOptionsInfo? = nil, completionHandler: (@Sendable (Swift.Result<AmityUIKit4.ImageLoadingResult, AmityUIKit4.KingfisherError>) -> Swift.Void)? = nil) -> AmityUIKit4.DownloadTask
}
extension AmityUIKit4.ImageDownloader {
  public func downloadImage(with url: Foundation.URL, options: AmityUIKit4.KingfisherParsedOptionsInfo) async throws -> AmityUIKit4.ImageLoadingResult
  public func downloadImage(with url: Foundation.URL, options: AmityUIKit4.KingfisherOptionsInfo? = nil, progressBlock: AmityUIKit4.DownloadProgressBlock? = nil) async throws -> AmityUIKit4.ImageLoadingResult
  public func downloadImage(with url: Foundation.URL, options: AmityUIKit4.KingfisherOptionsInfo? = nil) async throws -> AmityUIKit4.ImageLoadingResult
}
extension AmityUIKit4.ImageDownloader {
  public func cancelAll()
  public func cancel(url: Foundation.URL)
}
extension AmityUIKit4.ImageDownloader : AmityUIKit4.AuthenticationChallengeResponsible {
}
extension AmityUIKit4.ImageDownloader : AmityUIKit4.ImageDownloaderDelegate {
}
public protocol ImageDownloadRedirectHandler : Swift.Sendable {
  func handleHTTPRedirection(for task: AmityUIKit4.SessionDataTask, response: Foundation.HTTPURLResponse, newRequest: Foundation.URLRequest) async -> Foundation.URLRequest?
}
public struct AnyRedirectHandler : AmityUIKit4.ImageDownloadRedirectHandler {
  public func handleHTTPRedirection(for task: AmityUIKit4.SessionDataTask, response: Foundation.HTTPURLResponse, newRequest: Foundation.URLRequest) async -> Foundation.URLRequest?
  public init(handle: @escaping @Sendable (AmityUIKit4.SessionDataTask, Foundation.HTTPURLResponse, Foundation.URLRequest, @escaping (Foundation.URLRequest?) -> Swift.Void) -> Swift.Void)
}
@objc @_inheritsConvenienceInitializers public class VideoPreloadManager : ObjectiveC.NSObject {
  public static let shared: AmityUIKit4.VideoPreloadManager
  public var preloadByteCount: Swift.Int
  public var didStart: (() -> Swift.Void)?
  public var didPause: (() -> Swift.Void)?
  public var didFinish: (((any Swift.Error)?) -> Swift.Void)?
  public func set(waiting: [Foundation.URL])
  @objc override dynamic public init()
  @objc deinit
}
extension AmityUIKit4.VideoPreloadManager : AmityUIKit4.VideoDownloaderDelegate {
  public func downloader(_ downloader: AmityUIKit4.VideoDownloader, didReceive response: Foundation.URLResponse)
  public func downloader(_ downloader: AmityUIKit4.VideoDownloader, didReceive data: Foundation.Data)
  public func downloader(_ downloader: AmityUIKit4.VideoDownloader, didFinished error: (any Swift.Error)?)
}
@_Concurrency.MainActor @preconcurrency public struct AmityUserProfileHeaderComponent {
  @SwiftUICore.EnvironmentObject @_projectedValueProperty($host) @_Concurrency.MainActor @preconcurrency public var host: AmityUIKit4.AmitySwiftUIHostWrapper {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var $host: SwiftUICore.EnvironmentObject<AmityUIKit4.AmitySwiftUIHostWrapper>.Wrapper {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var pageId: AmityUIKit4.PageId?
  @_Concurrency.MainActor @preconcurrency public var id: AmityUIKit4.ComponentId {
    get
  }
  @_Concurrency.MainActor @preconcurrency public init(user: AmitySDK.AmityUser, userProfilePageViewModel: AmityUIKit4.AmityUserProfilePageViewModel? = nil, pageId: AmityUIKit4.PageId? = nil)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s11AmityUIKit40A26UserProfileHeaderComponentV4bodyQrvp", 0) __
  public typealias ID = AmityUIKit4.ComponentId
}
public class CommunityProfileViewModel : Combine.ObservableObject {
  public init(communityId: Swift.String)
  @objc deinit
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
}
@_Concurrency.MainActor @preconcurrency public struct AmityEmptyStateView : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public let configuration: AmityUIKit4.AmityEmptyStateView.Configuration
  @_Concurrency.MainActor @preconcurrency public init(configuration: AmityUIKit4.AmityEmptyStateView.Configuration)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public struct Configuration {
    public let image: Swift.String?
    public let title: Swift.String?
    public let subtitle: Swift.String?
    public let tapAction: AmityUIKit4.DefaultTapAction?
    public let iconSize: CoreFoundation.CGSize
    public let renderingMode: SwiftUICore.Image.TemplateRenderingMode
    public init(image: Swift.String?, title: Swift.String?, subtitle: Swift.String?, iconSize: CoreFoundation.CGSize = CGSize(width: 28, height: 24), renderingMode: SwiftUICore.Image.TemplateRenderingMode = .template, tapAction: AmityUIKit4.DefaultTapAction?)
  }
  public typealias Body = @_opaqueReturnTypeOf("$s11AmityUIKit40A14EmptyStateViewV4bodyQrvp", 0) __
}
@_Concurrency.MainActor extension AmityUIKit4.KingfisherWrapper where Base : UIKit.NSTextAttachment {
  @discardableResult
  @_Concurrency.MainActor public func setImage(with source: AmityUIKit4.Source?, attributedView: @autoclosure @escaping @Sendable () -> AmityUIKit4.KFCrossPlatformView, placeholder: AmityUIKit4.KFCrossPlatformImage? = nil, options: AmityUIKit4.KingfisherOptionsInfo? = nil, progressBlock: AmityUIKit4.DownloadProgressBlock? = nil, completionHandler: (@_Concurrency.MainActor @Sendable (Swift.Result<AmityUIKit4.RetrieveImageResult, AmityUIKit4.KingfisherError>) -> Swift.Void)? = nil) -> AmityUIKit4.DownloadTask?
  @discardableResult
  @_Concurrency.MainActor public func setImage(with resource: (any AmityUIKit4.Resource)?, attributedView: @autoclosure @escaping @Sendable () -> AmityUIKit4.KFCrossPlatformView, placeholder: AmityUIKit4.KFCrossPlatformImage? = nil, options: AmityUIKit4.KingfisherOptionsInfo? = nil, progressBlock: AmityUIKit4.DownloadProgressBlock? = nil, completionHandler: (@_Concurrency.MainActor @Sendable (Swift.Result<AmityUIKit4.RetrieveImageResult, AmityUIKit4.KingfisherError>) -> Swift.Void)? = nil) -> AmityUIKit4.DownloadTask?
  @_Concurrency.MainActor public func cancelDownloadTask()
}
@_Concurrency.MainActor extension AmityUIKit4.KingfisherWrapper where Base : UIKit.NSTextAttachment {
  @_Concurrency.MainActor public var taskIdentifier: AmityUIKit4.Source.Identifier.Value? {
    get
  }
}
@available(macOS 11.0, iOS 14.0, tvOS 14.0, watchOS 7.0, *)
public class FileIndex {
  public struct Configuration {
    public var directoryURL: Foundation.URL
    public var name: Swift.String
    public var filesDirectoryName: Swift.String
    public init(name: Swift.String, filesDirectoryName: Swift.String, baseDirectoryName: Swift.String)
    public init(name: Swift.String, filesDirectoryName: Swift.String, directoryURL: Foundation.URL)
    public var filesDirectoryURL: Foundation.URL {
      get
    }
  }
  final public let configuration: AmityUIKit4.FileIndex.Configuration
  public init(configuration: AmityUIKit4.FileIndex.Configuration)
  public func location(of file: AmityUIKit4.File) -> Foundation.URL
  @discardableResult
  public func move(_ sourceLocation: Foundation.URL, originalURL: Foundation.URL, identifier: Swift.String? = nil, fileName: Swift.String? = nil, fileExtension: Swift.String? = nil, expireAfter expiryInterval: Foundation.TimeInterval? = nil) throws -> AmityUIKit4.File
  @discardableResult
  public func write(_ data: Foundation.Data, originalURL: Foundation.URL, identifier: Swift.String? = nil, fileName: Swift.String? = nil, fileExtension: Swift.String? = nil, expireAfter expiryInterval: Foundation.TimeInterval? = nil) throws -> AmityUIKit4.File
  public func get(_ originalURL: Foundation.URL) -> [AmityUIKit4.File]
  public func get(_ identifier: Swift.String) -> [AmityUIKit4.File]
  public func delete(_ file: AmityUIKit4.File)
  public func deleteAll(_ completion: (() -> Swift.Void)? = nil)
  public func deleteExpired(_ completion: (() -> Swift.Void)? = nil)
  @objc deinit
}
public typealias ManagedObjectCodable = AmityUIKit4.ManagedObjectDecodable & AmityUIKit4.ManagedObjectEncodable
public protocol ManagedObjectDecodable {
  init?(managedObject: CoreData.NSManagedObject)
}
public protocol ManagedObjectEncodable {
  func encode(to: CoreData.NSManagedObject)
}
@_Concurrency.MainActor @preconcurrency public struct AmityPollPostComposerPage : AmityUIKit4.AmityPageView {
  @_Concurrency.MainActor @preconcurrency public var id: AmityUIKit4.PageId {
    get
  }
  @_Concurrency.MainActor @preconcurrency public init(targetId: Swift.String?, targetType: AmitySDK.AmityPostTargetType)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s11AmityUIKit40A20PollPostComposerPageV4bodyQrvp", 0) __
  public typealias ID = AmityUIKit4.PageId
}
@_Concurrency.MainActor @preconcurrency public struct AmityCommunityProfilePage : AmityUIKit4.AmityPageView {
  @SwiftUICore.EnvironmentObject @_projectedValueProperty($host) @_Concurrency.MainActor @preconcurrency public var host: AmityUIKit4.AmitySwiftUIHostWrapper {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var $host: SwiftUICore.EnvironmentObject<AmityUIKit4.AmitySwiftUIHostWrapper>.Wrapper {
    get
  }
  @_Concurrency.MainActor @preconcurrency public let communityId: Swift.String
  @_Concurrency.MainActor @preconcurrency public var id: AmityUIKit4.PageId {
    get
  }
  @_Concurrency.MainActor @preconcurrency public init(communityId: Swift.String)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s11AmityUIKit40A20CommunityProfilePageV4bodyQrvp", 0) __
  public typealias ID = AmityUIKit4.PageId
}
@_Concurrency.MainActor @preconcurrency public struct AmityCommunityAddCategoryPage : AmityUIKit4.AmityPageView {
  @SwiftUICore.EnvironmentObject @_projectedValueProperty($host) @_Concurrency.MainActor @preconcurrency public var host: AmityUIKit4.AmitySwiftUIHostWrapper {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var $host: SwiftUICore.EnvironmentObject<AmityUIKit4.AmitySwiftUIHostWrapper>.Wrapper {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var id: AmityUIKit4.PageId {
    get
  }
  @_Concurrency.MainActor @preconcurrency public init(categories: [AmityUIKit4.AmityCommunityCategoryModel], onAddedAction: @escaping ([AmityUIKit4.AmityCommunityCategoryModel]) -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s11AmityUIKit40A24CommunityAddCategoryPageV4bodyQrvp", 0) __
  public typealias ID = AmityUIKit4.PageId
}
@_hasMissingDesignatedInitializers @available(macOS 11.0, iOS 14.0, tvOS 14.0, watchOS 7.0, *)
final public class URLImageFileStore {
  convenience public init()
  final public func getImage(_ identifier: Swift.String, maxPixelSize: CoreFoundation.CGSize? = nil, completionQueue: Dispatch.DispatchQueue? = nil, completion: @escaping (_ image: CoreGraphics.CGImage?) -> Swift.Void)
  final public func getImage(_ url: Foundation.URL, maxPixelSize: CoreFoundation.CGSize? = nil, completionQueue: Dispatch.DispatchQueue? = nil, completion: @escaping (_ image: CoreGraphics.CGImage?) -> Swift.Void)
  final public func getImageLocation(_ identifier: Swift.String, completionQueue: Dispatch.DispatchQueue? = nil, completion: @escaping (_ location: Foundation.URL?) -> Swift.Void)
  final public func getImageLocation(_ url: Foundation.URL, completionQueue: Dispatch.DispatchQueue? = nil, completion: @escaping (_ location: Foundation.URL?) -> Swift.Void)
  @objc deinit
}
@available(macOS 11.0, iOS 14.0, tvOS 14.0, watchOS 7.0, *)
extension AmityUIKit4.URLImageFileStore : AmityUIKit4.URLImageFileStoreType {
  final public func removeAllImages()
  final public func removeImageWithURL(_ url: Foundation.URL)
  final public func removeImageWithIdentifier(_ identifier: Swift.String)
  final public func getImage<T>(_ keys: [AmityUIKit4.URLImageKey], open: @escaping (_ location: Foundation.URL) throws -> T?, completion: @escaping (_ result: Swift.Result<T?, any Swift.Error>) -> Swift.Void)
  final public func storeImageData(_ data: Foundation.Data, info: AmityUIKit4.URLImageStoreInfo)
  final public func moveImageFile(from location: Foundation.URL, info: AmityUIKit4.URLImageStoreInfo)
}
public enum ReactionType : Swift.String {
  case like
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@available(macOS 11.0, iOS 14.0, tvOS 14.0, watchOS 7.0, *)
extension AmityUIKit4.URLImageService {
  public struct RemoteImagePublisher : Combine.Publisher {
    public typealias Output = AmityUIKit4.ImageInfo
    public typealias Failure = Swift.Error
    public func receive<S>(subscriber: S) where S : Combine.Subscriber, S.Failure == any Swift.Error, S.Input == AmityUIKit4.ImageInfo
  }
  public func makeRemoteImage(url: Foundation.URL, identifier: Swift.String?, options: AmityUIKit4.URLImageOptions) -> AmityUIKit4.RemoteImage
  public func remoteImagePublisher(_ url: Foundation.URL, identifier: Swift.String?, options: AmityUIKit4.URLImageOptions = URLImageOptions()) -> AmityUIKit4.URLImageService.RemoteImagePublisher
}
@objc @_inheritsConvenienceInitializers public class VideoFullscreenTransitioner : ObjectiveC.NSObject {
  public var playerView: AmityUIKit4.VideoPlayerView?
  public var duration: Swift.Double
  public var fullscreenControls: [UIKit.UIView]
  public var fullscreenPlayerView: AmityUIKit4.VideoFullscreenPlayerView?
  public var fullscreenVideoGravity: AVFoundation.AVLayerVideoGravity?
  @objc override dynamic public init()
  @objc deinit
}
extension AmityUIKit4.VideoFullscreenTransitioner : UIKit.UIViewControllerTransitioningDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func animationController(forPresented presented: UIKit.UIViewController, presenting: UIKit.UIViewController, source: UIKit.UIViewController) -> (any UIKit.UIViewControllerAnimatedTransitioning)?
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func animationController(forDismissed dismissed: UIKit.UIViewController) -> (any UIKit.UIViewControllerAnimatedTransitioning)?
}
extension AmityUIKit4.VideoFullscreenTransitioner : UIKit.UIViewControllerAnimatedTransitioning {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func transitionDuration(using transitionContext: (any UIKit.UIViewControllerContextTransitioning)?) -> Foundation.TimeInterval
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func animateTransition(using transitionContext: any UIKit.UIViewControllerContextTransitioning)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func interruptibleAnimator(using transitionContext: any UIKit.UIViewControllerContextTransitioning) -> any UIKit.UIViewImplicitlyAnimating
}
@available(macOS 11.0, iOS 14.0, tvOS 14.0, watchOS 7.0, *)
public struct TransientImage {
  public var cgImage: CoreGraphics.CGImage {
    get
  }
  public let info: AmityUIKit4.ImageInfo
  public let uti: Swift.String
  public let cgOrientation: ImageIO.CGImagePropertyOrientation
}
@_Concurrency.MainActor @preconcurrency public struct AmityUserSearchResultComponent {
  @SwiftUICore.EnvironmentObject @_projectedValueProperty($host) @_Concurrency.MainActor @preconcurrency public var host: AmityUIKit4.AmitySwiftUIHostWrapper {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var $host: SwiftUICore.EnvironmentObject<AmityUIKit4.AmitySwiftUIHostWrapper>.Wrapper {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var pageId: AmityUIKit4.PageId?
  @_Concurrency.MainActor @preconcurrency public var id: AmityUIKit4.ComponentId {
    get
  }
  @_Concurrency.MainActor @preconcurrency public init(viewModel: AmityUIKit4.AmityGlobalSearchViewModel, pageId: AmityUIKit4.PageId? = nil)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s11AmityUIKit40A25UserSearchResultComponentV4bodyQrvp", 0) __
  public typealias ID = AmityUIKit4.ComponentId
}
@_Concurrency.MainActor @preconcurrency public struct AmityCreateLivestreamPage : AmityUIKit4.AmityPageView {
  @SwiftUICore.EnvironmentObject @_projectedValueProperty($host) @_Concurrency.MainActor @preconcurrency public var host: AmityUIKit4.AmitySwiftUIHostWrapper {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var $host: SwiftUICore.EnvironmentObject<AmityUIKit4.AmitySwiftUIHostWrapper>.Wrapper {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var id: AmityUIKit4.PageId {
    get
  }
  @_Concurrency.MainActor @preconcurrency public init(targetId: Swift.String, targetType: AmitySDK.AmityPostTargetType)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s11AmityUIKit40A20CreateLivestreamPageV4bodyQrvp", 0) __
  public typealias ID = AmityUIKit4.PageId
}
open class AmityMyCommunitiesComponentBehavior {
  @_hasMissingDesignatedInitializers open class Context {
    final public let component: AmityUIKit4.AmityMyCommunitiesComponent
    @objc deinit
  }
  public init()
  open func goToCommunityProfilePage(context: AmityUIKit4.AmityMyCommunitiesComponentBehavior.Context)
  @objc deinit
}
@available(iOS 14.0, tvOS 14.0, macOS 11.0, watchOS 7.0, *)
public struct CoreDataFetchIndexDescription {
  public struct Element {
    public enum Property {
      case property(name: Swift.String)
    }
    public static func property(name: Swift.String, type: CoreData.NSFetchIndexElementType = .binary, ascending: Swift.Bool = true) -> AmityUIKit4.CoreDataFetchIndexDescription.Element
    public var property: AmityUIKit4.CoreDataFetchIndexDescription.Element.Property
    public var type: CoreData.NSFetchIndexElementType
    public var ascending: Swift.Bool
  }
  public static func index(name: Swift.String, elements: [AmityUIKit4.CoreDataFetchIndexDescription.Element]) -> AmityUIKit4.CoreDataFetchIndexDescription
  public var name: Swift.String
  public var elements: [AmityUIKit4.CoreDataFetchIndexDescription.Element]
}
@_Concurrency.MainActor @preconcurrency public struct AmityCommunityNotificationSettingPage : AmityUIKit4.AmityPageView {
  @SwiftUICore.EnvironmentObject @_projectedValueProperty($host) @_Concurrency.MainActor @preconcurrency public var host: AmityUIKit4.AmitySwiftUIHostWrapper {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var $host: SwiftUICore.EnvironmentObject<AmityUIKit4.AmitySwiftUIHostWrapper>.Wrapper {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var id: AmityUIKit4.PageId {
    get
  }
  @_Concurrency.MainActor @preconcurrency public init(community: AmitySDK.AmityCommunity)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s11AmityUIKit40A32CommunityNotificationSettingPageV4bodyQrvp", 0) __
  public typealias ID = AmityUIKit4.PageId
}
public protocol VideoDownloaderDelegate : AnyObject {
  func downloader(_ downloader: AmityUIKit4.VideoDownloader, didReceive response: Foundation.URLResponse)
  func downloader(_ downloader: AmityUIKit4.VideoDownloader, didReceive data: Foundation.Data)
  func downloader(_ downloader: AmityUIKit4.VideoDownloader, didFinished error: (any Swift.Error)?)
}
public class VideoDownloader {
  weak public var delegate: (any AmityUIKit4.VideoDownloaderDelegate)?
  final public let url: Foundation.URL
  public init(url: Foundation.URL, cacheHandler: AmityUIKit4.VideoCacheHandler)
  public func downloadToEnd(from offset: Swift.Int)
  public func download(from offset: Swift.Int, length: Swift.Int)
  public func resume()
  public func suspend()
  public func cancel()
  @objc deinit
}
@_Concurrency.MainActor @preconcurrency public struct AmityLiveChatHeader {
  @_Concurrency.MainActor @preconcurrency public var pageId: AmityUIKit4.PageId?
  @_Concurrency.MainActor @preconcurrency public var id: AmityUIKit4.ComponentId {
    get
  }
  @_Concurrency.MainActor @preconcurrency public init(viewModel: AmityUIKit4.AmityLiveChatPageViewModel, pageId: AmityUIKit4.PageId? = .liveChatPage)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s11AmityUIKit40A14LiveChatHeaderV4bodyQrvp", 0) __
  public typealias ID = AmityUIKit4.ComponentId
}
extension AmityUIKit4.AmityLiveChatHeader {
  @_Concurrency.MainActor @preconcurrency public struct AmityMemberCountView {
    @_Concurrency.MainActor @preconcurrency public var pageId: AmityUIKit4.PageId?
    @_Concurrency.MainActor @preconcurrency public var componentId: AmityUIKit4.ComponentId?
    @_Concurrency.MainActor @preconcurrency public var id: AmityUIKit4.ElementId {
      get
    }
    @_Concurrency.MainActor @preconcurrency public init(pageId: AmityUIKit4.PageId? = nil, componentId: AmityUIKit4.ComponentId? = nil, memberCount: Swift.Int)
    @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
      get
    }
    public typealias Body = @_opaqueReturnTypeOf("$s11AmityUIKit40A14LiveChatHeaderV0A15MemberCountViewV4bodyQrvp", 0) __
    public typealias ID = AmityUIKit4.ElementId
  }
  @_Concurrency.MainActor @preconcurrency public struct AmityConnectivityView {
    @_Concurrency.MainActor @preconcurrency public var pageId: AmityUIKit4.PageId?
    @_Concurrency.MainActor @preconcurrency public var componentId: AmityUIKit4.ComponentId?
    @_Concurrency.MainActor @preconcurrency public var id: AmityUIKit4.ElementId {
      get
    }
    @_Concurrency.MainActor @preconcurrency public init(pageId: AmityUIKit4.PageId? = nil, componentId: AmityUIKit4.ComponentId? = nil)
    @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
      get
    }
    public typealias Body = @_opaqueReturnTypeOf("$s11AmityUIKit40A14LiveChatHeaderV0A16ConnectivityViewV4bodyQrvp", 0) __
    public typealias ID = AmityUIKit4.ElementId
  }
  @_Concurrency.MainActor @preconcurrency public struct AmityAvatarView {
    @_Concurrency.MainActor @preconcurrency public var pageId: AmityUIKit4.PageId?
    @_Concurrency.MainActor @preconcurrency public var componentId: AmityUIKit4.ComponentId?
    @_Concurrency.MainActor @preconcurrency public var id: AmityUIKit4.ElementId {
      get
    }
    @_Concurrency.MainActor @preconcurrency public init(pageId: AmityUIKit4.PageId? = nil, componentId: AmityUIKit4.ComponentId? = nil, avatarURL: Foundation.URL?)
    @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
      get
    }
    public typealias Body = @_opaqueReturnTypeOf("$s11AmityUIKit40A14LiveChatHeaderV0A10AvatarViewV4bodyQrvp", 0) __
    public typealias ID = AmityUIKit4.ElementId
  }
}
@_Concurrency.MainActor @preconcurrency public struct AmityCommentTrayComponent {
  @SwiftUICore.EnvironmentObject @_projectedValueProperty($host) @_Concurrency.MainActor @preconcurrency public var host: AmityUIKit4.AmitySwiftUIHostWrapper {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var $host: SwiftUICore.EnvironmentObject<AmityUIKit4.AmitySwiftUIHostWrapper>.Wrapper {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var pageId: AmityUIKit4.PageId?
  @_Concurrency.MainActor @preconcurrency public var id: AmityUIKit4.ComponentId {
    get
  }
  @_Concurrency.MainActor @preconcurrency public init(referenceId: Swift.String, referenceType: AmitySDK.AmityCommentReferenceType, community: AmitySDK.AmityCommunity? = nil, shouldAllowInteraction: Swift.Bool = false, shouldAllowCreation: Swift.Bool = false, pageId: AmityUIKit4.PageId? = nil)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s11AmityUIKit40A20CommentTrayComponentV4bodyQrvp", 0) __
  public typealias ID = AmityUIKit4.ComponentId
}
@_Concurrency.MainActor @preconcurrency public struct AmityUserFeedComponent {
  @SwiftUICore.EnvironmentObject @_projectedValueProperty($host) @_Concurrency.MainActor @preconcurrency public var host: AmityUIKit4.AmitySwiftUIHostWrapper {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var $host: SwiftUICore.EnvironmentObject<AmityUIKit4.AmitySwiftUIHostWrapper>.Wrapper {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var pageId: AmityUIKit4.PageId?
  @_Concurrency.MainActor @preconcurrency public var id: AmityUIKit4.ComponentId {
    get
  }
  @_Concurrency.MainActor @preconcurrency public init(userId: Swift.String, userProfilePageViewModel: AmityUIKit4.AmityUserProfilePageViewModel? = nil, pageId: AmityUIKit4.PageId? = nil)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s11AmityUIKit40A17UserFeedComponentV4bodyQrvp", 0) __
  public typealias ID = AmityUIKit4.ComponentId
}
extension AmityUIKit4.KingfisherWrapper where Base : UIKit.UIImage {
  public var imageFrameCount: Swift.Int? {
    get
    set
  }
  public var imageSource: ImageIO.CGImageSource? {
    get
  }
  public var frameSource: (any AmityUIKit4.ImageFrameSource)? {
    get
  }
}
extension AmityUIKit4.KingfisherWrapper where Base : UIKit.UIImage {
  public var normalized: AmityUIKit4.KFCrossPlatformImage {
    get
  }
}
extension AmityUIKit4.KingfisherWrapper where Base : UIKit.UIImage {
  public func pngRepresentation() -> Foundation.Data?
  public func jpegRepresentation(compressionQuality: CoreFoundation.CGFloat) -> Foundation.Data?
  public func gifRepresentation() -> Foundation.Data?
  public func data(format: AmityUIKit4.ImageFormat, compressionQuality: CoreFoundation.CGFloat = 1.0) -> Foundation.Data?
}
extension AmityUIKit4.KingfisherWrapper where Base : UIKit.UIImage {
  public static func animatedImage(data: Foundation.Data, options: AmityUIKit4.ImageCreatingOptions) -> AmityUIKit4.KFCrossPlatformImage?
  public static func animatedImage(source: any AmityUIKit4.ImageFrameSource, options: AmityUIKit4.ImageCreatingOptions, baseImage: AmityUIKit4.KFCrossPlatformImage? = nil) -> AmityUIKit4.KFCrossPlatformImage?
  public static func image(data: Foundation.Data, options: AmityUIKit4.ImageCreatingOptions) -> AmityUIKit4.KFCrossPlatformImage?
  public static func downsampledImage(data: Foundation.Data, to pointSize: CoreFoundation.CGSize, scale: CoreFoundation.CGFloat) -> AmityUIKit4.KFCrossPlatformImage?
}
open class AmityPostContentComponentBehavior {
  @_hasMissingDesignatedInitializers open class Context {
    final public let component: AmityUIKit4.AmityPostContentComponent
    final public let userId: Swift.String?
    @objc deinit
  }
  public init()
  open func goToCommunityProfilePage(context: AmityUIKit4.AmityPostContentComponentBehavior.Context)
  open func goToUserProfilePage(context: AmityUIKit4.AmityPostContentComponentBehavior.Context)
  open func goToPostComposerPage(context: AmityUIKit4.AmityPostContentComponentBehavior.Context)
  @objc deinit
}
public struct HyperLinkModel {
  public var url: Swift.String
  public var urlName: Swift.String
  public func getDomainName() -> Swift.String?
  public func getCustomName() -> Swift.String
}
@_Concurrency.MainActor @preconcurrency public struct AmityHyperLinkConfigComponent {
  @_Concurrency.MainActor @preconcurrency public var pageId: AmityUIKit4.PageId?
  @_Concurrency.MainActor @preconcurrency public var id: AmityUIKit4.ComponentId {
    get
  }
  @_Concurrency.MainActor @preconcurrency public init(isPresented: SwiftUICore.Binding<Swift.Bool>, data: SwiftUICore.Binding<AmityUIKit4.HyperLinkModel>, pageId: AmityUIKit4.PageId?)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s11AmityUIKit40A24HyperLinkConfigComponentV4bodyQrvp", 0) __
  public typealias ID = AmityUIKit4.ComponentId
}
@_hasMissingDesignatedInitializers public class AmityHyperLinkConfigComponentViewModel : Combine.ObservableObject {
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
@_Concurrency.MainActor @preconcurrency public struct AmityCommunityPostsNotificationSettingPage : AmityUIKit4.AmityPageView {
  @SwiftUICore.EnvironmentObject @_projectedValueProperty($host) @_Concurrency.MainActor @preconcurrency public var host: AmityUIKit4.AmitySwiftUIHostWrapper {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var $host: SwiftUICore.EnvironmentObject<AmityUIKit4.AmitySwiftUIHostWrapper>.Wrapper {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var id: AmityUIKit4.PageId {
    get
  }
  @_Concurrency.MainActor @preconcurrency public init(community: AmitySDK.AmityCommunity)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s11AmityUIKit40A37CommunityPostsNotificationSettingPageV4bodyQrvp", 0) __
  public typealias ID = AmityUIKit4.PageId
}
@_Concurrency.MainActor @preconcurrency public struct AmityCommunityPinnedPostComponent {
  @_Concurrency.MainActor @preconcurrency public var pageId: AmityUIKit4.PageId?
  @_Concurrency.MainActor @preconcurrency public var id: AmityUIKit4.ComponentId {
    get
  }
  @_Concurrency.MainActor @preconcurrency public init(communityId: Swift.String, pageId: AmityUIKit4.PageId? = nil, communityProfileViewModel: AmityUIKit4.CommunityProfileViewModel? = nil, onTapAction: ((AmityUIKit4.AmityPostModel, AmityUIKit4.AmityPostContentComponent.Context?) -> Swift.Void)? = nil)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s11AmityUIKit40A28CommunityPinnedPostComponentV4bodyQrvp", 0) __
  public typealias ID = AmityUIKit4.ComponentId
}
@_Concurrency.MainActor @preconcurrency public struct AmityUserVideoFeedComponent {
  @_Concurrency.MainActor @preconcurrency public var pageId: AmityUIKit4.PageId?
  @_Concurrency.MainActor @preconcurrency public var id: AmityUIKit4.ComponentId {
    get
  }
  @_Concurrency.MainActor @preconcurrency public init(userId: Swift.String, userProfilePageViewModel: AmityUIKit4.AmityUserProfilePageViewModel? = nil, pageId: AmityUIKit4.PageId? = nil)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s11AmityUIKit40A22UserVideoFeedComponentV4bodyQrvp", 0) __
  public typealias ID = AmityUIKit4.ComponentId
}
public typealias DownloadProgressBlock = (_ receivedSize: Swift.Int64, _ totalSize: Swift.Int64) -> Swift.Void
public struct RetrieveImageResult : Swift.Sendable {
  public let image: AmityUIKit4.KFCrossPlatformImage
  public let cacheType: AmityUIKit4.CacheType
  public let source: AmityUIKit4.Source
  public let originalSource: AmityUIKit4.Source
  public let data: @Sendable () -> Foundation.Data?
}
public struct PropagationError : Swift.Sendable {
  public let source: AmityUIKit4.Source
  public let error: AmityUIKit4.KingfisherError
}
public typealias DownloadTaskUpdatedBlock = @Sendable (_ newTask: AmityUIKit4.DownloadTask?) -> Swift.Void
public class KingfisherManager : @unchecked Swift.Sendable {
  public static let shared: AmityUIKit4.KingfisherManager
  public var cache: AmityUIKit4.ImageCache {
    get
    set
  }
  public var downloader: AmityUIKit4.ImageDownloader {
    get
    set
  }
  public var defaultOptions: AmityUIKit4.KingfisherOptionsInfo
  public init(downloader: AmityUIKit4.ImageDownloader, cache: AmityUIKit4.ImageCache)
  @discardableResult
  public func retrieveImage(with resource: any AmityUIKit4.Resource, options: AmityUIKit4.KingfisherOptionsInfo? = nil, progressBlock: AmityUIKit4.DownloadProgressBlock? = nil, downloadTaskUpdated: AmityUIKit4.DownloadTaskUpdatedBlock? = nil, completionHandler: (@Sendable (Swift.Result<AmityUIKit4.RetrieveImageResult, AmityUIKit4.KingfisherError>) -> Swift.Void)?) -> AmityUIKit4.DownloadTask?
  @discardableResult
  public func retrieveImage(with source: AmityUIKit4.Source, options: AmityUIKit4.KingfisherOptionsInfo? = nil, progressBlock: AmityUIKit4.DownloadProgressBlock? = nil, downloadTaskUpdated: AmityUIKit4.DownloadTaskUpdatedBlock? = nil, completionHandler: (@Sendable (Swift.Result<AmityUIKit4.RetrieveImageResult, AmityUIKit4.KingfisherError>) -> Swift.Void)?) -> AmityUIKit4.DownloadTask?
  @objc deinit
}
extension AmityUIKit4.KingfisherManager {
  public func retrieveImage(with resource: any AmityUIKit4.Resource, options: AmityUIKit4.KingfisherOptionsInfo? = nil, progressBlock: AmityUIKit4.DownloadProgressBlock? = nil) async throws -> AmityUIKit4.RetrieveImageResult
  public func retrieveImage(with source: AmityUIKit4.Source, options: AmityUIKit4.KingfisherOptionsInfo? = nil, progressBlock: AmityUIKit4.DownloadProgressBlock? = nil) async throws -> AmityUIKit4.RetrieveImageResult
}
open class AmityCreateStoryPageBehaviour {
  @_hasMissingDesignatedInitializers open class Context {
    final public let page: AmityUIKit4.AmityCreateStoryPage
    public var targetId: Swift.String
    public var targetType: AmitySDK.AmityStoryTargetType
    public var outputImage: (UIKit.UIImage?, Foundation.URL?)
    public var outputVideo: Foundation.URL?
    @objc deinit
  }
  public init()
  open func goToDraftStoryPage(context: AmityUIKit4.AmityCreateStoryPageBehaviour.Context)
  @objc deinit
}
extension AmityUIKit4.KingfisherWrapper where Base : UIKit.UIImage {
  public func image(withBlendMode blendMode: CoreGraphics.CGBlendMode, alpha: CoreFoundation.CGFloat = 1.0, backgroundColor: AmityUIKit4.KFCrossPlatformColor? = nil) -> AmityUIKit4.KFCrossPlatformImage
  public func image(withRadius radius: AmityUIKit4.Radius, fit size: CoreFoundation.CGSize, roundingCorners corners: AmityUIKit4.RectCorner = .all, backgroundColor: AmityUIKit4.KFCrossPlatformColor? = nil) -> AmityUIKit4.KFCrossPlatformImage
  public func image(withRoundRadius radius: CoreFoundation.CGFloat, fit size: CoreFoundation.CGSize, roundingCorners corners: AmityUIKit4.RectCorner = .all, backgroundColor: AmityUIKit4.KFCrossPlatformColor? = nil) -> AmityUIKit4.KFCrossPlatformImage
  public func resize(to size: CoreFoundation.CGSize) -> AmityUIKit4.KFCrossPlatformImage
  public func resize(to targetSize: CoreFoundation.CGSize, for contentMode: AmityUIKit4.KingfisherContentMode) -> AmityUIKit4.KFCrossPlatformImage
  public func crop(to size: CoreFoundation.CGSize, anchorOn anchor: CoreFoundation.CGPoint) -> AmityUIKit4.KFCrossPlatformImage
  public func blurred(withRadius radius: CoreFoundation.CGFloat) -> AmityUIKit4.KFCrossPlatformImage
  public func addingBorder(_ border: AmityUIKit4.Border) -> AmityUIKit4.KFCrossPlatformImage
  public func overlaying(with color: AmityUIKit4.KFCrossPlatformColor, fraction: CoreFoundation.CGFloat) -> AmityUIKit4.KFCrossPlatformImage
  public func tinted(with color: AmityUIKit4.KFCrossPlatformColor) -> AmityUIKit4.KFCrossPlatformImage
  public func adjusted(brightness: CoreFoundation.CGFloat, contrast: CoreFoundation.CGFloat, saturation: CoreFoundation.CGFloat, inputEV: CoreFoundation.CGFloat) -> AmityUIKit4.KFCrossPlatformImage
  public func scaled(to scale: CoreFoundation.CGFloat) -> AmityUIKit4.KFCrossPlatformImage
}
extension AmityUIKit4.KingfisherWrapper where Base : UIKit.UIImage {
  public var decoded: AmityUIKit4.KFCrossPlatformImage {
    get
  }
  public func decoded(scale: CoreFoundation.CGFloat) -> AmityUIKit4.KFCrossPlatformImage
  public func decoded(on context: CoreGraphics.CGContext) -> AmityUIKit4.KFCrossPlatformImage
}
public enum KF {
  public static func source(_ source: AmityUIKit4.Source?) -> AmityUIKit4.KF.Builder
  public static func resource(_ resource: (any AmityUIKit4.Resource)?) -> AmityUIKit4.KF.Builder
  public static func url(_ url: Foundation.URL?, cacheKey: Swift.String? = nil) -> AmityUIKit4.KF.Builder
  public static func dataProvider(_ provider: (any AmityUIKit4.ImageDataProvider)?) -> AmityUIKit4.KF.Builder
  public static func data(_ data: Foundation.Data?, cacheKey: Swift.String) -> AmityUIKit4.KF.Builder
}
extension AmityUIKit4.KF {
  @_hasMissingDesignatedInitializers public class Builder : @unchecked Swift.Sendable {
    public var options: AmityUIKit4.KingfisherParsedOptionsInfo {
      get
      set
    }
    final public let onFailureDelegate: AmityUIKit4.Delegate<AmityUIKit4.KingfisherError, Swift.Void>
    final public let onSuccessDelegate: AmityUIKit4.Delegate<AmityUIKit4.RetrieveImageResult, Swift.Void>
    final public let onProgressDelegate: AmityUIKit4.Delegate<(Swift.Int64, Swift.Int64), Swift.Void>
    @objc deinit
  }
}
@_Concurrency.MainActor extension AmityUIKit4.KF.Builder {
  @discardableResult
  @_Concurrency.MainActor public func set(to imageView: AmityUIKit4.KFCrossPlatformImageView) -> AmityUIKit4.DownloadTask?
  @discardableResult
  @_Concurrency.MainActor public func set(to attachment: UIKit.NSTextAttachment, attributedView: @autoclosure @escaping @Sendable () -> AmityUIKit4.KFCrossPlatformView) -> AmityUIKit4.DownloadTask?
  @discardableResult
  @_Concurrency.MainActor public func set(to button: UIKit.UIButton, for state: UIKit.UIControl.State) -> AmityUIKit4.DownloadTask?
  @discardableResult
  @_Concurrency.MainActor public func setBackground(to button: UIKit.UIButton, for state: UIKit.UIControl.State) -> AmityUIKit4.DownloadTask?
  @available(iOS 14.0, *)
  @discardableResult
  @_Concurrency.MainActor public func set(to listItem: CarPlay.CPListItem) -> AmityUIKit4.DownloadTask?
}
extension AmityUIKit4.KF.Builder {
  public func placeholder(_ placeholder: (any AmityUIKit4.Placeholder)?) -> Self
  public func placeholder(_ image: AmityUIKit4.KFCrossPlatformImage?) -> Self
}
extension AmityUIKit4.KF.Builder {
  public func transition(_ transition: AmityUIKit4.ImageTransition) -> Self
  public func fade(duration: Foundation.TimeInterval) -> Self
  public func keepCurrentImageWhileLoading(_ enabled: Swift.Bool = true) -> Self
  public func onlyLoadFirstFrame(_ enabled: Swift.Bool = true) -> Self
  public func progressiveJPEG(_ progressive: AmityUIKit4.ImageProgressive? = .init()) -> Self
}
extension AmityUIKit4.KF.Builder {
  @available(*, deprecated, message: "This is not necessary anymore since `@StateObject` is used. It does nothing now and please just remove it.")
  public func loadImmediately(_ start: Swift.Bool = true) -> Self
}
extension AmityUIKit4.KF {
  public struct RedirectPayload {
    public let task: AmityUIKit4.SessionDataTask
    public let response: Foundation.HTTPURLResponse
    public let newRequest: Foundation.URLRequest
    public let completionHandler: (Foundation.URLRequest?) -> Swift.Void
  }
}
extension AVFoundation.AVPlayer {
  @_Concurrency.MainActor @preconcurrency public var bufferProgress: Swift.Double {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var currentBufferDuration: Swift.Double {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var currentDuration: Swift.Double {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var currentImage: UIKit.UIImage? {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var playProgress: Swift.Double {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var totalDuration: Swift.Double {
    get
  }
  @_Concurrency.MainActor @preconcurrency convenience public init(asset: AVFoundation.AVURLAsset)
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_Concurrency.MainActor public protocol KFImageProtocol : AmityUIKit4.KFOptionSetter, SwiftUICore.View {
  associatedtype HoldingView : AmityUIKit4.KFImageHoldingView
  @_Concurrency.MainActor var context: AmityUIKit4.KFImage.Context<Self.HoldingView> { get set }
  @_Concurrency.MainActor init(context: AmityUIKit4.KFImage.Context<Self.HoldingView>)
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension AmityUIKit4.KFImageProtocol {
  @_Concurrency.MainActor public var body: some SwiftUICore.View {
    get
  }
  @_Concurrency.MainActor public init(source: AmityUIKit4.Source?)
  @_Concurrency.MainActor public init(_ url: Foundation.URL?)
  @_Concurrency.MainActor public func configure(_ block: @escaping (Self.HoldingView) -> Self.HoldingView) -> Self
  @_Concurrency.MainActor public func contentConfigure<V>(_ block: @escaping (Self.HoldingView) -> V) -> Self where V : SwiftUICore.View
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
@_Concurrency.MainActor public protocol KFImageHoldingView : SwiftUICore.View {
  associatedtype RenderingView
  @_Concurrency.MainActor static func created(from image: AmityUIKit4.KFCrossPlatformImage?, context: AmityUIKit4.KFImage.Context<Self>) -> Self
}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension AmityUIKit4.KFImageProtocol {
  @_Concurrency.MainActor public var options: AmityUIKit4.KingfisherParsedOptionsInfo {
    get
    nonmutating set
  }
  @_Concurrency.MainActor public var onFailureDelegate: AmityUIKit4.Delegate<AmityUIKit4.KingfisherError, Swift.Void> {
    get
  }
  @_Concurrency.MainActor public var onSuccessDelegate: AmityUIKit4.Delegate<AmityUIKit4.RetrieveImageResult, Swift.Void> {
    get
  }
  @_Concurrency.MainActor public var onProgressDelegate: AmityUIKit4.Delegate<(Swift.Int64, Swift.Int64), Swift.Void> {
    get
  }
  @_Concurrency.MainActor public var delegateObserver: Swift.AnyObject {
    get
  }
}
@_Concurrency.MainActor @preconcurrency public struct AmityAllCategoriesPage : AmityUIKit4.AmityPageView {
  @_Concurrency.MainActor @preconcurrency public var id: AmityUIKit4.PageId {
    get
  }
  @_Concurrency.MainActor @preconcurrency public init()
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s11AmityUIKit40A17AllCategoriesPageV4bodyQrvp", 0) __
  public typealias ID = AmityUIKit4.PageId
}
extension CoreFoundation.CGSize : AmityUIKit4.KingfisherCompatibleValue {
}
extension AmityUIKit4.KingfisherWrapper where Base == CoreFoundation.CGSize {
  public func resize(to size: CoreFoundation.CGSize, for contentMode: AmityUIKit4.KingfisherContentMode) -> CoreFoundation.CGSize
  public func constrained(_ size: CoreFoundation.CGSize) -> CoreFoundation.CGSize
  public func filling(_ size: CoreFoundation.CGSize) -> CoreFoundation.CGSize
  public func constrainedRect(for size: CoreFoundation.CGSize, anchor: CoreFoundation.CGPoint) -> CoreFoundation.CGRect
}
public enum AltTextMedia {
  case image(AmitySDK.AmityImageData)
  case video(AmitySDK.AmityImageData)
}
public enum AltTextConfigMode {
  case create(AmityUIKit4.AltTextMedia)
  case edit(Swift.String, AmityUIKit4.AltTextMedia)
}
@_Concurrency.MainActor @preconcurrency public struct AmityAltTextConfigComponent : AmityUIKit4.AmityComponentIdentifiable, SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var pageId: AmityUIKit4.PageId?
  @_Concurrency.MainActor @preconcurrency public var id: AmityUIKit4.ComponentId {
    get
  }
  @_Concurrency.MainActor @preconcurrency public init(mode: AmityUIKit4.AltTextConfigMode, result: @escaping (Swift.String) -> Swift.Void, pageId: AmityUIKit4.PageId? = nil)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s11AmityUIKit40A22AltTextConfigComponentV4bodyQrvp", 0) __
  public typealias ID = AmityUIKit4.ComponentId
}
@_Concurrency.MainActor @preconcurrency public struct AmityCommunityCommentsNotificationSettingPage : AmityUIKit4.AmityPageView {
  @SwiftUICore.EnvironmentObject @_projectedValueProperty($host) @_Concurrency.MainActor @preconcurrency public var host: AmityUIKit4.AmitySwiftUIHostWrapper {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var $host: SwiftUICore.EnvironmentObject<AmityUIKit4.AmitySwiftUIHostWrapper>.Wrapper {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var id: AmityUIKit4.PageId {
    get
  }
  @_Concurrency.MainActor @preconcurrency public init(community: AmitySDK.AmityCommunity)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s11AmityUIKit40A40CommunityCommentsNotificationSettingPageV4bodyQrvp", 0) __
  public typealias ID = AmityUIKit4.PageId
}
open class AmitySocialHomePageBehavior {
  @_hasMissingDesignatedInitializers open class Context {
    final public let page: AmityUIKit4.AmitySocialHomePage
    @objc deinit
  }
  public init()
  open func goToGlobalSearchPage(context: AmityUIKit4.AmitySocialHomePageBehavior.Context)
  open func goToMyCommunitiesSearchPage(context: AmityUIKit4.AmitySocialHomePageBehavior.Context)
  open func goToNotificationTrayPage(context: AmityUIKit4.AmitySocialHomePageBehavior.Context)
  @objc deinit
}
extension Swift.CustomStringConvertible where Self : Swift.Encodable {
  public var description: Swift.String {
    get
  }
}
extension Swift.CustomStringConvertible where Self : AnyObject, Self : Swift.Encodable {
  public var description: Swift.String {
    get
  }
}
extension AmityUIKit4.AmityPostModel {
  public class PollModel {
    final public let id: Swift.String
    final public let question: Swift.String
    final public let answers: [AmityUIKit4.AmityPostModel.PollModel.Answer]
    final public let canVoteMultipleOptions: Swift.Bool
    final public let status: Swift.String
    final public let isClosed: Swift.Bool
    final public let isVoted: Swift.Bool
    final public let closedIn: Swift.UInt64
    final public let voteCount: Swift.Int
    final public let createdAt: Foundation.Date
    final public let isOpen: Swift.Bool
    public init(poll: AmitySDK.AmityPoll)
    public class Answer : Swift.Identifiable {
      final public let id: Swift.String
      final public let dataType: Swift.String
      final public let text: Swift.String
      final public let isVotedByUser: Swift.Bool
      final public let voteCount: Swift.Int
      public init(answer: AmitySDK.AmityPollAnswer)
      public typealias ID = Swift.String
      @objc deinit
    }
    @objc deinit
  }
}
extension AmityUIKit4.AmityPostModel {
  public enum PostDisplayType {
    case feed
    case postDetail
    public static func == (a: AmityUIKit4.AmityPostModel.PostDisplayType, b: AmityUIKit4.AmityPostModel.PostDisplayType) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum LivestreamState {
    case live
    case ended
    case terminated
    case recorded
    case idle
    case none
    public static func == (a: AmityUIKit4.AmityPostModel.LivestreamState, b: AmityUIKit4.AmityPostModel.LivestreamState) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public class Author {
    final public let avatarURL: Swift.String?
    final public let displayName: Swift.String?
    final public let isGlobalBan: Swift.Bool
    final public let isBrand: Swift.Bool
    public init(avatarURL: Swift.String?, displayName: Swift.String?, isGlobalBan: Swift.Bool, isBrand: Swift.Bool)
    @objc deinit
  }
  open class AmityPostAppearance {
    public init()
    public var displayType: AmityUIKit4.AmityPostModel.PostDisplayType
    public var shouldShowCommunityName: Swift.Bool
    public var isExpanding: Swift.Bool
    public var shouldContentExpand: Swift.Bool {
      get
    }
    public var shouldShowOption: Swift.Bool {
      get
    }
    @objc deinit
  }
}
public class AmityPostModel : Swift.Identifiable {
  final public let postId: Swift.String
  final public let postedUserId: Swift.String
  final public let dataType: Swift.String
  final public let myReactions: [AmityUIKit4.ReactionType]
  final public let allReactions: [Swift.String]
  final public let reactions: [Swift.String : Swift.Int]
  final public let targetId: Swift.String
  final public let data: [Swift.String : Any]
  public var medias: [AmityUIKit4.AmityMedia]
  final public let targetCommunity: AmitySDK.AmityCommunity?
  final public let metadata: [Swift.String : Any]?
  final public let mentionees: [AmitySDK.AmityMentionees]?
  public var postTargetType: AmitySDK.AmityPostTargetType {
    get
  }
  public var isOwner: Swift.Bool {
    get
  }
  public var isEdited: Swift.Bool
  public var isCommentable: Swift.Bool {
    get
  }
  public var isGroupMember: Swift.Bool {
    get
  }
  public var postedUser: AmityUIKit4.AmityPostModel.Author?
  public var displayName: Swift.String {
    get
  }
  final public let timestamp: Swift.String
  final public let reactionsCount: Swift.Int
  final public let allCommentCount: Swift.Int
  final public let sharedCount: Swift.Int
  public var appearance: AmityUIKit4.AmityPostModel.AmityPostAppearance
  public var poll: AmityUIKit4.AmityPostModel.PollModel?
  public var isPinned: Swift.Bool
  final public let analytic: AmitySDK.AmityPostAnalytics
  final public let impression: Swift.Int
  public init(post: AmitySDK.AmityPost, isPinned: Swift.Bool = false)
  public var maximumLastestComments: Swift.Int {
    get
  }
  public var viewAllCommentSection: Swift.Int {
    get
  }
  public func getComment(at indexPath: Foundation.IndexPath, totalComponent index: Swift.Int) -> AmityUIKit4.AmityCommentModel?
  public typealias ID = Swift.ObjectIdentifier
  @objc deinit
}
@available(macOS 11.0, iOS 14.0, tvOS 14.0, watchOS 7.0, *)
extension SwiftUICore.EnvironmentValues {
  public var urlImageService: AmityUIKit4.URLImageService {
    get
    set
  }
  public var urlImageOptions: AmityUIKit4.URLImageOptions {
    get
    set
  }
}
@_Concurrency.MainActor @preconcurrency public struct ExpandableText : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public init(_ text: Swift.String, metadata: [Swift.String : Any]? = nil, mentionees: [AmitySDK.AmityMentionees]? = nil, onTapMentionee: ((Swift.String) -> Swift.Void)? = nil)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s11AmityUIKit414ExpandableTextV4bodyQrvp", 0) __
}
open class AmityUserPendingFollowRequestsPageBehavior {
  @_hasMissingDesignatedInitializers open class Context {
    final public let page: AmityUIKit4.AmityUserPendingFollowRequestsPage
    final public let userId: Swift.String
    @objc deinit
  }
  public init()
  open func goToUserProfilePage(context: AmityUIKit4.AmityUserPendingFollowRequestsPageBehavior.Context)
  @objc deinit
}
extension Swift.String : AmityUIKit4.KingfisherCompatibleValue {
}
open class AmityMyCommunitiesSearchPageBehavior {
  @_hasMissingDesignatedInitializers open class Context {
    final public let page: AmityUIKit4.AmityMyCommunitiesSearchPage
    final public let communityId: Swift.String?
    @objc deinit
  }
  public init()
  open func goToCommunityProfilePage(context: AmityUIKit4.AmityMyCommunitiesSearchPageBehavior.Context)
  @objc deinit
}
extension AmityUIKit4.AmityCommentView : Swift.Sendable {}
extension AmityUIKit4.AmityCommunityMembershipPage : Swift.Sendable {}
extension AmityUIKit4.AmityPostComposerMode : Swift.Equatable {}
extension AmityUIKit4.AmityPostComposerMode : Swift.Hashable {}
extension AmityUIKit4.AmityPostComposerPage : Swift.Sendable {}
extension AmityUIKit4.AmityUserProfilePage : Swift.Sendable {}
extension AmityUIKit4.AmityTrendingCommunitiesComponent : AmityUIKit4.AmityComponentIdentifiable {}
extension AmityUIKit4.AmityTrendingCommunitiesComponent : SwiftUICore.View {}
extension AmityUIKit4.AmityTrendingCommunitiesComponent : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension AmityUIKit4.HorizontalSwipeDirection : Swift.Equatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension AmityUIKit4.HorizontalSwipeDirection : Swift.Hashable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension AmityUIKit4.VerticalSwipeDirection : Swift.Equatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension AmityUIKit4.VerticalSwipeDirection : Swift.Hashable {}
extension AmityUIKit4.AmityViewStoryPage : Swift.Sendable {}
extension AmityUIKit4.Shimmer : Swift.Sendable {}
extension AmityUIKit4.AmityPostTargetSelectionPage : Swift.Sendable {}
extension AmityUIKit4.AmityCommunitySettingPage : Swift.Sendable {}
extension AmityUIKit4.AmityCommunityHeaderComponent : AmityUIKit4.AmityComponentIdentifiable {}
extension AmityUIKit4.AmityCommunityHeaderComponent : SwiftUICore.View {}
extension AmityUIKit4.AmityCommunityHeaderComponent : Swift.Sendable {}
extension AmityUIKit4.AmityLiveChatMessageComposeBar : AmityUIKit4.AmityComponentIdentifiable {}
extension AmityUIKit4.AmityLiveChatMessageComposeBar : SwiftUICore.View {}
extension AmityUIKit4.AmityLiveChatMessageComposeBar : Swift.Sendable {}
extension AmityUIKit4.AmityCommunitySearchResultComponent : AmityUIKit4.AmityComponentIdentifiable {}
extension AmityUIKit4.AmityCommunitySearchResultComponent : SwiftUICore.View {}
extension AmityUIKit4.AmityCommunitySearchResultComponent : Swift.Sendable {}
extension AmityUIKit4.AmityCreateStoryPage : Swift.Sendable {}
extension AmityUIKit4.AmityMessageTextEditorView : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension AmityUIKit4.GesturePriority : Swift.Equatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension AmityUIKit4.GesturePriority : Swift.Hashable {}
extension AmityUIKit4.AmityMyCommunitiesSearchPage : Swift.Sendable {}
extension AmityUIKit4.PredicateOperator : Swift.Equatable {}
extension AmityUIKit4.PredicateOperator : Swift.Hashable {}
extension AmityUIKit4.AmityCommunitiesByCategoryPage : Swift.Sendable {}
extension AmityUIKit4.AmityDraftStoryPage : Swift.Sendable {}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension AmityUIKit4.KFImage : Swift.Sendable {}
extension AmityUIKit4.AmityCommunitySetupPage : Swift.Sendable {}
extension AmityUIKit4.AmityLiveChatPage : Swift.Sendable {}
extension AmityUIKit4.PageId : Swift.Equatable {}
extension AmityUIKit4.PageId : Swift.Hashable {}
extension AmityUIKit4.PageId : Swift.RawRepresentable {}
extension AmityUIKit4.ComponentId : Swift.Equatable {}
extension AmityUIKit4.ComponentId : Swift.Hashable {}
extension AmityUIKit4.ComponentId : Swift.RawRepresentable {}
extension AmityUIKit4.ElementId : Swift.Equatable {}
extension AmityUIKit4.ElementId : Swift.Hashable {}
extension AmityUIKit4.ElementId : Swift.RawRepresentable {}
extension AmityUIKit4.AmityLivestreamPostTargetSelectionPage : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension AmityUIKit4.Pager : Swift.Sendable {}
extension AmityUIKit4.ToastStyle : Swift.Equatable {}
extension AmityUIKit4.ToastStyle : Swift.Hashable {}
extension AmityUIKit4.ToastView : Swift.Sendable {}
extension AmityUIKit4.CacheType : Swift.Equatable {}
extension AmityUIKit4.CacheType : Swift.Hashable {}
extension AmityUIKit4.ExpandableText : Swift.Sendable {}
extension AmityUIKit4.AmityLiveChatMessageSenderView : AmityUIKit4.AmityElementIdentifiable {}
extension AmityUIKit4.AmityLiveChatMessageSenderView : SwiftUICore.View {}
extension AmityUIKit4.AmityLiveChatMessageSenderView : Swift.Sendable {}
extension AmityUIKit4.AmityLiveChatMessageReactionPicker : AmityUIKit4.AmityElementIdentifiable {}
extension AmityUIKit4.AmityLiveChatMessageReactionPicker : SwiftUICore.View {}
extension AmityUIKit4.AmityLiveChatMessageReactionPicker : Swift.Sendable {}
extension AmityUIKit4.AmityCommunityAddUserPage : Swift.Sendable {}
extension AmityUIKit4.AmityLivestreamTerminatedPageType : Swift.Equatable {}
extension AmityUIKit4.AmityLivestreamTerminatedPageType : Swift.Hashable {}
extension AmityUIKit4.AmityLivestreamTerminatedPage : Swift.Sendable {}
extension AmityUIKit4.AmityEmptyNewsFeedComponent : AmityUIKit4.AmityComponentIdentifiable {}
extension AmityUIKit4.AmityEmptyNewsFeedComponent : SwiftUICore.View {}
extension AmityUIKit4.AmityEmptyNewsFeedComponent : Swift.Sendable {}
extension AmityUIKit4.AmityLiveChatMessageQuickReaction : Swift.Sendable {}
extension AmityUIKit4.AmityUserPendingFollowRequestsPage : Swift.Sendable {}
extension AmityUIKit4.AmityPendingPostContentComponent : AmityUIKit4.AmityComponentIdentifiable {}
extension AmityUIKit4.AmityPendingPostContentComponent : SwiftUICore.View {}
extension AmityUIKit4.AmityPendingPostContentComponent : Swift.Sendable {}
@available(iOS 14.0, tvOS 14.0, macOS 11.0, watchOS 7.0, *)
extension AmityUIKit4.ImageDecoder.DecodingOptions.Mode : Swift.Equatable {}
@available(iOS 14.0, tvOS 14.0, macOS 11.0, watchOS 7.0, *)
extension AmityUIKit4.ImageDecoder.DecodingOptions.Mode : Swift.Hashable {}
@available(iOS 14.0, tvOS 14.0, macOS 11.0, watchOS 7.0, *)
extension AmityUIKit4.ImageDecoder.SubsamplingLevel : Swift.Equatable {}
@available(iOS 14.0, tvOS 14.0, macOS 11.0, watchOS 7.0, *)
extension AmityUIKit4.ImageDecoder.SubsamplingLevel : Swift.Hashable {}
@available(iOS 14.0, tvOS 14.0, macOS 11.0, watchOS 7.0, *)
extension AmityUIKit4.ImageDecoder.SubsamplingLevel : Swift.RawRepresentable {}
@available(iOS 14.0, tvOS 14.0, macOS 11.0, watchOS 7.0, *)
extension AmityUIKit4.ImageDecoder.EncodedDataStatus : Swift.Equatable {}
@available(iOS 14.0, tvOS 14.0, macOS 11.0, watchOS 7.0, *)
extension AmityUIKit4.ImageDecoder.EncodedDataStatus : Swift.Hashable {}
extension AmityUIKit4.SearchType : Swift.Equatable {}
extension AmityUIKit4.SearchType : Swift.Hashable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension AmityUIKit4.SwipeInteractionArea : Swift.Equatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension AmityUIKit4.SwipeInteractionArea : Swift.Hashable {}
extension AmityUIKit4.AmityEditUserProfilePage : Swift.Sendable {}
extension AmityUIKit4.AmityRecommendedCommunitiesComponent : AmityUIKit4.AmityComponentIdentifiable {}
extension AmityUIKit4.AmityRecommendedCommunitiesComponent : SwiftUICore.View {}
extension AmityUIKit4.AmityRecommendedCommunitiesComponent : Swift.Sendable {}
extension AmityUIKit4.AmityTopSearchBarComponent : AmityUIKit4.AmityComponentIdentifiable {}
extension AmityUIKit4.AmityTopSearchBarComponent : SwiftUICore.View {}
extension AmityUIKit4.AmityTopSearchBarComponent : Swift.Sendable {}
extension AmityUIKit4.AmityCreatePostMenuComponent : AmityUIKit4.AmityComponentIdentifiable {}
extension AmityUIKit4.AmityCreatePostMenuComponent : SwiftUICore.View {}
extension AmityUIKit4.AmityCreatePostMenuComponent : Swift.Sendable {}
extension AmityUIKit4.AmityReactionList : AmityUIKit4.AmityComponentIdentifiable {}
extension AmityUIKit4.AmityReactionList : SwiftUICore.View {}
extension AmityUIKit4.AmityReactionList : Swift.Sendable {}
extension AmityUIKit4.AmityLiveChatMessageReactionPreview : Swift.Sendable {}
extension AmityUIKit4.CameraState : Swift.Equatable {}
extension AmityUIKit4.CameraState : Swift.Hashable {}
extension AmityUIKit4.CameraDevice : Swift.Equatable {}
extension AmityUIKit4.CameraDevice : Swift.Hashable {}
extension AmityUIKit4.CameraFlashMode : Swift.Equatable {}
extension AmityUIKit4.CameraFlashMode : Swift.Hashable {}
extension AmityUIKit4.CameraFlashMode : Swift.RawRepresentable {}
extension AmityUIKit4.CameraOutputMode : Swift.Equatable {}
extension AmityUIKit4.CameraOutputMode : Swift.Hashable {}
extension AmityUIKit4.CaptureError : Swift.Equatable {}
extension AmityUIKit4.CaptureError : Swift.Hashable {}
extension AmityUIKit4.CameraManager : Swift.Sendable {}
extension AmityUIKit4.EmptyCommunityFeedViewType : Swift.Equatable {}
extension AmityUIKit4.EmptyCommunityFeedViewType : Swift.Hashable {}
extension AmityUIKit4.EmptyCommunityFeedView : Swift.Sendable {}
extension AmityUIKit4.AmityStoryTargetSelectionPage : Swift.Sendable {}
extension AmityUIKit4.AmitySocialHomeTopNavigationComponent : AmityUIKit4.AmityComponentIdentifiable {}
extension AmityUIKit4.AmitySocialHomeTopNavigationComponent : SwiftUICore.View {}
extension AmityUIKit4.AmitySocialHomeTopNavigationComponent : Swift.Sendable {}
extension AmityUIKit4.AmityCommunityVideoFeedComponent : AmityUIKit4.AmityComponentIdentifiable {}
extension AmityUIKit4.AmityCommunityVideoFeedComponent : SwiftUICore.View {}
extension AmityUIKit4.AmityCommunityVideoFeedComponent : Swift.Sendable {}
extension AmityUIKit4.AmityLiveChatMessageReceiverView : AmityUIKit4.AmityElementIdentifiable {}
extension AmityUIKit4.AmityLiveChatMessageReceiverView : SwiftUICore.View {}
extension AmityUIKit4.AmityLiveChatMessageReceiverView : Swift.Sendable {}
extension AmityUIKit4.AmityNotificationTrayPage : Swift.Sendable {}
extension AmityUIKit4.KingfisherContentMode : Swift.Equatable {}
extension AmityUIKit4.KingfisherContentMode : Swift.Hashable {}
extension AmityUIKit4.AmityCommunityPostPermissionPage : Swift.Sendable {}
extension AmityUIKit4.AmityCommunityCategoriesComponent : AmityUIKit4.AmityComponentIdentifiable {}
extension AmityUIKit4.AmityCommunityCategoriesComponent : SwiftUICore.View {}
extension AmityUIKit4.AmityCommunityCategoriesComponent : Swift.Sendable {}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension AmityUIKit4.KFAnimatedImage : Swift.Sendable {}
extension AmityUIKit4.RecordedStreamPlayerView : Swift.Sendable {}
extension AmityUIKit4.LivestreamPlayerView : Swift.Sendable {}
extension AmityUIKit4.ImageFormat : Swift.Equatable {}
extension AmityUIKit4.ImageFormat : Swift.Hashable {}
extension AmityUIKit4.URLImageError : Swift.Equatable {}
extension AmityUIKit4.URLImageError : Swift.Hashable {}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension AmityUIKit4.KFAnimatedImageViewRepresenter : SwiftUI.UIViewRepresentable {}
@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension AmityUIKit4.KFAnimatedImageViewRepresenter : Swift.Sendable {}
extension AmityUIKit4.AmityStoryTabComponent : AmityUIKit4.AmityComponentIdentifiable {}
extension AmityUIKit4.AmityStoryTabComponent : SwiftUICore.View {}
extension AmityUIKit4.AmityStoryTabComponent : Swift.Sendable {}
extension AmityUIKit4.AmityCommunityStoriesNotificationSettingPage : Swift.Sendable {}
@available(macOS 11.0, iOS 14.0, tvOS 14.0, watchOS 7.0, *)
extension AmityUIKit4.URLImage : Swift.Sendable {}
extension AmityUIKit4.VideoPlayerView.PausedReason : Swift.Equatable {}
extension AmityUIKit4.VideoPlayerView.PausedReason : Swift.Hashable {}
extension AmityUIKit4.VideoPlayerView.PausedReason : Swift.RawRepresentable {}
extension AmityUIKit4.AmityDetailedMediaAttachmentComponent : AmityUIKit4.AmityComponentIdentifiable {}
extension AmityUIKit4.AmityDetailedMediaAttachmentComponent : SwiftUICore.View {}
extension AmityUIKit4.AmityDetailedMediaAttachmentComponent : Swift.Sendable {}
extension AmityUIKit4.AmityGlobalFeedComponent : AmityUIKit4.AmityComponentIdentifiable {}
extension AmityUIKit4.AmityGlobalFeedComponent : SwiftUICore.View {}
extension AmityUIKit4.AmityGlobalFeedComponent : Swift.Sendable {}
extension AmityUIKit4.AmityNewsFeedComponent : AmityUIKit4.AmityComponentIdentifiable {}
extension AmityUIKit4.AmityNewsFeedComponent : SwiftUICore.View {}
extension AmityUIKit4.AmityNewsFeedComponent : Swift.Sendable {}
extension AmityUIKit4.AmityUserRelationshipPageTab : Swift.Equatable {}
extension AmityUIKit4.AmityUserRelationshipPageTab : Swift.Hashable {}
extension AmityUIKit4.AmityUserRelationshipPage : Swift.Sendable {}
extension AmityUIKit4.AmityCommunityProfileTabComponent : AmityUIKit4.AmityComponentIdentifiable {}
extension AmityUIKit4.AmityCommunityProfileTabComponent : SwiftUICore.View {}
extension AmityUIKit4.AmityCommunityProfileTabComponent : Swift.Sendable {}
extension AmityUIKit4.AmitySocialHomePage : Swift.Sendable {}
extension AmityUIKit4.AmityPendingPostsPage : Swift.Sendable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension AmityUIKit4.PageTransitionError : Swift.Equatable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension AmityUIKit4.PageTransitionError : Swift.Hashable {}
extension AmityUIKit4.AmityMediaAttachmentComponent : AmityUIKit4.AmityComponentIdentifiable {}
extension AmityUIKit4.AmityMediaAttachmentComponent : SwiftUICore.View {}
extension AmityUIKit4.AmityMediaAttachmentComponent : Swift.Sendable {}
extension AmityUIKit4.AmitySocialGlobalSearchPage : Swift.Sendable {}
extension AmityUIKit4.AmityUserImageFeedComponent : AmityUIKit4.AmityComponentIdentifiable {}
extension AmityUIKit4.AmityUserImageFeedComponent : SwiftUICore.View {}
extension AmityUIKit4.AmityUserImageFeedComponent : Swift.Sendable {}
extension AmityUIKit4.AmityTextEditorView : Swift.Sendable {}
extension AmityUIKit4.AmityMyCommunitiesComponent : AmityUIKit4.AmityComponentIdentifiable {}
extension AmityUIKit4.AmityMyCommunitiesComponent : SwiftUICore.View {}
extension AmityUIKit4.AmityMyCommunitiesComponent : Swift.Sendable {}
@available(macOS 11.0, iOS 14.0, tvOS 14.0, watchOS 7.0, *)
extension AmityUIKit4.URLImageActivityIndicator : Swift.Sendable {}
extension AmityUIKit4.AmityCommunityStorySettingPage : Swift.Sendable {}
extension AmityUIKit4.AmityLivestreamPlayerPage : Swift.Sendable {}
extension AmityUIKit4.AmityPostDetailPage : Swift.Sendable {}
extension AmityUIKit4.AmityEditCommentView : Swift.Sendable {}
extension AmityUIKit4.AmityBlockedUsersPage : Swift.Sendable {}
extension AmityUIKit4.AmityPollTargetSelectionPage : Swift.Sendable {}
extension UIKit.UINavigationController.UINavigationControllerAnimation : Swift.Equatable {}
extension UIKit.UINavigationController.UINavigationControllerAnimation : Swift.Hashable {}
extension AmityUIKit4.CircularProgressView : Swift.Sendable {}
extension AmityUIKit4.AmityCommunityImageFeedComponent : AmityUIKit4.AmityComponentIdentifiable {}
extension AmityUIKit4.AmityCommunityImageFeedComponent : SwiftUICore.View {}
extension AmityUIKit4.AmityCommunityImageFeedComponent : Swift.Sendable {}
extension AmityUIKit4.AmitySocialHomePageTab : Swift.Equatable {}
extension AmityUIKit4.AmitySocialHomePageTab : Swift.Hashable {}
extension AmityUIKit4.AmitySocialHomePageTab : Swift.RawRepresentable {}
extension AmityUIKit4.BottomSheet : Swift.Sendable {}
extension AmityUIKit4.AmityLiveChatMessageList : AmityUIKit4.AmityComponentIdentifiable {}
extension AmityUIKit4.AmityLiveChatMessageList : SwiftUICore.View {}
extension AmityUIKit4.AmityLiveChatMessageList : Swift.Sendable {}
extension AmityUIKit4.AmityCommunityFeedComponent : AmityUIKit4.AmityComponentIdentifiable {}
extension AmityUIKit4.AmityCommunityFeedComponent : SwiftUICore.View {}
extension AmityUIKit4.AmityCommunityFeedComponent : Swift.Sendable {}
extension AmityUIKit4.AmityPostContentComponentStyle : Swift.Equatable {}
extension AmityUIKit4.AmityPostContentComponentStyle : Swift.Hashable {}
extension AmityUIKit4.AmityPostCategory : Swift.Equatable {}
extension AmityUIKit4.AmityPostCategory : Swift.Hashable {}
extension AmityUIKit4.AmityPostContentComponent : AmityUIKit4.AmityComponentIdentifiable {}
extension AmityUIKit4.AmityPostContentComponent : SwiftUICore.View {}
extension AmityUIKit4.AmityPostContentComponent : Swift.Sendable {}
extension AmityUIKit4.AmityUserProfileHeaderComponent : AmityUIKit4.AmityComponentIdentifiable {}
extension AmityUIKit4.AmityUserProfileHeaderComponent : SwiftUICore.View {}
extension AmityUIKit4.AmityUserProfileHeaderComponent : Swift.Sendable {}
extension AmityUIKit4.AmityEmptyStateView : Swift.Sendable {}
extension AmityUIKit4.AmityPollPostComposerPage : Swift.Sendable {}
extension AmityUIKit4.AmityCommunityProfilePage : Swift.Sendable {}
extension AmityUIKit4.AmityCommunityAddCategoryPage : Swift.Sendable {}
extension AmityUIKit4.ReactionType : Swift.Equatable {}
extension AmityUIKit4.ReactionType : Swift.Hashable {}
extension AmityUIKit4.ReactionType : Swift.RawRepresentable {}
extension AmityUIKit4.AmityUserSearchResultComponent : AmityUIKit4.AmityComponentIdentifiable {}
extension AmityUIKit4.AmityUserSearchResultComponent : SwiftUICore.View {}
extension AmityUIKit4.AmityUserSearchResultComponent : Swift.Sendable {}
extension AmityUIKit4.AmityCreateLivestreamPage : Swift.Sendable {}
extension AmityUIKit4.AmityCommunityNotificationSettingPage : Swift.Sendable {}
extension AmityUIKit4.AmityLiveChatHeader : AmityUIKit4.AmityComponentIdentifiable {}
extension AmityUIKit4.AmityLiveChatHeader : SwiftUICore.View {}
extension AmityUIKit4.AmityLiveChatHeader : Swift.Sendable {}
extension AmityUIKit4.AmityLiveChatHeader.AmityMemberCountView : AmityUIKit4.AmityElementIdentifiable {}
extension AmityUIKit4.AmityLiveChatHeader.AmityMemberCountView : SwiftUICore.View {}
extension AmityUIKit4.AmityLiveChatHeader.AmityMemberCountView : Swift.Sendable {}
extension AmityUIKit4.AmityLiveChatHeader.AmityConnectivityView : AmityUIKit4.AmityElementIdentifiable {}
extension AmityUIKit4.AmityLiveChatHeader.AmityConnectivityView : SwiftUICore.View {}
extension AmityUIKit4.AmityLiveChatHeader.AmityConnectivityView : Swift.Sendable {}
extension AmityUIKit4.AmityLiveChatHeader.AmityAvatarView : AmityUIKit4.AmityElementIdentifiable {}
extension AmityUIKit4.AmityLiveChatHeader.AmityAvatarView : SwiftUICore.View {}
extension AmityUIKit4.AmityLiveChatHeader.AmityAvatarView : Swift.Sendable {}
extension AmityUIKit4.AmityCommentTrayComponent : AmityUIKit4.AmityComponentIdentifiable {}
extension AmityUIKit4.AmityCommentTrayComponent : SwiftUICore.View {}
extension AmityUIKit4.AmityCommentTrayComponent : Swift.Sendable {}
extension AmityUIKit4.AmityUserFeedComponent : AmityUIKit4.AmityComponentIdentifiable {}
extension AmityUIKit4.AmityUserFeedComponent : SwiftUICore.View {}
extension AmityUIKit4.AmityUserFeedComponent : Swift.Sendable {}
extension AmityUIKit4.AmityHyperLinkConfigComponent : AmityUIKit4.AmityComponentIdentifiable {}
extension AmityUIKit4.AmityHyperLinkConfigComponent : SwiftUICore.View {}
extension AmityUIKit4.AmityHyperLinkConfigComponent : Swift.Sendable {}
extension AmityUIKit4.AmityCommunityPostsNotificationSettingPage : Swift.Sendable {}
extension AmityUIKit4.AmityCommunityPinnedPostComponent : AmityUIKit4.AmityComponentIdentifiable {}
extension AmityUIKit4.AmityCommunityPinnedPostComponent : SwiftUICore.View {}
extension AmityUIKit4.AmityCommunityPinnedPostComponent : Swift.Sendable {}
extension AmityUIKit4.AmityUserVideoFeedComponent : AmityUIKit4.AmityComponentIdentifiable {}
extension AmityUIKit4.AmityUserVideoFeedComponent : SwiftUICore.View {}
extension AmityUIKit4.AmityUserVideoFeedComponent : Swift.Sendable {}
extension AmityUIKit4.AmityAllCategoriesPage : Swift.Sendable {}
extension AmityUIKit4.AmityAltTextConfigComponent : Swift.Sendable {}
extension AmityUIKit4.AmityCommunityCommentsNotificationSettingPage : Swift.Sendable {}
extension AmityUIKit4.AmityPostModel.PostDisplayType : Swift.Equatable {}
extension AmityUIKit4.AmityPostModel.PostDisplayType : Swift.Hashable {}
extension AmityUIKit4.AmityPostModel.LivestreamState : Swift.Equatable {}
extension AmityUIKit4.AmityPostModel.LivestreamState : Swift.Hashable {}
