// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0 effective-5.10 (swiftlang-6.0.0.9.10 clang-1600.0.26.2)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name AmityLiveVideoBroadcastKit
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import AVFoundation
@_exported import AmityLiveVideoBroadcastKit
import AmitySDK
import AudioToolbox
import AudioUnit
import CoreAudio
import CoreGraphics
import CoreImage
import CoreMedia
import CoreVideo
import Foundation
import GLKit
import MachO
import Metal
import ReplayKit
import Swift
import UIKit
import VideoToolbox
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import os.log
import os
public enum AmityStreamBroadcasterState : Swift.Int {
  case idle
  case connecting
  case connected
  case disconnected
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers public class AmityStreamBroadcasterConfiguration : ObjectiveC.NSObject {
  public var frameRate: AmityLiveVideoBroadcastKit.AmityBroadcastFrameRate
  public var bitrate: Swift.Int
  public var canvasFitting: AmityLiveVideoBroadcastKit.AmityBroadcastCanvasFitting
  @objc override dynamic public init()
  @objc deinit
}
public enum AmityBroadcastFrameRate : Swift.Int {
  case fps30
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum AmityBroadcastCanvasFitting : Swift.Int {
  case fit
  case fill
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum AmityBroadcastCameraPosition : Swift.Int {
  case front
  case back
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public class AmityVideoBroadcaster : ObjectiveC.NSObject {
  weak public var delegate: (any AmityLiveVideoBroadcastKit.AmityVideoBroadcasterDelegate)?
  public var videoResolution: CoreFoundation.CGSize {
    get
    set
  }
  public var switchCamera: AmityLiveVideoBroadcastKit.AmityBroadcastCameraPosition {
    get
    set
  }
  public var state: AmityLiveVideoBroadcastKit.AmityStreamBroadcasterState {
    get
  }
  public var previewView: UIKit.UIView
  public init(client: AmitySDK.AmityClient)
  public func setup(with config: AmityLiveVideoBroadcastKit.AmityStreamBroadcasterConfiguration)
  public func startPublishNewStream(title: Swift.String, description: Swift.String, thumbnailImage: AmitySDK.AmityImageData?)
  public func startPublish(existingStreamId: Swift.String)
  public func suspendPublish()
  public func stopPublish()
  @objc deinit
}
public protocol AmityVideoBroadcasterDelegate : AnyObject {
  func amityVideoBroadcasterDidUpdateState(_ broadcaster: AmityLiveVideoBroadcastKit.AmityVideoBroadcaster)
}
extension AmityLiveVideoBroadcastKit.AmityStreamBroadcasterState : Swift.Equatable {}
extension AmityLiveVideoBroadcastKit.AmityStreamBroadcasterState : Swift.Hashable {}
extension AmityLiveVideoBroadcastKit.AmityStreamBroadcasterState : Swift.RawRepresentable {}
extension AmityLiveVideoBroadcastKit.AmityBroadcastFrameRate : Swift.Equatable {}
extension AmityLiveVideoBroadcastKit.AmityBroadcastFrameRate : Swift.Hashable {}
extension AmityLiveVideoBroadcastKit.AmityBroadcastFrameRate : Swift.RawRepresentable {}
extension AmityLiveVideoBroadcastKit.AmityBroadcastCanvasFitting : Swift.Equatable {}
extension AmityLiveVideoBroadcastKit.AmityBroadcastCanvasFitting : Swift.Hashable {}
extension AmityLiveVideoBroadcastKit.AmityBroadcastCanvasFitting : Swift.RawRepresentable {}
extension AmityLiveVideoBroadcastKit.AmityBroadcastCameraPosition : Swift.Equatable {}
extension AmityLiveVideoBroadcastKit.AmityBroadcastCameraPosition : Swift.Hashable {}
extension AmityLiveVideoBroadcastKit.AmityBroadcastCameraPosition : Swift.RawRepresentable {}
